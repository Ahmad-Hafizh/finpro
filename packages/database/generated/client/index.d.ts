
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model Referral
 * 
 */
export type Referral = $Result.DefaultSelection<Prisma.$ReferralPayload>
/**
 * Model Address
 * 
 */
export type Address = $Result.DefaultSelection<Prisma.$AddressPayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Store
 * 
 */
export type Store = $Result.DefaultSelection<Prisma.$StorePayload>
/**
 * Model Stock
 * 
 */
export type Stock = $Result.DefaultSelection<Prisma.$StockPayload>
/**
 * Model StockJournal
 * 
 */
export type StockJournal = $Result.DefaultSelection<Prisma.$StockJournalPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model ProductImg
 * 
 */
export type ProductImg = $Result.DefaultSelection<Prisma.$ProductImgPayload>
/**
 * Model ProductCategory
 * 
 */
export type ProductCategory = $Result.DefaultSelection<Prisma.$ProductCategoryPayload>
/**
 * Model VoucherStore
 * 
 */
export type VoucherStore = $Result.DefaultSelection<Prisma.$VoucherStorePayload>
/**
 * Model VoucherOngkir
 * 
 */
export type VoucherOngkir = $Result.DefaultSelection<Prisma.$VoucherOngkirPayload>
/**
 * Model VoucherProduct
 * 
 */
export type VoucherProduct = $Result.DefaultSelection<Prisma.$VoucherProductPayload>
/**
 * Model Discount
 * 
 */
export type Discount = $Result.DefaultSelection<Prisma.$DiscountPayload>
/**
 * Model Cart
 * 
 */
export type Cart = $Result.DefaultSelection<Prisma.$CartPayload>
/**
 * Model CartItem
 * 
 */
export type CartItem = $Result.DefaultSelection<Prisma.$CartItemPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model OrderItem
 * 
 */
export type OrderItem = $Result.DefaultSelection<Prisma.$OrderItemPayload>
/**
 * Model PaymentProof
 * 
 */
export type PaymentProof = $Result.DefaultSelection<Prisma.$PaymentProofPayload>
/**
 * Model OrderCancel
 * 
 */
export type OrderCancel = $Result.DefaultSelection<Prisma.$OrderCancelPayload>
/**
 * Model AdminOrder
 * 
 */
export type AdminOrder = $Result.DefaultSelection<Prisma.$AdminOrderPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  user: 'user',
  admin: 'admin',
  super_admin: 'super_admin'
};

export type Role = (typeof Role)[keyof typeof Role]


export const adminPosition: {
  store_manager: 'store_manager',
  store_delivery: 'store_delivery',
  store_logistic: 'store_logistic'
};

export type adminPosition = (typeof adminPosition)[keyof typeof adminPosition]


export const StockType: {
  in: 'in',
  out: 'out',
  transfer: 'transfer'
};

export type StockType = (typeof StockType)[keyof typeof StockType]


export const ActionEnum: {
  konfirmasi_pembayaran: 'konfirmasi_pembayaran',
  kirim_pesanan: 'kirim_pesanan',
  batalkan_pesanan: 'batalkan_pesanan'
};

export type ActionEnum = (typeof ActionEnum)[keyof typeof ActionEnum]


export const OrderStatus: {
  menunggu_pembayaran: 'menunggu_pembayaran',
  menunggu_konfirmasi: 'menunggu_konfirmasi',
  diproses: 'diproses',
  dikirim: 'dikirim',
  pesanan_dikonfirmasi: 'pesanan_dikonfirmasi',
  dibatalkan: 'dibatalkan'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]


export const PaymentStatus: {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type adminPosition = $Enums.adminPosition

export const adminPosition: typeof $Enums.adminPosition

export type StockType = $Enums.StockType

export const StockType: typeof $Enums.StockType

export type ActionEnum = $Enums.ActionEnum

export const ActionEnum: typeof $Enums.ActionEnum

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.referral`: Exposes CRUD operations for the **Referral** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Referrals
    * const referrals = await prisma.referral.findMany()
    * ```
    */
  get referral(): Prisma.ReferralDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.store`: Exposes CRUD operations for the **Store** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stores
    * const stores = await prisma.store.findMany()
    * ```
    */
  get store(): Prisma.StoreDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stock`: Exposes CRUD operations for the **Stock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stocks
    * const stocks = await prisma.stock.findMany()
    * ```
    */
  get stock(): Prisma.StockDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stockJournal`: Exposes CRUD operations for the **StockJournal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StockJournals
    * const stockJournals = await prisma.stockJournal.findMany()
    * ```
    */
  get stockJournal(): Prisma.StockJournalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productImg`: Exposes CRUD operations for the **ProductImg** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductImgs
    * const productImgs = await prisma.productImg.findMany()
    * ```
    */
  get productImg(): Prisma.ProductImgDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productCategory`: Exposes CRUD operations for the **ProductCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductCategories
    * const productCategories = await prisma.productCategory.findMany()
    * ```
    */
  get productCategory(): Prisma.ProductCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.voucherStore`: Exposes CRUD operations for the **VoucherStore** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VoucherStores
    * const voucherStores = await prisma.voucherStore.findMany()
    * ```
    */
  get voucherStore(): Prisma.VoucherStoreDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.voucherOngkir`: Exposes CRUD operations for the **VoucherOngkir** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VoucherOngkirs
    * const voucherOngkirs = await prisma.voucherOngkir.findMany()
    * ```
    */
  get voucherOngkir(): Prisma.VoucherOngkirDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.voucherProduct`: Exposes CRUD operations for the **VoucherProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VoucherProducts
    * const voucherProducts = await prisma.voucherProduct.findMany()
    * ```
    */
  get voucherProduct(): Prisma.VoucherProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.discount`: Exposes CRUD operations for the **Discount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Discounts
    * const discounts = await prisma.discount.findMany()
    * ```
    */
  get discount(): Prisma.DiscountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cart`: Exposes CRUD operations for the **Cart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carts
    * const carts = await prisma.cart.findMany()
    * ```
    */
  get cart(): Prisma.CartDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cartItem`: Exposes CRUD operations for the **CartItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CartItems
    * const cartItems = await prisma.cartItem.findMany()
    * ```
    */
  get cartItem(): Prisma.CartItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderItem`: Exposes CRUD operations for the **OrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderItems
    * const orderItems = await prisma.orderItem.findMany()
    * ```
    */
  get orderItem(): Prisma.OrderItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.paymentProof`: Exposes CRUD operations for the **PaymentProof** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentProofs
    * const paymentProofs = await prisma.paymentProof.findMany()
    * ```
    */
  get paymentProof(): Prisma.PaymentProofDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderCancel`: Exposes CRUD operations for the **OrderCancel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderCancels
    * const orderCancels = await prisma.orderCancel.findMany()
    * ```
    */
  get orderCancel(): Prisma.OrderCancelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.adminOrder`: Exposes CRUD operations for the **AdminOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminOrders
    * const adminOrders = await prisma.adminOrder.findMany()
    * ```
    */
  get adminOrder(): Prisma.AdminOrderDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.3.1
   * Query Engine version: acc0b9dd43eb689cbd20c9470515d719db10d0b0
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Account: 'Account',
    Profile: 'Profile',
    Referral: 'Referral',
    Address: 'Address',
    Admin: 'Admin',
    Store: 'Store',
    Stock: 'Stock',
    StockJournal: 'StockJournal',
    Product: 'Product',
    ProductImg: 'ProductImg',
    ProductCategory: 'ProductCategory',
    VoucherStore: 'VoucherStore',
    VoucherOngkir: 'VoucherOngkir',
    VoucherProduct: 'VoucherProduct',
    Discount: 'Discount',
    Cart: 'Cart',
    CartItem: 'CartItem',
    Order: 'Order',
    OrderItem: 'OrderItem',
    PaymentProof: 'PaymentProof',
    OrderCancel: 'OrderCancel',
    AdminOrder: 'AdminOrder'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "account" | "profile" | "referral" | "address" | "admin" | "store" | "stock" | "stockJournal" | "product" | "productImg" | "productCategory" | "voucherStore" | "voucherOngkir" | "voucherProduct" | "discount" | "cart" | "cartItem" | "order" | "orderItem" | "paymentProof" | "orderCancel" | "adminOrder"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      Referral: {
        payload: Prisma.$ReferralPayload<ExtArgs>
        fields: Prisma.ReferralFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReferralFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReferralFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          findFirst: {
            args: Prisma.ReferralFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReferralFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          findMany: {
            args: Prisma.ReferralFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>[]
          }
          create: {
            args: Prisma.ReferralCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          createMany: {
            args: Prisma.ReferralCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReferralCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>[]
          }
          delete: {
            args: Prisma.ReferralDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          update: {
            args: Prisma.ReferralUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          deleteMany: {
            args: Prisma.ReferralDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReferralUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReferralUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>[]
          }
          upsert: {
            args: Prisma.ReferralUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          aggregate: {
            args: Prisma.ReferralAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReferral>
          }
          groupBy: {
            args: Prisma.ReferralGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReferralGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReferralCountArgs<ExtArgs>
            result: $Utils.Optional<ReferralCountAggregateOutputType> | number
          }
        }
      }
      Address: {
        payload: Prisma.$AddressPayload<ExtArgs>
        fields: Prisma.AddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AddressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findFirst: {
            args: Prisma.AddressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findMany: {
            args: Prisma.AddressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          create: {
            args: Prisma.AddressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          createMany: {
            args: Prisma.AddressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AddressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          delete: {
            args: Prisma.AddressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          update: {
            args: Prisma.AddressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          deleteMany: {
            args: Prisma.AddressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AddressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AddressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          upsert: {
            args: Prisma.AddressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          aggregate: {
            args: Prisma.AddressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAddress>
          }
          groupBy: {
            args: Prisma.AddressGroupByArgs<ExtArgs>
            result: $Utils.Optional<AddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.AddressCountArgs<ExtArgs>
            result: $Utils.Optional<AddressCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Store: {
        payload: Prisma.$StorePayload<ExtArgs>
        fields: Prisma.StoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StoreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StoreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          findFirst: {
            args: Prisma.StoreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StoreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          findMany: {
            args: Prisma.StoreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>[]
          }
          create: {
            args: Prisma.StoreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          createMany: {
            args: Prisma.StoreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StoreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>[]
          }
          delete: {
            args: Prisma.StoreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          update: {
            args: Prisma.StoreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          deleteMany: {
            args: Prisma.StoreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StoreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StoreUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>[]
          }
          upsert: {
            args: Prisma.StoreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          aggregate: {
            args: Prisma.StoreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStore>
          }
          groupBy: {
            args: Prisma.StoreGroupByArgs<ExtArgs>
            result: $Utils.Optional<StoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.StoreCountArgs<ExtArgs>
            result: $Utils.Optional<StoreCountAggregateOutputType> | number
          }
        }
      }
      Stock: {
        payload: Prisma.$StockPayload<ExtArgs>
        fields: Prisma.StockFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StockFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StockFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          findFirst: {
            args: Prisma.StockFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StockFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          findMany: {
            args: Prisma.StockFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>[]
          }
          create: {
            args: Prisma.StockCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          createMany: {
            args: Prisma.StockCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StockCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>[]
          }
          delete: {
            args: Prisma.StockDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          update: {
            args: Prisma.StockUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          deleteMany: {
            args: Prisma.StockDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StockUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StockUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>[]
          }
          upsert: {
            args: Prisma.StockUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          aggregate: {
            args: Prisma.StockAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStock>
          }
          groupBy: {
            args: Prisma.StockGroupByArgs<ExtArgs>
            result: $Utils.Optional<StockGroupByOutputType>[]
          }
          count: {
            args: Prisma.StockCountArgs<ExtArgs>
            result: $Utils.Optional<StockCountAggregateOutputType> | number
          }
        }
      }
      StockJournal: {
        payload: Prisma.$StockJournalPayload<ExtArgs>
        fields: Prisma.StockJournalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StockJournalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockJournalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StockJournalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockJournalPayload>
          }
          findFirst: {
            args: Prisma.StockJournalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockJournalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StockJournalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockJournalPayload>
          }
          findMany: {
            args: Prisma.StockJournalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockJournalPayload>[]
          }
          create: {
            args: Prisma.StockJournalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockJournalPayload>
          }
          createMany: {
            args: Prisma.StockJournalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StockJournalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockJournalPayload>[]
          }
          delete: {
            args: Prisma.StockJournalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockJournalPayload>
          }
          update: {
            args: Prisma.StockJournalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockJournalPayload>
          }
          deleteMany: {
            args: Prisma.StockJournalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StockJournalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StockJournalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockJournalPayload>[]
          }
          upsert: {
            args: Prisma.StockJournalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockJournalPayload>
          }
          aggregate: {
            args: Prisma.StockJournalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStockJournal>
          }
          groupBy: {
            args: Prisma.StockJournalGroupByArgs<ExtArgs>
            result: $Utils.Optional<StockJournalGroupByOutputType>[]
          }
          count: {
            args: Prisma.StockJournalCountArgs<ExtArgs>
            result: $Utils.Optional<StockJournalCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      ProductImg: {
        payload: Prisma.$ProductImgPayload<ExtArgs>
        fields: Prisma.ProductImgFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductImgFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImgPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductImgFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImgPayload>
          }
          findFirst: {
            args: Prisma.ProductImgFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImgPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductImgFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImgPayload>
          }
          findMany: {
            args: Prisma.ProductImgFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImgPayload>[]
          }
          create: {
            args: Prisma.ProductImgCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImgPayload>
          }
          createMany: {
            args: Prisma.ProductImgCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductImgCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImgPayload>[]
          }
          delete: {
            args: Prisma.ProductImgDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImgPayload>
          }
          update: {
            args: Prisma.ProductImgUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImgPayload>
          }
          deleteMany: {
            args: Prisma.ProductImgDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductImgUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductImgUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImgPayload>[]
          }
          upsert: {
            args: Prisma.ProductImgUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImgPayload>
          }
          aggregate: {
            args: Prisma.ProductImgAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductImg>
          }
          groupBy: {
            args: Prisma.ProductImgGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductImgGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductImgCountArgs<ExtArgs>
            result: $Utils.Optional<ProductImgCountAggregateOutputType> | number
          }
        }
      }
      ProductCategory: {
        payload: Prisma.$ProductCategoryPayload<ExtArgs>
        fields: Prisma.ProductCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
          }
          findFirst: {
            args: Prisma.ProductCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
          }
          findMany: {
            args: Prisma.ProductCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>[]
          }
          create: {
            args: Prisma.ProductCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
          }
          createMany: {
            args: Prisma.ProductCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>[]
          }
          delete: {
            args: Prisma.ProductCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
          }
          update: {
            args: Prisma.ProductCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
          }
          deleteMany: {
            args: Prisma.ProductCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductCategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>[]
          }
          upsert: {
            args: Prisma.ProductCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
          }
          aggregate: {
            args: Prisma.ProductCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductCategory>
          }
          groupBy: {
            args: Prisma.ProductCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCategoryCountAggregateOutputType> | number
          }
        }
      }
      VoucherStore: {
        payload: Prisma.$VoucherStorePayload<ExtArgs>
        fields: Prisma.VoucherStoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VoucherStoreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherStorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VoucherStoreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherStorePayload>
          }
          findFirst: {
            args: Prisma.VoucherStoreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherStorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VoucherStoreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherStorePayload>
          }
          findMany: {
            args: Prisma.VoucherStoreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherStorePayload>[]
          }
          create: {
            args: Prisma.VoucherStoreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherStorePayload>
          }
          createMany: {
            args: Prisma.VoucherStoreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VoucherStoreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherStorePayload>[]
          }
          delete: {
            args: Prisma.VoucherStoreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherStorePayload>
          }
          update: {
            args: Prisma.VoucherStoreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherStorePayload>
          }
          deleteMany: {
            args: Prisma.VoucherStoreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VoucherStoreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VoucherStoreUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherStorePayload>[]
          }
          upsert: {
            args: Prisma.VoucherStoreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherStorePayload>
          }
          aggregate: {
            args: Prisma.VoucherStoreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVoucherStore>
          }
          groupBy: {
            args: Prisma.VoucherStoreGroupByArgs<ExtArgs>
            result: $Utils.Optional<VoucherStoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.VoucherStoreCountArgs<ExtArgs>
            result: $Utils.Optional<VoucherStoreCountAggregateOutputType> | number
          }
        }
      }
      VoucherOngkir: {
        payload: Prisma.$VoucherOngkirPayload<ExtArgs>
        fields: Prisma.VoucherOngkirFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VoucherOngkirFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherOngkirPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VoucherOngkirFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherOngkirPayload>
          }
          findFirst: {
            args: Prisma.VoucherOngkirFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherOngkirPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VoucherOngkirFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherOngkirPayload>
          }
          findMany: {
            args: Prisma.VoucherOngkirFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherOngkirPayload>[]
          }
          create: {
            args: Prisma.VoucherOngkirCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherOngkirPayload>
          }
          createMany: {
            args: Prisma.VoucherOngkirCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VoucherOngkirCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherOngkirPayload>[]
          }
          delete: {
            args: Prisma.VoucherOngkirDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherOngkirPayload>
          }
          update: {
            args: Prisma.VoucherOngkirUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherOngkirPayload>
          }
          deleteMany: {
            args: Prisma.VoucherOngkirDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VoucherOngkirUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VoucherOngkirUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherOngkirPayload>[]
          }
          upsert: {
            args: Prisma.VoucherOngkirUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherOngkirPayload>
          }
          aggregate: {
            args: Prisma.VoucherOngkirAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVoucherOngkir>
          }
          groupBy: {
            args: Prisma.VoucherOngkirGroupByArgs<ExtArgs>
            result: $Utils.Optional<VoucherOngkirGroupByOutputType>[]
          }
          count: {
            args: Prisma.VoucherOngkirCountArgs<ExtArgs>
            result: $Utils.Optional<VoucherOngkirCountAggregateOutputType> | number
          }
        }
      }
      VoucherProduct: {
        payload: Prisma.$VoucherProductPayload<ExtArgs>
        fields: Prisma.VoucherProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VoucherProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VoucherProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherProductPayload>
          }
          findFirst: {
            args: Prisma.VoucherProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VoucherProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherProductPayload>
          }
          findMany: {
            args: Prisma.VoucherProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherProductPayload>[]
          }
          create: {
            args: Prisma.VoucherProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherProductPayload>
          }
          createMany: {
            args: Prisma.VoucherProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VoucherProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherProductPayload>[]
          }
          delete: {
            args: Prisma.VoucherProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherProductPayload>
          }
          update: {
            args: Prisma.VoucherProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherProductPayload>
          }
          deleteMany: {
            args: Prisma.VoucherProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VoucherProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VoucherProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherProductPayload>[]
          }
          upsert: {
            args: Prisma.VoucherProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VoucherProductPayload>
          }
          aggregate: {
            args: Prisma.VoucherProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVoucherProduct>
          }
          groupBy: {
            args: Prisma.VoucherProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<VoucherProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.VoucherProductCountArgs<ExtArgs>
            result: $Utils.Optional<VoucherProductCountAggregateOutputType> | number
          }
        }
      }
      Discount: {
        payload: Prisma.$DiscountPayload<ExtArgs>
        fields: Prisma.DiscountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiscountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiscountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountPayload>
          }
          findFirst: {
            args: Prisma.DiscountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiscountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountPayload>
          }
          findMany: {
            args: Prisma.DiscountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountPayload>[]
          }
          create: {
            args: Prisma.DiscountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountPayload>
          }
          createMany: {
            args: Prisma.DiscountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DiscountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountPayload>[]
          }
          delete: {
            args: Prisma.DiscountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountPayload>
          }
          update: {
            args: Prisma.DiscountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountPayload>
          }
          deleteMany: {
            args: Prisma.DiscountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DiscountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DiscountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountPayload>[]
          }
          upsert: {
            args: Prisma.DiscountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscountPayload>
          }
          aggregate: {
            args: Prisma.DiscountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiscount>
          }
          groupBy: {
            args: Prisma.DiscountGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiscountGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiscountCountArgs<ExtArgs>
            result: $Utils.Optional<DiscountCountAggregateOutputType> | number
          }
        }
      }
      Cart: {
        payload: Prisma.$CartPayload<ExtArgs>
        fields: Prisma.CartFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CartFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CartFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          findFirst: {
            args: Prisma.CartFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CartFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          findMany: {
            args: Prisma.CartFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>[]
          }
          create: {
            args: Prisma.CartCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          createMany: {
            args: Prisma.CartCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CartCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>[]
          }
          delete: {
            args: Prisma.CartDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          update: {
            args: Prisma.CartUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          deleteMany: {
            args: Prisma.CartDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CartUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CartUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>[]
          }
          upsert: {
            args: Prisma.CartUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          aggregate: {
            args: Prisma.CartAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCart>
          }
          groupBy: {
            args: Prisma.CartGroupByArgs<ExtArgs>
            result: $Utils.Optional<CartGroupByOutputType>[]
          }
          count: {
            args: Prisma.CartCountArgs<ExtArgs>
            result: $Utils.Optional<CartCountAggregateOutputType> | number
          }
        }
      }
      CartItem: {
        payload: Prisma.$CartItemPayload<ExtArgs>
        fields: Prisma.CartItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CartItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CartItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          findFirst: {
            args: Prisma.CartItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CartItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          findMany: {
            args: Prisma.CartItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>[]
          }
          create: {
            args: Prisma.CartItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          createMany: {
            args: Prisma.CartItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CartItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>[]
          }
          delete: {
            args: Prisma.CartItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          update: {
            args: Prisma.CartItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          deleteMany: {
            args: Prisma.CartItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CartItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CartItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>[]
          }
          upsert: {
            args: Prisma.CartItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          aggregate: {
            args: Prisma.CartItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCartItem>
          }
          groupBy: {
            args: Prisma.CartItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<CartItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.CartItemCountArgs<ExtArgs>
            result: $Utils.Optional<CartItemCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      OrderItem: {
        payload: Prisma.$OrderItemPayload<ExtArgs>
        fields: Prisma.OrderItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findFirst: {
            args: Prisma.OrderItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findMany: {
            args: Prisma.OrderItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          create: {
            args: Prisma.OrderItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          createMany: {
            args: Prisma.OrderItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          delete: {
            args: Prisma.OrderItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          update: {
            args: Prisma.OrderItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          deleteMany: {
            args: Prisma.OrderItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          upsert: {
            args: Prisma.OrderItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          aggregate: {
            args: Prisma.OrderItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderItem>
          }
          groupBy: {
            args: Prisma.OrderItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderItemCountArgs<ExtArgs>
            result: $Utils.Optional<OrderItemCountAggregateOutputType> | number
          }
        }
      }
      PaymentProof: {
        payload: Prisma.$PaymentProofPayload<ExtArgs>
        fields: Prisma.PaymentProofFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentProofFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentProofPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentProofFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentProofPayload>
          }
          findFirst: {
            args: Prisma.PaymentProofFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentProofPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentProofFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentProofPayload>
          }
          findMany: {
            args: Prisma.PaymentProofFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentProofPayload>[]
          }
          create: {
            args: Prisma.PaymentProofCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentProofPayload>
          }
          createMany: {
            args: Prisma.PaymentProofCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentProofCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentProofPayload>[]
          }
          delete: {
            args: Prisma.PaymentProofDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentProofPayload>
          }
          update: {
            args: Prisma.PaymentProofUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentProofPayload>
          }
          deleteMany: {
            args: Prisma.PaymentProofDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentProofUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentProofUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentProofPayload>[]
          }
          upsert: {
            args: Prisma.PaymentProofUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentProofPayload>
          }
          aggregate: {
            args: Prisma.PaymentProofAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentProof>
          }
          groupBy: {
            args: Prisma.PaymentProofGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentProofGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentProofCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentProofCountAggregateOutputType> | number
          }
        }
      }
      OrderCancel: {
        payload: Prisma.$OrderCancelPayload<ExtArgs>
        fields: Prisma.OrderCancelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderCancelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderCancelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderCancelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderCancelPayload>
          }
          findFirst: {
            args: Prisma.OrderCancelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderCancelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderCancelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderCancelPayload>
          }
          findMany: {
            args: Prisma.OrderCancelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderCancelPayload>[]
          }
          create: {
            args: Prisma.OrderCancelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderCancelPayload>
          }
          createMany: {
            args: Prisma.OrderCancelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCancelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderCancelPayload>[]
          }
          delete: {
            args: Prisma.OrderCancelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderCancelPayload>
          }
          update: {
            args: Prisma.OrderCancelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderCancelPayload>
          }
          deleteMany: {
            args: Prisma.OrderCancelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderCancelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderCancelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderCancelPayload>[]
          }
          upsert: {
            args: Prisma.OrderCancelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderCancelPayload>
          }
          aggregate: {
            args: Prisma.OrderCancelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderCancel>
          }
          groupBy: {
            args: Prisma.OrderCancelGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderCancelGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCancelCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCancelCountAggregateOutputType> | number
          }
        }
      }
      AdminOrder: {
        payload: Prisma.$AdminOrderPayload<ExtArgs>
        fields: Prisma.AdminOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminOrderPayload>
          }
          findFirst: {
            args: Prisma.AdminOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminOrderPayload>
          }
          findMany: {
            args: Prisma.AdminOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminOrderPayload>[]
          }
          create: {
            args: Prisma.AdminOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminOrderPayload>
          }
          createMany: {
            args: Prisma.AdminOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminOrderPayload>[]
          }
          delete: {
            args: Prisma.AdminOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminOrderPayload>
          }
          update: {
            args: Prisma.AdminOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminOrderPayload>
          }
          deleteMany: {
            args: Prisma.AdminOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminOrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminOrderPayload>[]
          }
          upsert: {
            args: Prisma.AdminOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminOrderPayload>
          }
          aggregate: {
            args: Prisma.AdminOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminOrder>
          }
          groupBy: {
            args: Prisma.AdminOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminOrderCountArgs<ExtArgs>
            result: $Utils.Optional<AdminOrderCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    account?: AccountOmit
    profile?: ProfileOmit
    referral?: ReferralOmit
    address?: AddressOmit
    admin?: AdminOmit
    store?: StoreOmit
    stock?: StockOmit
    stockJournal?: StockJournalOmit
    product?: ProductOmit
    productImg?: ProductImgOmit
    productCategory?: ProductCategoryOmit
    voucherStore?: VoucherStoreOmit
    voucherOngkir?: VoucherOngkirOmit
    voucherProduct?: VoucherProductOmit
    discount?: DiscountOmit
    cart?: CartOmit
    cartItem?: CartItemOmit
    order?: OrderOmit
    orderItem?: OrderItemOmit
    paymentProof?: PaymentProofOmit
    orderCancel?: OrderCancelOmit
    adminOrder?: AdminOrderOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }


  /**
   * Count Type ProfileCountOutputType
   */

  export type ProfileCountOutputType = {
    cart: number
    orders: number
    voucher_store: number
    Address: number
  }

  export type ProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cart?: boolean | ProfileCountOutputTypeCountCartArgs
    orders?: boolean | ProfileCountOutputTypeCountOrdersArgs
    voucher_store?: boolean | ProfileCountOutputTypeCountVoucher_storeArgs
    Address?: boolean | ProfileCountOutputTypeCountAddressArgs
  }

  // Custom InputTypes
  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileCountOutputType
     */
    select?: ProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountCartArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartWhereInput
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountVoucher_storeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoucherStoreWhereInput
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountAddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
  }


  /**
   * Count Type ReferralCountOutputType
   */

  export type ReferralCountOutputType = {
    referred: number
  }

  export type ReferralCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referred?: boolean | ReferralCountOutputTypeCountReferredArgs
  }

  // Custom InputTypes
  /**
   * ReferralCountOutputType without action
   */
  export type ReferralCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferralCountOutputType
     */
    select?: ReferralCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReferralCountOutputType without action
   */
  export type ReferralCountOutputTypeCountReferredArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
  }


  /**
   * Count Type AddressCountOutputType
   */

  export type AddressCountOutputType = {
    orders: number
  }

  export type AddressCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | AddressCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressCountOutputType
     */
    select?: AddressCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * Count Type AdminCountOutputType
   */

  export type AdminCountOutputType = {
    admin_orders: number
    voucher_ongkir: number
    voucher_product: number
    voucher_store: number
  }

  export type AdminCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin_orders?: boolean | AdminCountOutputTypeCountAdmin_ordersArgs
    voucher_ongkir?: boolean | AdminCountOutputTypeCountVoucher_ongkirArgs
    voucher_product?: boolean | AdminCountOutputTypeCountVoucher_productArgs
    voucher_store?: boolean | AdminCountOutputTypeCountVoucher_storeArgs
  }

  // Custom InputTypes
  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCountOutputType
     */
    select?: AdminCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountAdmin_ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminOrderWhereInput
  }

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountVoucher_ongkirArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoucherOngkirWhereInput
  }

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountVoucher_productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoucherProductWhereInput
  }

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountVoucher_storeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoucherStoreWhereInput
  }


  /**
   * Count Type StoreCountOutputType
   */

  export type StoreCountOutputType = {
    orders: number
    admin: number
    stock: number
    stock_journal: number
    voucher_stores: number
  }

  export type StoreCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | StoreCountOutputTypeCountOrdersArgs
    admin?: boolean | StoreCountOutputTypeCountAdminArgs
    stock?: boolean | StoreCountOutputTypeCountStockArgs
    stock_journal?: boolean | StoreCountOutputTypeCountStock_journalArgs
    voucher_stores?: boolean | StoreCountOutputTypeCountVoucher_storesArgs
  }

  // Custom InputTypes
  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreCountOutputType
     */
    select?: StoreCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountAdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountStockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockWhereInput
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountStock_journalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockJournalWhereInput
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountVoucher_storesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoucherStoreWhereInput
  }


  /**
   * Count Type StockCountOutputType
   */

  export type StockCountOutputType = {
    stock_journal: number
  }

  export type StockCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stock_journal?: boolean | StockCountOutputTypeCountStock_journalArgs
  }

  // Custom InputTypes
  /**
   * StockCountOutputType without action
   */
  export type StockCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockCountOutputType
     */
    select?: StockCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StockCountOutputType without action
   */
  export type StockCountOutputTypeCountStock_journalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockJournalWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    cart_items: number
    order_items: number
    product_img: number
    voucher: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cart_items?: boolean | ProductCountOutputTypeCountCart_itemsArgs
    order_items?: boolean | ProductCountOutputTypeCountOrder_itemsArgs
    product_img?: boolean | ProductCountOutputTypeCountProduct_imgArgs
    voucher?: boolean | ProductCountOutputTypeCountVoucherArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountCart_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartItemWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountOrder_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountProduct_imgArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductImgWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountVoucherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoucherProductWhereInput
  }


  /**
   * Count Type ProductCategoryCountOutputType
   */

  export type ProductCategoryCountOutputType = {
    product: number
  }

  export type ProductCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductCategoryCountOutputTypeCountProductArgs
  }

  // Custom InputTypes
  /**
   * ProductCategoryCountOutputType without action
   */
  export type ProductCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategoryCountOutputType
     */
    select?: ProductCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCategoryCountOutputType without action
   */
  export type ProductCategoryCountOutputTypeCountProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Count Type VoucherStoreCountOutputType
   */

  export type VoucherStoreCountOutputType = {
    profiles: number
  }

  export type VoucherStoreCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles?: boolean | VoucherStoreCountOutputTypeCountProfilesArgs
  }

  // Custom InputTypes
  /**
   * VoucherStoreCountOutputType without action
   */
  export type VoucherStoreCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherStoreCountOutputType
     */
    select?: VoucherStoreCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VoucherStoreCountOutputType without action
   */
  export type VoucherStoreCountOutputTypeCountProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
  }


  /**
   * Count Type DiscountCountOutputType
   */

  export type DiscountCountOutputType = {
    orders: number
  }

  export type DiscountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | DiscountCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * DiscountCountOutputType without action
   */
  export type DiscountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscountCountOutputType
     */
    select?: DiscountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DiscountCountOutputType without action
   */
  export type DiscountCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * Count Type CartCountOutputType
   */

  export type CartCountOutputType = {
    cart_items: number
  }

  export type CartCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cart_items?: boolean | CartCountOutputTypeCountCart_itemsArgs
  }

  // Custom InputTypes
  /**
   * CartCountOutputType without action
   */
  export type CartCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartCountOutputType
     */
    select?: CartCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CartCountOutputType without action
   */
  export type CartCountOutputTypeCountCart_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartItemWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    admin_orders: number
    order_items: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin_orders?: boolean | OrderCountOutputTypeCountAdmin_ordersArgs
    order_items?: boolean | OrderCountOutputTypeCountOrder_itemsArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountAdmin_ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminOrderWhereInput
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountOrder_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    role: $Enums.Role | null
    updateAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    role: $Enums.Role | null
    updateAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    password: number
    role: number
    updateAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    role?: true
    updateAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    role?: true
    updateAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    role?: true
    updateAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    role: $Enums.Role
    updateAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    updateAt?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    profile?: boolean | User$profileArgs<ExtArgs>
    admin?: boolean | User$adminArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    updateAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "password" | "role" | "updateAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    profile?: boolean | User$profileArgs<ExtArgs>
    admin?: boolean | User$adminArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      profile: Prisma.$ProfilePayload<ExtArgs> | null
      admin: Prisma.$AdminPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string | null
      emailVerified: Date | null
      image: string | null
      password: string | null
      role: $Enums.Role
      updateAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    admin<T extends User$adminArgs<ExtArgs> = {}>(args?: Subset<T, User$adminArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly updateAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
  }

  /**
   * User.admin
   */
  export type User$adminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    where?: AdminWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    userId: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    userId: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    userId: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    userId?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    userId?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    userId?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    userId: string
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    userId?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state" | "userId", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
      userId: string
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    profile_id: number | null
    referred_id: number | null
  }

  export type ProfileSumAggregateOutputType = {
    profile_id: number | null
    referred_id: number | null
  }

  export type ProfileMinAggregateOutputType = {
    profile_id: number | null
    user_id: string | null
    phone: string | null
    pfp_url: string | null
    referred_id: number | null
  }

  export type ProfileMaxAggregateOutputType = {
    profile_id: number | null
    user_id: string | null
    phone: string | null
    pfp_url: string | null
    referred_id: number | null
  }

  export type ProfileCountAggregateOutputType = {
    profile_id: number
    user_id: number
    phone: number
    pfp_url: number
    referred_id: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    profile_id?: true
    referred_id?: true
  }

  export type ProfileSumAggregateInputType = {
    profile_id?: true
    referred_id?: true
  }

  export type ProfileMinAggregateInputType = {
    profile_id?: true
    user_id?: true
    phone?: true
    pfp_url?: true
    referred_id?: true
  }

  export type ProfileMaxAggregateInputType = {
    profile_id?: true
    user_id?: true
    phone?: true
    pfp_url?: true
    referred_id?: true
  }

  export type ProfileCountAggregateInputType = {
    profile_id?: true
    user_id?: true
    phone?: true
    pfp_url?: true
    referred_id?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    profile_id: number
    user_id: string
    phone: string | null
    pfp_url: string | null
    referred_id: number | null
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    profile_id?: boolean
    user_id?: boolean
    phone?: boolean
    pfp_url?: boolean
    referred_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    cart?: boolean | Profile$cartArgs<ExtArgs>
    orders?: boolean | Profile$ordersArgs<ExtArgs>
    voucher_store?: boolean | Profile$voucher_storeArgs<ExtArgs>
    Address?: boolean | Profile$AddressArgs<ExtArgs>
    referral?: boolean | Profile$referralArgs<ExtArgs>
    referred?: boolean | Profile$referredArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    profile_id?: boolean
    user_id?: boolean
    phone?: boolean
    pfp_url?: boolean
    referred_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    referred?: boolean | Profile$referredArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    profile_id?: boolean
    user_id?: boolean
    phone?: boolean
    pfp_url?: boolean
    referred_id?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    referred?: boolean | Profile$referredArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    profile_id?: boolean
    user_id?: boolean
    phone?: boolean
    pfp_url?: boolean
    referred_id?: boolean
  }

  export type ProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"profile_id" | "user_id" | "phone" | "pfp_url" | "referred_id", ExtArgs["result"]["profile"]>
  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    cart?: boolean | Profile$cartArgs<ExtArgs>
    orders?: boolean | Profile$ordersArgs<ExtArgs>
    voucher_store?: boolean | Profile$voucher_storeArgs<ExtArgs>
    Address?: boolean | Profile$AddressArgs<ExtArgs>
    referral?: boolean | Profile$referralArgs<ExtArgs>
    referred?: boolean | Profile$referredArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    referred?: boolean | Profile$referredArgs<ExtArgs>
  }
  export type ProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    referred?: boolean | Profile$referredArgs<ExtArgs>
  }

  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      cart: Prisma.$CartPayload<ExtArgs>[]
      orders: Prisma.$OrderPayload<ExtArgs>[]
      voucher_store: Prisma.$VoucherStorePayload<ExtArgs>[]
      Address: Prisma.$AddressPayload<ExtArgs>[]
      referral: Prisma.$ReferralPayload<ExtArgs> | null
      referred: Prisma.$ReferralPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      profile_id: number
      user_id: string
      phone: string | null
      pfp_url: string | null
      referred_id: number | null
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }

  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFindUniqueArgs>(args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Profile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFindFirstArgs>(args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `profile_id`
     * const profileWithProfile_idOnly = await prisma.profile.findMany({ select: { profile_id: true } })
     * 
     */
    findMany<T extends ProfileFindManyArgs>(args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
     */
    create<T extends ProfileCreateArgs>(args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Profiles.
     * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileCreateManyArgs>(args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profiles and returns the data saved in the database.
     * @param {ProfileCreateManyAndReturnArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profiles and only return the `profile_id`
     * const profileWithProfile_idOnly = await prisma.profile.createManyAndReturn({
     *   select: { profile_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
     */
    delete<T extends ProfileDeleteArgs>(args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileUpdateArgs>(args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileDeleteManyArgs>(args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileUpdateManyArgs>(args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles and returns the data updated in the database.
     * @param {ProfileUpdateManyAndReturnArgs} args - Arguments to update many Profiles.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Profiles and only return the `profile_id`
     * const profileWithProfile_idOnly = await prisma.profile.updateManyAndReturn({
     *   select: { profile_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
     */
    upsert<T extends ProfileUpsertArgs>(args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    cart<T extends Profile$cartArgs<ExtArgs> = {}>(args?: Subset<T, Profile$cartArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    orders<T extends Profile$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Profile$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    voucher_store<T extends Profile$voucher_storeArgs<ExtArgs> = {}>(args?: Subset<T, Profile$voucher_storeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoucherStorePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    Address<T extends Profile$AddressArgs<ExtArgs> = {}>(args?: Subset<T, Profile$AddressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    referral<T extends Profile$referralArgs<ExtArgs> = {}>(args?: Subset<T, Profile$referralArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    referred<T extends Profile$referredArgs<ExtArgs> = {}>(args?: Subset<T, Profile$referredArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profile model
   */ 
  interface ProfileFieldRefs {
    readonly profile_id: FieldRef<"Profile", 'Int'>
    readonly user_id: FieldRef<"Profile", 'String'>
    readonly phone: FieldRef<"Profile", 'String'>
    readonly pfp_url: FieldRef<"Profile", 'String'>
    readonly referred_id: FieldRef<"Profile", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }

  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profile createManyAndReturn
   */
  export type ProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
  }

  /**
   * Profile updateManyAndReturn
   */
  export type ProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }

  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to delete.
     */
    limit?: number
  }

  /**
   * Profile.cart
   */
  export type Profile$cartArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    where?: CartWhereInput
    orderBy?: CartOrderByWithRelationInput | CartOrderByWithRelationInput[]
    cursor?: CartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartScalarFieldEnum | CartScalarFieldEnum[]
  }

  /**
   * Profile.orders
   */
  export type Profile$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Profile.voucher_store
   */
  export type Profile$voucher_storeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherStore
     */
    select?: VoucherStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherStore
     */
    omit?: VoucherStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherStoreInclude<ExtArgs> | null
    where?: VoucherStoreWhereInput
    orderBy?: VoucherStoreOrderByWithRelationInput | VoucherStoreOrderByWithRelationInput[]
    cursor?: VoucherStoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoucherStoreScalarFieldEnum | VoucherStoreScalarFieldEnum[]
  }

  /**
   * Profile.Address
   */
  export type Profile$AddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    cursor?: AddressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Profile.referral
   */
  export type Profile$referralArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    where?: ReferralWhereInput
  }

  /**
   * Profile.referred
   */
  export type Profile$referredArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    where?: ReferralWhereInput
  }

  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
  }


  /**
   * Model Referral
   */

  export type AggregateReferral = {
    _count: ReferralCountAggregateOutputType | null
    _avg: ReferralAvgAggregateOutputType | null
    _sum: ReferralSumAggregateOutputType | null
    _min: ReferralMinAggregateOutputType | null
    _max: ReferralMaxAggregateOutputType | null
  }

  export type ReferralAvgAggregateOutputType = {
    referral_id: number | null
    profile_id: number | null
  }

  export type ReferralSumAggregateOutputType = {
    referral_id: number | null
    profile_id: number | null
  }

  export type ReferralMinAggregateOutputType = {
    referral_id: number | null
    referral_code: string | null
    profile_id: number | null
  }

  export type ReferralMaxAggregateOutputType = {
    referral_id: number | null
    referral_code: string | null
    profile_id: number | null
  }

  export type ReferralCountAggregateOutputType = {
    referral_id: number
    referral_code: number
    profile_id: number
    _all: number
  }


  export type ReferralAvgAggregateInputType = {
    referral_id?: true
    profile_id?: true
  }

  export type ReferralSumAggregateInputType = {
    referral_id?: true
    profile_id?: true
  }

  export type ReferralMinAggregateInputType = {
    referral_id?: true
    referral_code?: true
    profile_id?: true
  }

  export type ReferralMaxAggregateInputType = {
    referral_id?: true
    referral_code?: true
    profile_id?: true
  }

  export type ReferralCountAggregateInputType = {
    referral_id?: true
    referral_code?: true
    profile_id?: true
    _all?: true
  }

  export type ReferralAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Referral to aggregate.
     */
    where?: ReferralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrals to fetch.
     */
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReferralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Referrals
    **/
    _count?: true | ReferralCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReferralAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReferralSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferralMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferralMaxAggregateInputType
  }

  export type GetReferralAggregateType<T extends ReferralAggregateArgs> = {
        [P in keyof T & keyof AggregateReferral]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferral[P]>
      : GetScalarType<T[P], AggregateReferral[P]>
  }




  export type ReferralGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralWhereInput
    orderBy?: ReferralOrderByWithAggregationInput | ReferralOrderByWithAggregationInput[]
    by: ReferralScalarFieldEnum[] | ReferralScalarFieldEnum
    having?: ReferralScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferralCountAggregateInputType | true
    _avg?: ReferralAvgAggregateInputType
    _sum?: ReferralSumAggregateInputType
    _min?: ReferralMinAggregateInputType
    _max?: ReferralMaxAggregateInputType
  }

  export type ReferralGroupByOutputType = {
    referral_id: number
    referral_code: string
    profile_id: number | null
    _count: ReferralCountAggregateOutputType | null
    _avg: ReferralAvgAggregateOutputType | null
    _sum: ReferralSumAggregateOutputType | null
    _min: ReferralMinAggregateOutputType | null
    _max: ReferralMaxAggregateOutputType | null
  }

  type GetReferralGroupByPayload<T extends ReferralGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReferralGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferralGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferralGroupByOutputType[P]>
            : GetScalarType<T[P], ReferralGroupByOutputType[P]>
        }
      >
    >


  export type ReferralSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    referral_id?: boolean
    referral_code?: boolean
    profile_id?: boolean
    profile?: boolean | Referral$profileArgs<ExtArgs>
    referred?: boolean | Referral$referredArgs<ExtArgs>
    _count?: boolean | ReferralCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referral"]>

  export type ReferralSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    referral_id?: boolean
    referral_code?: boolean
    profile_id?: boolean
    profile?: boolean | Referral$profileArgs<ExtArgs>
  }, ExtArgs["result"]["referral"]>

  export type ReferralSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    referral_id?: boolean
    referral_code?: boolean
    profile_id?: boolean
    profile?: boolean | Referral$profileArgs<ExtArgs>
  }, ExtArgs["result"]["referral"]>

  export type ReferralSelectScalar = {
    referral_id?: boolean
    referral_code?: boolean
    profile_id?: boolean
  }

  export type ReferralOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"referral_id" | "referral_code" | "profile_id", ExtArgs["result"]["referral"]>
  export type ReferralInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | Referral$profileArgs<ExtArgs>
    referred?: boolean | Referral$referredArgs<ExtArgs>
    _count?: boolean | ReferralCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReferralIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | Referral$profileArgs<ExtArgs>
  }
  export type ReferralIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | Referral$profileArgs<ExtArgs>
  }

  export type $ReferralPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Referral"
    objects: {
      profile: Prisma.$ProfilePayload<ExtArgs> | null
      referred: Prisma.$ProfilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      referral_id: number
      referral_code: string
      profile_id: number | null
    }, ExtArgs["result"]["referral"]>
    composites: {}
  }

  type ReferralGetPayload<S extends boolean | null | undefined | ReferralDefaultArgs> = $Result.GetResult<Prisma.$ReferralPayload, S>

  type ReferralCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReferralFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReferralCountAggregateInputType | true
    }

  export interface ReferralDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Referral'], meta: { name: 'Referral' } }
    /**
     * Find zero or one Referral that matches the filter.
     * @param {ReferralFindUniqueArgs} args - Arguments to find a Referral
     * @example
     * // Get one Referral
     * const referral = await prisma.referral.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReferralFindUniqueArgs>(args: SelectSubset<T, ReferralFindUniqueArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Referral that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReferralFindUniqueOrThrowArgs} args - Arguments to find a Referral
     * @example
     * // Get one Referral
     * const referral = await prisma.referral.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReferralFindUniqueOrThrowArgs>(args: SelectSubset<T, ReferralFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Referral that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralFindFirstArgs} args - Arguments to find a Referral
     * @example
     * // Get one Referral
     * const referral = await prisma.referral.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReferralFindFirstArgs>(args?: SelectSubset<T, ReferralFindFirstArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Referral that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralFindFirstOrThrowArgs} args - Arguments to find a Referral
     * @example
     * // Get one Referral
     * const referral = await prisma.referral.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReferralFindFirstOrThrowArgs>(args?: SelectSubset<T, ReferralFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Referrals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Referrals
     * const referrals = await prisma.referral.findMany()
     * 
     * // Get first 10 Referrals
     * const referrals = await prisma.referral.findMany({ take: 10 })
     * 
     * // Only select the `referral_id`
     * const referralWithReferral_idOnly = await prisma.referral.findMany({ select: { referral_id: true } })
     * 
     */
    findMany<T extends ReferralFindManyArgs>(args?: SelectSubset<T, ReferralFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Referral.
     * @param {ReferralCreateArgs} args - Arguments to create a Referral.
     * @example
     * // Create one Referral
     * const Referral = await prisma.referral.create({
     *   data: {
     *     // ... data to create a Referral
     *   }
     * })
     * 
     */
    create<T extends ReferralCreateArgs>(args: SelectSubset<T, ReferralCreateArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Referrals.
     * @param {ReferralCreateManyArgs} args - Arguments to create many Referrals.
     * @example
     * // Create many Referrals
     * const referral = await prisma.referral.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReferralCreateManyArgs>(args?: SelectSubset<T, ReferralCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Referrals and returns the data saved in the database.
     * @param {ReferralCreateManyAndReturnArgs} args - Arguments to create many Referrals.
     * @example
     * // Create many Referrals
     * const referral = await prisma.referral.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Referrals and only return the `referral_id`
     * const referralWithReferral_idOnly = await prisma.referral.createManyAndReturn({
     *   select: { referral_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReferralCreateManyAndReturnArgs>(args?: SelectSubset<T, ReferralCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Referral.
     * @param {ReferralDeleteArgs} args - Arguments to delete one Referral.
     * @example
     * // Delete one Referral
     * const Referral = await prisma.referral.delete({
     *   where: {
     *     // ... filter to delete one Referral
     *   }
     * })
     * 
     */
    delete<T extends ReferralDeleteArgs>(args: SelectSubset<T, ReferralDeleteArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Referral.
     * @param {ReferralUpdateArgs} args - Arguments to update one Referral.
     * @example
     * // Update one Referral
     * const referral = await prisma.referral.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReferralUpdateArgs>(args: SelectSubset<T, ReferralUpdateArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Referrals.
     * @param {ReferralDeleteManyArgs} args - Arguments to filter Referrals to delete.
     * @example
     * // Delete a few Referrals
     * const { count } = await prisma.referral.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReferralDeleteManyArgs>(args?: SelectSubset<T, ReferralDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Referrals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Referrals
     * const referral = await prisma.referral.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReferralUpdateManyArgs>(args: SelectSubset<T, ReferralUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Referrals and returns the data updated in the database.
     * @param {ReferralUpdateManyAndReturnArgs} args - Arguments to update many Referrals.
     * @example
     * // Update many Referrals
     * const referral = await prisma.referral.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Referrals and only return the `referral_id`
     * const referralWithReferral_idOnly = await prisma.referral.updateManyAndReturn({
     *   select: { referral_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReferralUpdateManyAndReturnArgs>(args: SelectSubset<T, ReferralUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Referral.
     * @param {ReferralUpsertArgs} args - Arguments to update or create a Referral.
     * @example
     * // Update or create a Referral
     * const referral = await prisma.referral.upsert({
     *   create: {
     *     // ... data to create a Referral
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Referral we want to update
     *   }
     * })
     */
    upsert<T extends ReferralUpsertArgs>(args: SelectSubset<T, ReferralUpsertArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Referrals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCountArgs} args - Arguments to filter Referrals to count.
     * @example
     * // Count the number of Referrals
     * const count = await prisma.referral.count({
     *   where: {
     *     // ... the filter for the Referrals we want to count
     *   }
     * })
    **/
    count<T extends ReferralCountArgs>(
      args?: Subset<T, ReferralCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferralCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Referral.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferralAggregateArgs>(args: Subset<T, ReferralAggregateArgs>): Prisma.PrismaPromise<GetReferralAggregateType<T>>

    /**
     * Group by Referral.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferralGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferralGroupByArgs['orderBy'] }
        : { orderBy?: ReferralGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferralGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferralGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Referral model
   */
  readonly fields: ReferralFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Referral.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReferralClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends Referral$profileArgs<ExtArgs> = {}>(args?: Subset<T, Referral$profileArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    referred<T extends Referral$referredArgs<ExtArgs> = {}>(args?: Subset<T, Referral$referredArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Referral model
   */ 
  interface ReferralFieldRefs {
    readonly referral_id: FieldRef<"Referral", 'Int'>
    readonly referral_code: FieldRef<"Referral", 'String'>
    readonly profile_id: FieldRef<"Referral", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Referral findUnique
   */
  export type ReferralFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * Filter, which Referral to fetch.
     */
    where: ReferralWhereUniqueInput
  }

  /**
   * Referral findUniqueOrThrow
   */
  export type ReferralFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * Filter, which Referral to fetch.
     */
    where: ReferralWhereUniqueInput
  }

  /**
   * Referral findFirst
   */
  export type ReferralFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * Filter, which Referral to fetch.
     */
    where?: ReferralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrals to fetch.
     */
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referrals.
     */
    cursor?: ReferralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referrals.
     */
    distinct?: ReferralScalarFieldEnum | ReferralScalarFieldEnum[]
  }

  /**
   * Referral findFirstOrThrow
   */
  export type ReferralFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * Filter, which Referral to fetch.
     */
    where?: ReferralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrals to fetch.
     */
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referrals.
     */
    cursor?: ReferralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referrals.
     */
    distinct?: ReferralScalarFieldEnum | ReferralScalarFieldEnum[]
  }

  /**
   * Referral findMany
   */
  export type ReferralFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * Filter, which Referrals to fetch.
     */
    where?: ReferralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrals to fetch.
     */
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Referrals.
     */
    cursor?: ReferralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrals.
     */
    skip?: number
    distinct?: ReferralScalarFieldEnum | ReferralScalarFieldEnum[]
  }

  /**
   * Referral create
   */
  export type ReferralCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * The data needed to create a Referral.
     */
    data: XOR<ReferralCreateInput, ReferralUncheckedCreateInput>
  }

  /**
   * Referral createMany
   */
  export type ReferralCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Referrals.
     */
    data: ReferralCreateManyInput | ReferralCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Referral createManyAndReturn
   */
  export type ReferralCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * The data used to create many Referrals.
     */
    data: ReferralCreateManyInput | ReferralCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Referral update
   */
  export type ReferralUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * The data needed to update a Referral.
     */
    data: XOR<ReferralUpdateInput, ReferralUncheckedUpdateInput>
    /**
     * Choose, which Referral to update.
     */
    where: ReferralWhereUniqueInput
  }

  /**
   * Referral updateMany
   */
  export type ReferralUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Referrals.
     */
    data: XOR<ReferralUpdateManyMutationInput, ReferralUncheckedUpdateManyInput>
    /**
     * Filter which Referrals to update
     */
    where?: ReferralWhereInput
    /**
     * Limit how many Referrals to update.
     */
    limit?: number
  }

  /**
   * Referral updateManyAndReturn
   */
  export type ReferralUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * The data used to update Referrals.
     */
    data: XOR<ReferralUpdateManyMutationInput, ReferralUncheckedUpdateManyInput>
    /**
     * Filter which Referrals to update
     */
    where?: ReferralWhereInput
    /**
     * Limit how many Referrals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Referral upsert
   */
  export type ReferralUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * The filter to search for the Referral to update in case it exists.
     */
    where: ReferralWhereUniqueInput
    /**
     * In case the Referral found by the `where` argument doesn't exist, create a new Referral with this data.
     */
    create: XOR<ReferralCreateInput, ReferralUncheckedCreateInput>
    /**
     * In case the Referral was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReferralUpdateInput, ReferralUncheckedUpdateInput>
  }

  /**
   * Referral delete
   */
  export type ReferralDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * Filter which Referral to delete.
     */
    where: ReferralWhereUniqueInput
  }

  /**
   * Referral deleteMany
   */
  export type ReferralDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Referrals to delete
     */
    where?: ReferralWhereInput
    /**
     * Limit how many Referrals to delete.
     */
    limit?: number
  }

  /**
   * Referral.profile
   */
  export type Referral$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
  }

  /**
   * Referral.referred
   */
  export type Referral$referredArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Referral without action
   */
  export type ReferralDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
  }


  /**
   * Model Address
   */

  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressAvgAggregateOutputType = {
    address_id: number | null
    profile_id: number | null
  }

  export type AddressSumAggregateOutputType = {
    address_id: number | null
    profile_id: number | null
  }

  export type AddressMinAggregateOutputType = {
    address_id: number | null
    street: string | null
    city: string | null
    country: string | null
    lat: string | null
    lng: string | null
    post_code: string | null
    address_name: string | null
    address_contact: string | null
    profile_id: number | null
    deleted_at: Date | null
  }

  export type AddressMaxAggregateOutputType = {
    address_id: number | null
    street: string | null
    city: string | null
    country: string | null
    lat: string | null
    lng: string | null
    post_code: string | null
    address_name: string | null
    address_contact: string | null
    profile_id: number | null
    deleted_at: Date | null
  }

  export type AddressCountAggregateOutputType = {
    address_id: number
    street: number
    city: number
    country: number
    lat: number
    lng: number
    post_code: number
    address_name: number
    address_contact: number
    profile_id: number
    deleted_at: number
    _all: number
  }


  export type AddressAvgAggregateInputType = {
    address_id?: true
    profile_id?: true
  }

  export type AddressSumAggregateInputType = {
    address_id?: true
    profile_id?: true
  }

  export type AddressMinAggregateInputType = {
    address_id?: true
    street?: true
    city?: true
    country?: true
    lat?: true
    lng?: true
    post_code?: true
    address_name?: true
    address_contact?: true
    profile_id?: true
    deleted_at?: true
  }

  export type AddressMaxAggregateInputType = {
    address_id?: true
    street?: true
    city?: true
    country?: true
    lat?: true
    lng?: true
    post_code?: true
    address_name?: true
    address_contact?: true
    profile_id?: true
    deleted_at?: true
  }

  export type AddressCountAggregateInputType = {
    address_id?: true
    street?: true
    city?: true
    country?: true
    lat?: true
    lng?: true
    post_code?: true
    address_name?: true
    address_contact?: true
    profile_id?: true
    deleted_at?: true
    _all?: true
  }

  export type AddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Address to aggregate.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithAggregationInput | AddressOrderByWithAggregationInput[]
    by: AddressScalarFieldEnum[] | AddressScalarFieldEnum
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _avg?: AddressAvgAggregateInputType
    _sum?: AddressSumAggregateInputType
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }

  export type AddressGroupByOutputType = {
    address_id: number
    street: string
    city: string
    country: string
    lat: string
    lng: string
    post_code: string
    address_name: string
    address_contact: string
    profile_id: number
    deleted_at: Date | null
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    address_id?: boolean
    street?: boolean
    city?: boolean
    country?: boolean
    lat?: boolean
    lng?: boolean
    post_code?: boolean
    address_name?: boolean
    address_contact?: boolean
    profile_id?: boolean
    deleted_at?: boolean
    orders?: boolean | Address$ordersArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    address_id?: boolean
    street?: boolean
    city?: boolean
    country?: boolean
    lat?: boolean
    lng?: boolean
    post_code?: boolean
    address_name?: boolean
    address_contact?: boolean
    profile_id?: boolean
    deleted_at?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    address_id?: boolean
    street?: boolean
    city?: boolean
    country?: boolean
    lat?: boolean
    lng?: boolean
    post_code?: boolean
    address_name?: boolean
    address_contact?: boolean
    profile_id?: boolean
    deleted_at?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectScalar = {
    address_id?: boolean
    street?: boolean
    city?: boolean
    country?: boolean
    lat?: boolean
    lng?: boolean
    post_code?: boolean
    address_name?: boolean
    address_contact?: boolean
    profile_id?: boolean
    deleted_at?: boolean
  }

  export type AddressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"address_id" | "street" | "city" | "country" | "lat" | "lng" | "post_code" | "address_name" | "address_contact" | "profile_id" | "deleted_at", ExtArgs["result"]["address"]>
  export type AddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | Address$ordersArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AddressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }
  export type AddressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }

  export type $AddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Address"
    objects: {
      orders: Prisma.$OrderPayload<ExtArgs>[]
      profile: Prisma.$ProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      address_id: number
      street: string
      city: string
      country: string
      lat: string
      lng: string
      post_code: string
      address_name: string
      address_contact: string
      profile_id: number
      deleted_at: Date | null
    }, ExtArgs["result"]["address"]>
    composites: {}
  }

  type AddressGetPayload<S extends boolean | null | undefined | AddressDefaultArgs> = $Result.GetResult<Prisma.$AddressPayload, S>

  type AddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AddressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AddressCountAggregateInputType | true
    }

  export interface AddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Address'], meta: { name: 'Address' } }
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AddressFindUniqueArgs>(args: SelectSubset<T, AddressFindUniqueArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Address that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs>(args: SelectSubset<T, AddressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AddressFindFirstArgs>(args?: SelectSubset<T, AddressFindFirstArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AddressFindFirstOrThrowArgs>(args?: SelectSubset<T, AddressFindFirstOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `address_id`
     * const addressWithAddress_idOnly = await prisma.address.findMany({ select: { address_id: true } })
     * 
     */
    findMany<T extends AddressFindManyArgs>(args?: SelectSubset<T, AddressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
     */
    create<T extends AddressCreateArgs>(args: SelectSubset<T, AddressCreateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Addresses.
     * @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AddressCreateManyArgs>(args?: SelectSubset<T, AddressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Addresses and returns the data saved in the database.
     * @param {AddressCreateManyAndReturnArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Addresses and only return the `address_id`
     * const addressWithAddress_idOnly = await prisma.address.createManyAndReturn({
     *   select: { address_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AddressCreateManyAndReturnArgs>(args?: SelectSubset<T, AddressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
     */
    delete<T extends AddressDeleteArgs>(args: SelectSubset<T, AddressDeleteArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AddressUpdateArgs>(args: SelectSubset<T, AddressUpdateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AddressDeleteManyArgs>(args?: SelectSubset<T, AddressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AddressUpdateManyArgs>(args: SelectSubset<T, AddressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses and returns the data updated in the database.
     * @param {AddressUpdateManyAndReturnArgs} args - Arguments to update many Addresses.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Addresses and only return the `address_id`
     * const addressWithAddress_idOnly = await prisma.address.updateManyAndReturn({
     *   select: { address_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AddressUpdateManyAndReturnArgs>(args: SelectSubset<T, AddressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
     */
    upsert<T extends AddressUpsertArgs>(args: SelectSubset<T, AddressUpsertArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Address model
   */
  readonly fields: AddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends Address$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Address$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    profile<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Address model
   */ 
  interface AddressFieldRefs {
    readonly address_id: FieldRef<"Address", 'Int'>
    readonly street: FieldRef<"Address", 'String'>
    readonly city: FieldRef<"Address", 'String'>
    readonly country: FieldRef<"Address", 'String'>
    readonly lat: FieldRef<"Address", 'String'>
    readonly lng: FieldRef<"Address", 'String'>
    readonly post_code: FieldRef<"Address", 'String'>
    readonly address_name: FieldRef<"Address", 'String'>
    readonly address_contact: FieldRef<"Address", 'String'>
    readonly profile_id: FieldRef<"Address", 'Int'>
    readonly deleted_at: FieldRef<"Address", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findUniqueOrThrow
   */
  export type AddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findFirstOrThrow
   */
  export type AddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findMany
   */
  export type AddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Addresses to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address create
   */
  export type AddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to create a Address.
     */
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }

  /**
   * Address createMany
   */
  export type AddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Address createManyAndReturn
   */
  export type AddressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Address update
   */
  export type AddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to update a Address.
     */
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
    /**
     * Limit how many Addresses to update.
     */
    limit?: number
  }

  /**
   * Address updateManyAndReturn
   */
  export type AddressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
    /**
     * Limit how many Addresses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Address upsert
   */
  export type AddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The filter to search for the Address to update in case it exists.
     */
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     */
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }

  /**
   * Address delete
   */
  export type AddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter which Address to delete.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Addresses to delete
     */
    where?: AddressWhereInput
    /**
     * Limit how many Addresses to delete.
     */
    limit?: number
  }

  /**
   * Address.orders
   */
  export type Address$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Address without action
   */
  export type AddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    admin_id: number | null
    store_id: number | null
  }

  export type AdminSumAggregateOutputType = {
    admin_id: number | null
    store_id: number | null
  }

  export type AdminMinAggregateOutputType = {
    admin_id: number | null
    user_id: string | null
    store_id: number | null
    phone: string | null
    position: string | null
    deleted_at: Date | null
  }

  export type AdminMaxAggregateOutputType = {
    admin_id: number | null
    user_id: string | null
    store_id: number | null
    phone: string | null
    position: string | null
    deleted_at: Date | null
  }

  export type AdminCountAggregateOutputType = {
    admin_id: number
    user_id: number
    store_id: number
    phone: number
    position: number
    deleted_at: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    admin_id?: true
    store_id?: true
  }

  export type AdminSumAggregateInputType = {
    admin_id?: true
    store_id?: true
  }

  export type AdminMinAggregateInputType = {
    admin_id?: true
    user_id?: true
    store_id?: true
    phone?: true
    position?: true
    deleted_at?: true
  }

  export type AdminMaxAggregateInputType = {
    admin_id?: true
    user_id?: true
    store_id?: true
    phone?: true
    position?: true
    deleted_at?: true
  }

  export type AdminCountAggregateInputType = {
    admin_id?: true
    user_id?: true
    store_id?: true
    phone?: true
    position?: true
    deleted_at?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    admin_id: number
    user_id: string
    store_id: number
    phone: string
    position: string
    deleted_at: Date | null
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    admin_id?: boolean
    user_id?: boolean
    store_id?: boolean
    phone?: boolean
    position?: boolean
    deleted_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    admin_orders?: boolean | Admin$admin_ordersArgs<ExtArgs>
    voucher_ongkir?: boolean | Admin$voucher_ongkirArgs<ExtArgs>
    voucher_product?: boolean | Admin$voucher_productArgs<ExtArgs>
    voucher_store?: boolean | Admin$voucher_storeArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    admin_id?: boolean
    user_id?: boolean
    store_id?: boolean
    phone?: boolean
    position?: boolean
    deleted_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    admin_id?: boolean
    user_id?: boolean
    store_id?: boolean
    phone?: boolean
    position?: boolean
    deleted_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    admin_id?: boolean
    user_id?: boolean
    store_id?: boolean
    phone?: boolean
    position?: boolean
    deleted_at?: boolean
  }

  export type AdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"admin_id" | "user_id" | "store_id" | "phone" | "position" | "deleted_at", ExtArgs["result"]["admin"]>
  export type AdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    admin_orders?: boolean | Admin$admin_ordersArgs<ExtArgs>
    voucher_ongkir?: boolean | Admin$voucher_ongkirArgs<ExtArgs>
    voucher_product?: boolean | Admin$voucher_productArgs<ExtArgs>
    voucher_store?: boolean | Admin$voucher_storeArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AdminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }
  export type AdminIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      store: Prisma.$StorePayload<ExtArgs>
      admin_orders: Prisma.$AdminOrderPayload<ExtArgs>[]
      voucher_ongkir: Prisma.$VoucherOngkirPayload<ExtArgs>[]
      voucher_product: Prisma.$VoucherProductPayload<ExtArgs>[]
      voucher_store: Prisma.$VoucherStorePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      admin_id: number
      user_id: string
      store_id: number
      phone: string
      position: string
      deleted_at: Date | null
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `admin_id`
     * const adminWithAdmin_idOnly = await prisma.admin.findMany({ select: { admin_id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Admins and returns the data saved in the database.
     * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Admins and only return the `admin_id`
     * const adminWithAdmin_idOnly = await prisma.admin.createManyAndReturn({
     *   select: { admin_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins and returns the data updated in the database.
     * @param {AdminUpdateManyAndReturnArgs} args - Arguments to update many Admins.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Admins and only return the `admin_id`
     * const adminWithAdmin_idOnly = await prisma.admin.updateManyAndReturn({
     *   select: { admin_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    store<T extends StoreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoreDefaultArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    admin_orders<T extends Admin$admin_ordersArgs<ExtArgs> = {}>(args?: Subset<T, Admin$admin_ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminOrderPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    voucher_ongkir<T extends Admin$voucher_ongkirArgs<ExtArgs> = {}>(args?: Subset<T, Admin$voucher_ongkirArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoucherOngkirPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    voucher_product<T extends Admin$voucher_productArgs<ExtArgs> = {}>(args?: Subset<T, Admin$voucher_productArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoucherProductPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    voucher_store<T extends Admin$voucher_storeArgs<ExtArgs> = {}>(args?: Subset<T, Admin$voucher_storeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoucherStorePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly admin_id: FieldRef<"Admin", 'Int'>
    readonly user_id: FieldRef<"Admin", 'String'>
    readonly store_id: FieldRef<"Admin", 'Int'>
    readonly phone: FieldRef<"Admin", 'String'>
    readonly position: FieldRef<"Admin", 'String'>
    readonly deleted_at: FieldRef<"Admin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin createManyAndReturn
   */
  export type AdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin updateManyAndReturn
   */
  export type AdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to delete.
     */
    limit?: number
  }

  /**
   * Admin.admin_orders
   */
  export type Admin$admin_ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminOrder
     */
    select?: AdminOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminOrder
     */
    omit?: AdminOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminOrderInclude<ExtArgs> | null
    where?: AdminOrderWhereInput
    orderBy?: AdminOrderOrderByWithRelationInput | AdminOrderOrderByWithRelationInput[]
    cursor?: AdminOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminOrderScalarFieldEnum | AdminOrderScalarFieldEnum[]
  }

  /**
   * Admin.voucher_ongkir
   */
  export type Admin$voucher_ongkirArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherOngkir
     */
    select?: VoucherOngkirSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherOngkir
     */
    omit?: VoucherOngkirOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherOngkirInclude<ExtArgs> | null
    where?: VoucherOngkirWhereInput
    orderBy?: VoucherOngkirOrderByWithRelationInput | VoucherOngkirOrderByWithRelationInput[]
    cursor?: VoucherOngkirWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoucherOngkirScalarFieldEnum | VoucherOngkirScalarFieldEnum[]
  }

  /**
   * Admin.voucher_product
   */
  export type Admin$voucher_productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherProduct
     */
    select?: VoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherProduct
     */
    omit?: VoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherProductInclude<ExtArgs> | null
    where?: VoucherProductWhereInput
    orderBy?: VoucherProductOrderByWithRelationInput | VoucherProductOrderByWithRelationInput[]
    cursor?: VoucherProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoucherProductScalarFieldEnum | VoucherProductScalarFieldEnum[]
  }

  /**
   * Admin.voucher_store
   */
  export type Admin$voucher_storeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherStore
     */
    select?: VoucherStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherStore
     */
    omit?: VoucherStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherStoreInclude<ExtArgs> | null
    where?: VoucherStoreWhereInput
    orderBy?: VoucherStoreOrderByWithRelationInput | VoucherStoreOrderByWithRelationInput[]
    cursor?: VoucherStoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoucherStoreScalarFieldEnum | VoucherStoreScalarFieldEnum[]
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
  }


  /**
   * Model Store
   */

  export type AggregateStore = {
    _count: StoreCountAggregateOutputType | null
    _avg: StoreAvgAggregateOutputType | null
    _sum: StoreSumAggregateOutputType | null
    _min: StoreMinAggregateOutputType | null
    _max: StoreMaxAggregateOutputType | null
  }

  export type StoreAvgAggregateOutputType = {
    store_id: number | null
  }

  export type StoreSumAggregateOutputType = {
    store_id: number | null
  }

  export type StoreMinAggregateOutputType = {
    store_id: number | null
    store_name: string | null
    store_address: string | null
    country: string | null
    city: string | null
    lat: string | null
    lng: string | null
    isActive: boolean | null
  }

  export type StoreMaxAggregateOutputType = {
    store_id: number | null
    store_name: string | null
    store_address: string | null
    country: string | null
    city: string | null
    lat: string | null
    lng: string | null
    isActive: boolean | null
  }

  export type StoreCountAggregateOutputType = {
    store_id: number
    store_name: number
    store_address: number
    country: number
    city: number
    lat: number
    lng: number
    isActive: number
    _all: number
  }


  export type StoreAvgAggregateInputType = {
    store_id?: true
  }

  export type StoreSumAggregateInputType = {
    store_id?: true
  }

  export type StoreMinAggregateInputType = {
    store_id?: true
    store_name?: true
    store_address?: true
    country?: true
    city?: true
    lat?: true
    lng?: true
    isActive?: true
  }

  export type StoreMaxAggregateInputType = {
    store_id?: true
    store_name?: true
    store_address?: true
    country?: true
    city?: true
    lat?: true
    lng?: true
    isActive?: true
  }

  export type StoreCountAggregateInputType = {
    store_id?: true
    store_name?: true
    store_address?: true
    country?: true
    city?: true
    lat?: true
    lng?: true
    isActive?: true
    _all?: true
  }

  export type StoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Store to aggregate.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stores
    **/
    _count?: true | StoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoreMaxAggregateInputType
  }

  export type GetStoreAggregateType<T extends StoreAggregateArgs> = {
        [P in keyof T & keyof AggregateStore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStore[P]>
      : GetScalarType<T[P], AggregateStore[P]>
  }




  export type StoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoreWhereInput
    orderBy?: StoreOrderByWithAggregationInput | StoreOrderByWithAggregationInput[]
    by: StoreScalarFieldEnum[] | StoreScalarFieldEnum
    having?: StoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoreCountAggregateInputType | true
    _avg?: StoreAvgAggregateInputType
    _sum?: StoreSumAggregateInputType
    _min?: StoreMinAggregateInputType
    _max?: StoreMaxAggregateInputType
  }

  export type StoreGroupByOutputType = {
    store_id: number
    store_name: string
    store_address: string
    country: string
    city: string
    lat: string
    lng: string
    isActive: boolean
    _count: StoreCountAggregateOutputType | null
    _avg: StoreAvgAggregateOutputType | null
    _sum: StoreSumAggregateOutputType | null
    _min: StoreMinAggregateOutputType | null
    _max: StoreMaxAggregateOutputType | null
  }

  type GetStoreGroupByPayload<T extends StoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoreGroupByOutputType[P]>
            : GetScalarType<T[P], StoreGroupByOutputType[P]>
        }
      >
    >


  export type StoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    store_id?: boolean
    store_name?: boolean
    store_address?: boolean
    country?: boolean
    city?: boolean
    lat?: boolean
    lng?: boolean
    isActive?: boolean
    orders?: boolean | Store$ordersArgs<ExtArgs>
    admin?: boolean | Store$adminArgs<ExtArgs>
    stock?: boolean | Store$stockArgs<ExtArgs>
    stock_journal?: boolean | Store$stock_journalArgs<ExtArgs>
    voucher_ongkir?: boolean | Store$voucher_ongkirArgs<ExtArgs>
    voucher_stores?: boolean | Store$voucher_storesArgs<ExtArgs>
    _count?: boolean | StoreCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["store"]>

  export type StoreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    store_id?: boolean
    store_name?: boolean
    store_address?: boolean
    country?: boolean
    city?: boolean
    lat?: boolean
    lng?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["store"]>

  export type StoreSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    store_id?: boolean
    store_name?: boolean
    store_address?: boolean
    country?: boolean
    city?: boolean
    lat?: boolean
    lng?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["store"]>

  export type StoreSelectScalar = {
    store_id?: boolean
    store_name?: boolean
    store_address?: boolean
    country?: boolean
    city?: boolean
    lat?: boolean
    lng?: boolean
    isActive?: boolean
  }

  export type StoreOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"store_id" | "store_name" | "store_address" | "country" | "city" | "lat" | "lng" | "isActive", ExtArgs["result"]["store"]>
  export type StoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | Store$ordersArgs<ExtArgs>
    admin?: boolean | Store$adminArgs<ExtArgs>
    stock?: boolean | Store$stockArgs<ExtArgs>
    stock_journal?: boolean | Store$stock_journalArgs<ExtArgs>
    voucher_ongkir?: boolean | Store$voucher_ongkirArgs<ExtArgs>
    voucher_stores?: boolean | Store$voucher_storesArgs<ExtArgs>
    _count?: boolean | StoreCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StoreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StoreIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Store"
    objects: {
      orders: Prisma.$OrderPayload<ExtArgs>[]
      admin: Prisma.$AdminPayload<ExtArgs>[]
      stock: Prisma.$StockPayload<ExtArgs>[]
      stock_journal: Prisma.$StockJournalPayload<ExtArgs>[]
      voucher_ongkir: Prisma.$VoucherOngkirPayload<ExtArgs> | null
      voucher_stores: Prisma.$VoucherStorePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      store_id: number
      store_name: string
      store_address: string
      country: string
      city: string
      lat: string
      lng: string
      isActive: boolean
    }, ExtArgs["result"]["store"]>
    composites: {}
  }

  type StoreGetPayload<S extends boolean | null | undefined | StoreDefaultArgs> = $Result.GetResult<Prisma.$StorePayload, S>

  type StoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StoreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StoreCountAggregateInputType | true
    }

  export interface StoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Store'], meta: { name: 'Store' } }
    /**
     * Find zero or one Store that matches the filter.
     * @param {StoreFindUniqueArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StoreFindUniqueArgs>(args: SelectSubset<T, StoreFindUniqueArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Store that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StoreFindUniqueOrThrowArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StoreFindUniqueOrThrowArgs>(args: SelectSubset<T, StoreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Store that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreFindFirstArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StoreFindFirstArgs>(args?: SelectSubset<T, StoreFindFirstArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Store that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreFindFirstOrThrowArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StoreFindFirstOrThrowArgs>(args?: SelectSubset<T, StoreFindFirstOrThrowArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Stores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stores
     * const stores = await prisma.store.findMany()
     * 
     * // Get first 10 Stores
     * const stores = await prisma.store.findMany({ take: 10 })
     * 
     * // Only select the `store_id`
     * const storeWithStore_idOnly = await prisma.store.findMany({ select: { store_id: true } })
     * 
     */
    findMany<T extends StoreFindManyArgs>(args?: SelectSubset<T, StoreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Store.
     * @param {StoreCreateArgs} args - Arguments to create a Store.
     * @example
     * // Create one Store
     * const Store = await prisma.store.create({
     *   data: {
     *     // ... data to create a Store
     *   }
     * })
     * 
     */
    create<T extends StoreCreateArgs>(args: SelectSubset<T, StoreCreateArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Stores.
     * @param {StoreCreateManyArgs} args - Arguments to create many Stores.
     * @example
     * // Create many Stores
     * const store = await prisma.store.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StoreCreateManyArgs>(args?: SelectSubset<T, StoreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stores and returns the data saved in the database.
     * @param {StoreCreateManyAndReturnArgs} args - Arguments to create many Stores.
     * @example
     * // Create many Stores
     * const store = await prisma.store.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stores and only return the `store_id`
     * const storeWithStore_idOnly = await prisma.store.createManyAndReturn({
     *   select: { store_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StoreCreateManyAndReturnArgs>(args?: SelectSubset<T, StoreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Store.
     * @param {StoreDeleteArgs} args - Arguments to delete one Store.
     * @example
     * // Delete one Store
     * const Store = await prisma.store.delete({
     *   where: {
     *     // ... filter to delete one Store
     *   }
     * })
     * 
     */
    delete<T extends StoreDeleteArgs>(args: SelectSubset<T, StoreDeleteArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Store.
     * @param {StoreUpdateArgs} args - Arguments to update one Store.
     * @example
     * // Update one Store
     * const store = await prisma.store.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StoreUpdateArgs>(args: SelectSubset<T, StoreUpdateArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Stores.
     * @param {StoreDeleteManyArgs} args - Arguments to filter Stores to delete.
     * @example
     * // Delete a few Stores
     * const { count } = await prisma.store.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StoreDeleteManyArgs>(args?: SelectSubset<T, StoreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stores
     * const store = await prisma.store.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StoreUpdateManyArgs>(args: SelectSubset<T, StoreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stores and returns the data updated in the database.
     * @param {StoreUpdateManyAndReturnArgs} args - Arguments to update many Stores.
     * @example
     * // Update many Stores
     * const store = await prisma.store.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stores and only return the `store_id`
     * const storeWithStore_idOnly = await prisma.store.updateManyAndReturn({
     *   select: { store_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StoreUpdateManyAndReturnArgs>(args: SelectSubset<T, StoreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Store.
     * @param {StoreUpsertArgs} args - Arguments to update or create a Store.
     * @example
     * // Update or create a Store
     * const store = await prisma.store.upsert({
     *   create: {
     *     // ... data to create a Store
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Store we want to update
     *   }
     * })
     */
    upsert<T extends StoreUpsertArgs>(args: SelectSubset<T, StoreUpsertArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreCountArgs} args - Arguments to filter Stores to count.
     * @example
     * // Count the number of Stores
     * const count = await prisma.store.count({
     *   where: {
     *     // ... the filter for the Stores we want to count
     *   }
     * })
    **/
    count<T extends StoreCountArgs>(
      args?: Subset<T, StoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Store.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoreAggregateArgs>(args: Subset<T, StoreAggregateArgs>): Prisma.PrismaPromise<GetStoreAggregateType<T>>

    /**
     * Group by Store.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoreGroupByArgs['orderBy'] }
        : { orderBy?: StoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Store model
   */
  readonly fields: StoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Store.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends Store$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Store$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    admin<T extends Store$adminArgs<ExtArgs> = {}>(args?: Subset<T, Store$adminArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    stock<T extends Store$stockArgs<ExtArgs> = {}>(args?: Subset<T, Store$stockArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    stock_journal<T extends Store$stock_journalArgs<ExtArgs> = {}>(args?: Subset<T, Store$stock_journalArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockJournalPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    voucher_ongkir<T extends Store$voucher_ongkirArgs<ExtArgs> = {}>(args?: Subset<T, Store$voucher_ongkirArgs<ExtArgs>>): Prisma__VoucherOngkirClient<$Result.GetResult<Prisma.$VoucherOngkirPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    voucher_stores<T extends Store$voucher_storesArgs<ExtArgs> = {}>(args?: Subset<T, Store$voucher_storesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoucherStorePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Store model
   */ 
  interface StoreFieldRefs {
    readonly store_id: FieldRef<"Store", 'Int'>
    readonly store_name: FieldRef<"Store", 'String'>
    readonly store_address: FieldRef<"Store", 'String'>
    readonly country: FieldRef<"Store", 'String'>
    readonly city: FieldRef<"Store", 'String'>
    readonly lat: FieldRef<"Store", 'String'>
    readonly lng: FieldRef<"Store", 'String'>
    readonly isActive: FieldRef<"Store", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Store findUnique
   */
  export type StoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store findUniqueOrThrow
   */
  export type StoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store findFirst
   */
  export type StoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stores.
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stores.
     */
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Store findFirstOrThrow
   */
  export type StoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stores.
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stores.
     */
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Store findMany
   */
  export type StoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Stores to fetch.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stores.
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Store create
   */
  export type StoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * The data needed to create a Store.
     */
    data: XOR<StoreCreateInput, StoreUncheckedCreateInput>
  }

  /**
   * Store createMany
   */
  export type StoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stores.
     */
    data: StoreCreateManyInput | StoreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Store createManyAndReturn
   */
  export type StoreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * The data used to create many Stores.
     */
    data: StoreCreateManyInput | StoreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Store update
   */
  export type StoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * The data needed to update a Store.
     */
    data: XOR<StoreUpdateInput, StoreUncheckedUpdateInput>
    /**
     * Choose, which Store to update.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store updateMany
   */
  export type StoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stores.
     */
    data: XOR<StoreUpdateManyMutationInput, StoreUncheckedUpdateManyInput>
    /**
     * Filter which Stores to update
     */
    where?: StoreWhereInput
    /**
     * Limit how many Stores to update.
     */
    limit?: number
  }

  /**
   * Store updateManyAndReturn
   */
  export type StoreUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * The data used to update Stores.
     */
    data: XOR<StoreUpdateManyMutationInput, StoreUncheckedUpdateManyInput>
    /**
     * Filter which Stores to update
     */
    where?: StoreWhereInput
    /**
     * Limit how many Stores to update.
     */
    limit?: number
  }

  /**
   * Store upsert
   */
  export type StoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * The filter to search for the Store to update in case it exists.
     */
    where: StoreWhereUniqueInput
    /**
     * In case the Store found by the `where` argument doesn't exist, create a new Store with this data.
     */
    create: XOR<StoreCreateInput, StoreUncheckedCreateInput>
    /**
     * In case the Store was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StoreUpdateInput, StoreUncheckedUpdateInput>
  }

  /**
   * Store delete
   */
  export type StoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter which Store to delete.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store deleteMany
   */
  export type StoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stores to delete
     */
    where?: StoreWhereInput
    /**
     * Limit how many Stores to delete.
     */
    limit?: number
  }

  /**
   * Store.orders
   */
  export type Store$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Store.admin
   */
  export type Store$adminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    cursor?: AdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Store.stock
   */
  export type Store$stockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    where?: StockWhereInput
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    cursor?: StockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Store.stock_journal
   */
  export type Store$stock_journalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockJournal
     */
    select?: StockJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockJournal
     */
    omit?: StockJournalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockJournalInclude<ExtArgs> | null
    where?: StockJournalWhereInput
    orderBy?: StockJournalOrderByWithRelationInput | StockJournalOrderByWithRelationInput[]
    cursor?: StockJournalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockJournalScalarFieldEnum | StockJournalScalarFieldEnum[]
  }

  /**
   * Store.voucher_ongkir
   */
  export type Store$voucher_ongkirArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherOngkir
     */
    select?: VoucherOngkirSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherOngkir
     */
    omit?: VoucherOngkirOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherOngkirInclude<ExtArgs> | null
    where?: VoucherOngkirWhereInput
  }

  /**
   * Store.voucher_stores
   */
  export type Store$voucher_storesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherStore
     */
    select?: VoucherStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherStore
     */
    omit?: VoucherStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherStoreInclude<ExtArgs> | null
    where?: VoucherStoreWhereInput
    orderBy?: VoucherStoreOrderByWithRelationInput | VoucherStoreOrderByWithRelationInput[]
    cursor?: VoucherStoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoucherStoreScalarFieldEnum | VoucherStoreScalarFieldEnum[]
  }

  /**
   * Store without action
   */
  export type StoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Store
     */
    omit?: StoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
  }


  /**
   * Model Stock
   */

  export type AggregateStock = {
    _count: StockCountAggregateOutputType | null
    _avg: StockAvgAggregateOutputType | null
    _sum: StockSumAggregateOutputType | null
    _min: StockMinAggregateOutputType | null
    _max: StockMaxAggregateOutputType | null
  }

  export type StockAvgAggregateOutputType = {
    stock_id: number | null
    store_id: number | null
    product_id: number | null
    quantity: number | null
  }

  export type StockSumAggregateOutputType = {
    stock_id: number | null
    store_id: number | null
    product_id: number | null
    quantity: number | null
  }

  export type StockMinAggregateOutputType = {
    stock_id: number | null
    store_id: number | null
    product_id: number | null
    quantity: number | null
  }

  export type StockMaxAggregateOutputType = {
    stock_id: number | null
    store_id: number | null
    product_id: number | null
    quantity: number | null
  }

  export type StockCountAggregateOutputType = {
    stock_id: number
    store_id: number
    product_id: number
    quantity: number
    _all: number
  }


  export type StockAvgAggregateInputType = {
    stock_id?: true
    store_id?: true
    product_id?: true
    quantity?: true
  }

  export type StockSumAggregateInputType = {
    stock_id?: true
    store_id?: true
    product_id?: true
    quantity?: true
  }

  export type StockMinAggregateInputType = {
    stock_id?: true
    store_id?: true
    product_id?: true
    quantity?: true
  }

  export type StockMaxAggregateInputType = {
    stock_id?: true
    store_id?: true
    product_id?: true
    quantity?: true
  }

  export type StockCountAggregateInputType = {
    stock_id?: true
    store_id?: true
    product_id?: true
    quantity?: true
    _all?: true
  }

  export type StockAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stock to aggregate.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stocks
    **/
    _count?: true | StockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StockAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StockSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StockMaxAggregateInputType
  }

  export type GetStockAggregateType<T extends StockAggregateArgs> = {
        [P in keyof T & keyof AggregateStock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStock[P]>
      : GetScalarType<T[P], AggregateStock[P]>
  }




  export type StockGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockWhereInput
    orderBy?: StockOrderByWithAggregationInput | StockOrderByWithAggregationInput[]
    by: StockScalarFieldEnum[] | StockScalarFieldEnum
    having?: StockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StockCountAggregateInputType | true
    _avg?: StockAvgAggregateInputType
    _sum?: StockSumAggregateInputType
    _min?: StockMinAggregateInputType
    _max?: StockMaxAggregateInputType
  }

  export type StockGroupByOutputType = {
    stock_id: number
    store_id: number
    product_id: number
    quantity: number
    _count: StockCountAggregateOutputType | null
    _avg: StockAvgAggregateOutputType | null
    _sum: StockSumAggregateOutputType | null
    _min: StockMinAggregateOutputType | null
    _max: StockMaxAggregateOutputType | null
  }

  type GetStockGroupByPayload<T extends StockGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StockGroupByOutputType[P]>
            : GetScalarType<T[P], StockGroupByOutputType[P]>
        }
      >
    >


  export type StockSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    stock_id?: boolean
    store_id?: boolean
    product_id?: boolean
    quantity?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    stock_journal?: boolean | Stock$stock_journalArgs<ExtArgs>
    _count?: boolean | StockCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stock"]>

  export type StockSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    stock_id?: boolean
    store_id?: boolean
    product_id?: boolean
    quantity?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stock"]>

  export type StockSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    stock_id?: boolean
    store_id?: boolean
    product_id?: boolean
    quantity?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stock"]>

  export type StockSelectScalar = {
    stock_id?: boolean
    store_id?: boolean
    product_id?: boolean
    quantity?: boolean
  }

  export type StockOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"stock_id" | "store_id" | "product_id" | "quantity", ExtArgs["result"]["stock"]>
  export type StockInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    stock_journal?: boolean | Stock$stock_journalArgs<ExtArgs>
    _count?: boolean | StockCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StockIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }
  export type StockIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }

  export type $StockPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stock"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      store: Prisma.$StorePayload<ExtArgs>
      stock_journal: Prisma.$StockJournalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      stock_id: number
      store_id: number
      product_id: number
      quantity: number
    }, ExtArgs["result"]["stock"]>
    composites: {}
  }

  type StockGetPayload<S extends boolean | null | undefined | StockDefaultArgs> = $Result.GetResult<Prisma.$StockPayload, S>

  type StockCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StockFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StockCountAggregateInputType | true
    }

  export interface StockDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stock'], meta: { name: 'Stock' } }
    /**
     * Find zero or one Stock that matches the filter.
     * @param {StockFindUniqueArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StockFindUniqueArgs>(args: SelectSubset<T, StockFindUniqueArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Stock that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StockFindUniqueOrThrowArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StockFindUniqueOrThrowArgs>(args: SelectSubset<T, StockFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Stock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindFirstArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StockFindFirstArgs>(args?: SelectSubset<T, StockFindFirstArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Stock that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindFirstOrThrowArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StockFindFirstOrThrowArgs>(args?: SelectSubset<T, StockFindFirstOrThrowArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Stocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stocks
     * const stocks = await prisma.stock.findMany()
     * 
     * // Get first 10 Stocks
     * const stocks = await prisma.stock.findMany({ take: 10 })
     * 
     * // Only select the `stock_id`
     * const stockWithStock_idOnly = await prisma.stock.findMany({ select: { stock_id: true } })
     * 
     */
    findMany<T extends StockFindManyArgs>(args?: SelectSubset<T, StockFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Stock.
     * @param {StockCreateArgs} args - Arguments to create a Stock.
     * @example
     * // Create one Stock
     * const Stock = await prisma.stock.create({
     *   data: {
     *     // ... data to create a Stock
     *   }
     * })
     * 
     */
    create<T extends StockCreateArgs>(args: SelectSubset<T, StockCreateArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Stocks.
     * @param {StockCreateManyArgs} args - Arguments to create many Stocks.
     * @example
     * // Create many Stocks
     * const stock = await prisma.stock.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StockCreateManyArgs>(args?: SelectSubset<T, StockCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stocks and returns the data saved in the database.
     * @param {StockCreateManyAndReturnArgs} args - Arguments to create many Stocks.
     * @example
     * // Create many Stocks
     * const stock = await prisma.stock.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stocks and only return the `stock_id`
     * const stockWithStock_idOnly = await prisma.stock.createManyAndReturn({
     *   select: { stock_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StockCreateManyAndReturnArgs>(args?: SelectSubset<T, StockCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Stock.
     * @param {StockDeleteArgs} args - Arguments to delete one Stock.
     * @example
     * // Delete one Stock
     * const Stock = await prisma.stock.delete({
     *   where: {
     *     // ... filter to delete one Stock
     *   }
     * })
     * 
     */
    delete<T extends StockDeleteArgs>(args: SelectSubset<T, StockDeleteArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Stock.
     * @param {StockUpdateArgs} args - Arguments to update one Stock.
     * @example
     * // Update one Stock
     * const stock = await prisma.stock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StockUpdateArgs>(args: SelectSubset<T, StockUpdateArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Stocks.
     * @param {StockDeleteManyArgs} args - Arguments to filter Stocks to delete.
     * @example
     * // Delete a few Stocks
     * const { count } = await prisma.stock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StockDeleteManyArgs>(args?: SelectSubset<T, StockDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stocks
     * const stock = await prisma.stock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StockUpdateManyArgs>(args: SelectSubset<T, StockUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stocks and returns the data updated in the database.
     * @param {StockUpdateManyAndReturnArgs} args - Arguments to update many Stocks.
     * @example
     * // Update many Stocks
     * const stock = await prisma.stock.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stocks and only return the `stock_id`
     * const stockWithStock_idOnly = await prisma.stock.updateManyAndReturn({
     *   select: { stock_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StockUpdateManyAndReturnArgs>(args: SelectSubset<T, StockUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Stock.
     * @param {StockUpsertArgs} args - Arguments to update or create a Stock.
     * @example
     * // Update or create a Stock
     * const stock = await prisma.stock.upsert({
     *   create: {
     *     // ... data to create a Stock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stock we want to update
     *   }
     * })
     */
    upsert<T extends StockUpsertArgs>(args: SelectSubset<T, StockUpsertArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Stocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockCountArgs} args - Arguments to filter Stocks to count.
     * @example
     * // Count the number of Stocks
     * const count = await prisma.stock.count({
     *   where: {
     *     // ... the filter for the Stocks we want to count
     *   }
     * })
    **/
    count<T extends StockCountArgs>(
      args?: Subset<T, StockCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StockAggregateArgs>(args: Subset<T, StockAggregateArgs>): Prisma.PrismaPromise<GetStockAggregateType<T>>

    /**
     * Group by Stock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StockGroupByArgs['orderBy'] }
        : { orderBy?: StockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stock model
   */
  readonly fields: StockFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StockClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    store<T extends StoreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoreDefaultArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    stock_journal<T extends Stock$stock_journalArgs<ExtArgs> = {}>(args?: Subset<T, Stock$stock_journalArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockJournalPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Stock model
   */ 
  interface StockFieldRefs {
    readonly stock_id: FieldRef<"Stock", 'Int'>
    readonly store_id: FieldRef<"Stock", 'Int'>
    readonly product_id: FieldRef<"Stock", 'Int'>
    readonly quantity: FieldRef<"Stock", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Stock findUnique
   */
  export type StockFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock findUniqueOrThrow
   */
  export type StockFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock findFirst
   */
  export type StockFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stocks.
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stocks.
     */
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Stock findFirstOrThrow
   */
  export type StockFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stocks.
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stocks.
     */
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Stock findMany
   */
  export type StockFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stocks to fetch.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stocks.
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Stock create
   */
  export type StockCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * The data needed to create a Stock.
     */
    data: XOR<StockCreateInput, StockUncheckedCreateInput>
  }

  /**
   * Stock createMany
   */
  export type StockCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stocks.
     */
    data: StockCreateManyInput | StockCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stock createManyAndReturn
   */
  export type StockCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * The data used to create many Stocks.
     */
    data: StockCreateManyInput | StockCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Stock update
   */
  export type StockUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * The data needed to update a Stock.
     */
    data: XOR<StockUpdateInput, StockUncheckedUpdateInput>
    /**
     * Choose, which Stock to update.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock updateMany
   */
  export type StockUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stocks.
     */
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyInput>
    /**
     * Filter which Stocks to update
     */
    where?: StockWhereInput
    /**
     * Limit how many Stocks to update.
     */
    limit?: number
  }

  /**
   * Stock updateManyAndReturn
   */
  export type StockUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * The data used to update Stocks.
     */
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyInput>
    /**
     * Filter which Stocks to update
     */
    where?: StockWhereInput
    /**
     * Limit how many Stocks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Stock upsert
   */
  export type StockUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * The filter to search for the Stock to update in case it exists.
     */
    where: StockWhereUniqueInput
    /**
     * In case the Stock found by the `where` argument doesn't exist, create a new Stock with this data.
     */
    create: XOR<StockCreateInput, StockUncheckedCreateInput>
    /**
     * In case the Stock was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StockUpdateInput, StockUncheckedUpdateInput>
  }

  /**
   * Stock delete
   */
  export type StockDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter which Stock to delete.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock deleteMany
   */
  export type StockDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stocks to delete
     */
    where?: StockWhereInput
    /**
     * Limit how many Stocks to delete.
     */
    limit?: number
  }

  /**
   * Stock.stock_journal
   */
  export type Stock$stock_journalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockJournal
     */
    select?: StockJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockJournal
     */
    omit?: StockJournalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockJournalInclude<ExtArgs> | null
    where?: StockJournalWhereInput
    orderBy?: StockJournalOrderByWithRelationInput | StockJournalOrderByWithRelationInput[]
    cursor?: StockJournalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockJournalScalarFieldEnum | StockJournalScalarFieldEnum[]
  }

  /**
   * Stock without action
   */
  export type StockDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
  }


  /**
   * Model StockJournal
   */

  export type AggregateStockJournal = {
    _count: StockJournalCountAggregateOutputType | null
    _avg: StockJournalAvgAggregateOutputType | null
    _sum: StockJournalSumAggregateOutputType | null
    _min: StockJournalMinAggregateOutputType | null
    _max: StockJournalMaxAggregateOutputType | null
  }

  export type StockJournalAvgAggregateOutputType = {
    stock_journal_id: number | null
    store_id: number | null
    stock_id: number | null
    quantity: number | null
  }

  export type StockJournalSumAggregateOutputType = {
    stock_journal_id: number | null
    store_id: number | null
    stock_id: number | null
    quantity: number | null
  }

  export type StockJournalMinAggregateOutputType = {
    stock_journal_id: number | null
    store_id: number | null
    stock_id: number | null
    product_id: string | null
    quantity: number | null
    type: string | null
    notes: string | null
    created_at: Date | null
  }

  export type StockJournalMaxAggregateOutputType = {
    stock_journal_id: number | null
    store_id: number | null
    stock_id: number | null
    product_id: string | null
    quantity: number | null
    type: string | null
    notes: string | null
    created_at: Date | null
  }

  export type StockJournalCountAggregateOutputType = {
    stock_journal_id: number
    store_id: number
    stock_id: number
    product_id: number
    quantity: number
    type: number
    notes: number
    created_at: number
    _all: number
  }


  export type StockJournalAvgAggregateInputType = {
    stock_journal_id?: true
    store_id?: true
    stock_id?: true
    quantity?: true
  }

  export type StockJournalSumAggregateInputType = {
    stock_journal_id?: true
    store_id?: true
    stock_id?: true
    quantity?: true
  }

  export type StockJournalMinAggregateInputType = {
    stock_journal_id?: true
    store_id?: true
    stock_id?: true
    product_id?: true
    quantity?: true
    type?: true
    notes?: true
    created_at?: true
  }

  export type StockJournalMaxAggregateInputType = {
    stock_journal_id?: true
    store_id?: true
    stock_id?: true
    product_id?: true
    quantity?: true
    type?: true
    notes?: true
    created_at?: true
  }

  export type StockJournalCountAggregateInputType = {
    stock_journal_id?: true
    store_id?: true
    stock_id?: true
    product_id?: true
    quantity?: true
    type?: true
    notes?: true
    created_at?: true
    _all?: true
  }

  export type StockJournalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StockJournal to aggregate.
     */
    where?: StockJournalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockJournals to fetch.
     */
    orderBy?: StockJournalOrderByWithRelationInput | StockJournalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StockJournalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockJournals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockJournals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StockJournals
    **/
    _count?: true | StockJournalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StockJournalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StockJournalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StockJournalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StockJournalMaxAggregateInputType
  }

  export type GetStockJournalAggregateType<T extends StockJournalAggregateArgs> = {
        [P in keyof T & keyof AggregateStockJournal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStockJournal[P]>
      : GetScalarType<T[P], AggregateStockJournal[P]>
  }




  export type StockJournalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockJournalWhereInput
    orderBy?: StockJournalOrderByWithAggregationInput | StockJournalOrderByWithAggregationInput[]
    by: StockJournalScalarFieldEnum[] | StockJournalScalarFieldEnum
    having?: StockJournalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StockJournalCountAggregateInputType | true
    _avg?: StockJournalAvgAggregateInputType
    _sum?: StockJournalSumAggregateInputType
    _min?: StockJournalMinAggregateInputType
    _max?: StockJournalMaxAggregateInputType
  }

  export type StockJournalGroupByOutputType = {
    stock_journal_id: number
    store_id: number
    stock_id: number
    product_id: string
    quantity: number
    type: string
    notes: string
    created_at: Date
    _count: StockJournalCountAggregateOutputType | null
    _avg: StockJournalAvgAggregateOutputType | null
    _sum: StockJournalSumAggregateOutputType | null
    _min: StockJournalMinAggregateOutputType | null
    _max: StockJournalMaxAggregateOutputType | null
  }

  type GetStockJournalGroupByPayload<T extends StockJournalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StockJournalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StockJournalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StockJournalGroupByOutputType[P]>
            : GetScalarType<T[P], StockJournalGroupByOutputType[P]>
        }
      >
    >


  export type StockJournalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    stock_journal_id?: boolean
    store_id?: boolean
    stock_id?: boolean
    product_id?: boolean
    quantity?: boolean
    type?: boolean
    notes?: boolean
    created_at?: boolean
    stock?: boolean | StockDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stockJournal"]>

  export type StockJournalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    stock_journal_id?: boolean
    store_id?: boolean
    stock_id?: boolean
    product_id?: boolean
    quantity?: boolean
    type?: boolean
    notes?: boolean
    created_at?: boolean
    stock?: boolean | StockDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stockJournal"]>

  export type StockJournalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    stock_journal_id?: boolean
    store_id?: boolean
    stock_id?: boolean
    product_id?: boolean
    quantity?: boolean
    type?: boolean
    notes?: boolean
    created_at?: boolean
    stock?: boolean | StockDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stockJournal"]>

  export type StockJournalSelectScalar = {
    stock_journal_id?: boolean
    store_id?: boolean
    stock_id?: boolean
    product_id?: boolean
    quantity?: boolean
    type?: boolean
    notes?: boolean
    created_at?: boolean
  }

  export type StockJournalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"stock_journal_id" | "store_id" | "stock_id" | "product_id" | "quantity" | "type" | "notes" | "created_at", ExtArgs["result"]["stockJournal"]>
  export type StockJournalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stock?: boolean | StockDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }
  export type StockJournalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stock?: boolean | StockDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }
  export type StockJournalIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stock?: boolean | StockDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }

  export type $StockJournalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StockJournal"
    objects: {
      stock: Prisma.$StockPayload<ExtArgs>
      store: Prisma.$StorePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      stock_journal_id: number
      store_id: number
      stock_id: number
      product_id: string
      quantity: number
      type: string
      notes: string
      created_at: Date
    }, ExtArgs["result"]["stockJournal"]>
    composites: {}
  }

  type StockJournalGetPayload<S extends boolean | null | undefined | StockJournalDefaultArgs> = $Result.GetResult<Prisma.$StockJournalPayload, S>

  type StockJournalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StockJournalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StockJournalCountAggregateInputType | true
    }

  export interface StockJournalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StockJournal'], meta: { name: 'StockJournal' } }
    /**
     * Find zero or one StockJournal that matches the filter.
     * @param {StockJournalFindUniqueArgs} args - Arguments to find a StockJournal
     * @example
     * // Get one StockJournal
     * const stockJournal = await prisma.stockJournal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StockJournalFindUniqueArgs>(args: SelectSubset<T, StockJournalFindUniqueArgs<ExtArgs>>): Prisma__StockJournalClient<$Result.GetResult<Prisma.$StockJournalPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one StockJournal that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StockJournalFindUniqueOrThrowArgs} args - Arguments to find a StockJournal
     * @example
     * // Get one StockJournal
     * const stockJournal = await prisma.stockJournal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StockJournalFindUniqueOrThrowArgs>(args: SelectSubset<T, StockJournalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StockJournalClient<$Result.GetResult<Prisma.$StockJournalPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first StockJournal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockJournalFindFirstArgs} args - Arguments to find a StockJournal
     * @example
     * // Get one StockJournal
     * const stockJournal = await prisma.stockJournal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StockJournalFindFirstArgs>(args?: SelectSubset<T, StockJournalFindFirstArgs<ExtArgs>>): Prisma__StockJournalClient<$Result.GetResult<Prisma.$StockJournalPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first StockJournal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockJournalFindFirstOrThrowArgs} args - Arguments to find a StockJournal
     * @example
     * // Get one StockJournal
     * const stockJournal = await prisma.stockJournal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StockJournalFindFirstOrThrowArgs>(args?: SelectSubset<T, StockJournalFindFirstOrThrowArgs<ExtArgs>>): Prisma__StockJournalClient<$Result.GetResult<Prisma.$StockJournalPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more StockJournals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockJournalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StockJournals
     * const stockJournals = await prisma.stockJournal.findMany()
     * 
     * // Get first 10 StockJournals
     * const stockJournals = await prisma.stockJournal.findMany({ take: 10 })
     * 
     * // Only select the `stock_journal_id`
     * const stockJournalWithStock_journal_idOnly = await prisma.stockJournal.findMany({ select: { stock_journal_id: true } })
     * 
     */
    findMany<T extends StockJournalFindManyArgs>(args?: SelectSubset<T, StockJournalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockJournalPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a StockJournal.
     * @param {StockJournalCreateArgs} args - Arguments to create a StockJournal.
     * @example
     * // Create one StockJournal
     * const StockJournal = await prisma.stockJournal.create({
     *   data: {
     *     // ... data to create a StockJournal
     *   }
     * })
     * 
     */
    create<T extends StockJournalCreateArgs>(args: SelectSubset<T, StockJournalCreateArgs<ExtArgs>>): Prisma__StockJournalClient<$Result.GetResult<Prisma.$StockJournalPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many StockJournals.
     * @param {StockJournalCreateManyArgs} args - Arguments to create many StockJournals.
     * @example
     * // Create many StockJournals
     * const stockJournal = await prisma.stockJournal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StockJournalCreateManyArgs>(args?: SelectSubset<T, StockJournalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StockJournals and returns the data saved in the database.
     * @param {StockJournalCreateManyAndReturnArgs} args - Arguments to create many StockJournals.
     * @example
     * // Create many StockJournals
     * const stockJournal = await prisma.stockJournal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StockJournals and only return the `stock_journal_id`
     * const stockJournalWithStock_journal_idOnly = await prisma.stockJournal.createManyAndReturn({
     *   select: { stock_journal_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StockJournalCreateManyAndReturnArgs>(args?: SelectSubset<T, StockJournalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockJournalPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a StockJournal.
     * @param {StockJournalDeleteArgs} args - Arguments to delete one StockJournal.
     * @example
     * // Delete one StockJournal
     * const StockJournal = await prisma.stockJournal.delete({
     *   where: {
     *     // ... filter to delete one StockJournal
     *   }
     * })
     * 
     */
    delete<T extends StockJournalDeleteArgs>(args: SelectSubset<T, StockJournalDeleteArgs<ExtArgs>>): Prisma__StockJournalClient<$Result.GetResult<Prisma.$StockJournalPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one StockJournal.
     * @param {StockJournalUpdateArgs} args - Arguments to update one StockJournal.
     * @example
     * // Update one StockJournal
     * const stockJournal = await prisma.stockJournal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StockJournalUpdateArgs>(args: SelectSubset<T, StockJournalUpdateArgs<ExtArgs>>): Prisma__StockJournalClient<$Result.GetResult<Prisma.$StockJournalPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more StockJournals.
     * @param {StockJournalDeleteManyArgs} args - Arguments to filter StockJournals to delete.
     * @example
     * // Delete a few StockJournals
     * const { count } = await prisma.stockJournal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StockJournalDeleteManyArgs>(args?: SelectSubset<T, StockJournalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StockJournals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockJournalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StockJournals
     * const stockJournal = await prisma.stockJournal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StockJournalUpdateManyArgs>(args: SelectSubset<T, StockJournalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StockJournals and returns the data updated in the database.
     * @param {StockJournalUpdateManyAndReturnArgs} args - Arguments to update many StockJournals.
     * @example
     * // Update many StockJournals
     * const stockJournal = await prisma.stockJournal.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StockJournals and only return the `stock_journal_id`
     * const stockJournalWithStock_journal_idOnly = await prisma.stockJournal.updateManyAndReturn({
     *   select: { stock_journal_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StockJournalUpdateManyAndReturnArgs>(args: SelectSubset<T, StockJournalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockJournalPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one StockJournal.
     * @param {StockJournalUpsertArgs} args - Arguments to update or create a StockJournal.
     * @example
     * // Update or create a StockJournal
     * const stockJournal = await prisma.stockJournal.upsert({
     *   create: {
     *     // ... data to create a StockJournal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StockJournal we want to update
     *   }
     * })
     */
    upsert<T extends StockJournalUpsertArgs>(args: SelectSubset<T, StockJournalUpsertArgs<ExtArgs>>): Prisma__StockJournalClient<$Result.GetResult<Prisma.$StockJournalPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of StockJournals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockJournalCountArgs} args - Arguments to filter StockJournals to count.
     * @example
     * // Count the number of StockJournals
     * const count = await prisma.stockJournal.count({
     *   where: {
     *     // ... the filter for the StockJournals we want to count
     *   }
     * })
    **/
    count<T extends StockJournalCountArgs>(
      args?: Subset<T, StockJournalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StockJournalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StockJournal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockJournalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StockJournalAggregateArgs>(args: Subset<T, StockJournalAggregateArgs>): Prisma.PrismaPromise<GetStockJournalAggregateType<T>>

    /**
     * Group by StockJournal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockJournalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StockJournalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StockJournalGroupByArgs['orderBy'] }
        : { orderBy?: StockJournalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StockJournalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStockJournalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StockJournal model
   */
  readonly fields: StockJournalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StockJournal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StockJournalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stock<T extends StockDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StockDefaultArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    store<T extends StoreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoreDefaultArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StockJournal model
   */ 
  interface StockJournalFieldRefs {
    readonly stock_journal_id: FieldRef<"StockJournal", 'Int'>
    readonly store_id: FieldRef<"StockJournal", 'Int'>
    readonly stock_id: FieldRef<"StockJournal", 'Int'>
    readonly product_id: FieldRef<"StockJournal", 'String'>
    readonly quantity: FieldRef<"StockJournal", 'Int'>
    readonly type: FieldRef<"StockJournal", 'String'>
    readonly notes: FieldRef<"StockJournal", 'String'>
    readonly created_at: FieldRef<"StockJournal", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StockJournal findUnique
   */
  export type StockJournalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockJournal
     */
    select?: StockJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockJournal
     */
    omit?: StockJournalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockJournalInclude<ExtArgs> | null
    /**
     * Filter, which StockJournal to fetch.
     */
    where: StockJournalWhereUniqueInput
  }

  /**
   * StockJournal findUniqueOrThrow
   */
  export type StockJournalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockJournal
     */
    select?: StockJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockJournal
     */
    omit?: StockJournalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockJournalInclude<ExtArgs> | null
    /**
     * Filter, which StockJournal to fetch.
     */
    where: StockJournalWhereUniqueInput
  }

  /**
   * StockJournal findFirst
   */
  export type StockJournalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockJournal
     */
    select?: StockJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockJournal
     */
    omit?: StockJournalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockJournalInclude<ExtArgs> | null
    /**
     * Filter, which StockJournal to fetch.
     */
    where?: StockJournalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockJournals to fetch.
     */
    orderBy?: StockJournalOrderByWithRelationInput | StockJournalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StockJournals.
     */
    cursor?: StockJournalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockJournals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockJournals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StockJournals.
     */
    distinct?: StockJournalScalarFieldEnum | StockJournalScalarFieldEnum[]
  }

  /**
   * StockJournal findFirstOrThrow
   */
  export type StockJournalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockJournal
     */
    select?: StockJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockJournal
     */
    omit?: StockJournalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockJournalInclude<ExtArgs> | null
    /**
     * Filter, which StockJournal to fetch.
     */
    where?: StockJournalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockJournals to fetch.
     */
    orderBy?: StockJournalOrderByWithRelationInput | StockJournalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StockJournals.
     */
    cursor?: StockJournalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockJournals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockJournals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StockJournals.
     */
    distinct?: StockJournalScalarFieldEnum | StockJournalScalarFieldEnum[]
  }

  /**
   * StockJournal findMany
   */
  export type StockJournalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockJournal
     */
    select?: StockJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockJournal
     */
    omit?: StockJournalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockJournalInclude<ExtArgs> | null
    /**
     * Filter, which StockJournals to fetch.
     */
    where?: StockJournalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StockJournals to fetch.
     */
    orderBy?: StockJournalOrderByWithRelationInput | StockJournalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StockJournals.
     */
    cursor?: StockJournalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StockJournals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StockJournals.
     */
    skip?: number
    distinct?: StockJournalScalarFieldEnum | StockJournalScalarFieldEnum[]
  }

  /**
   * StockJournal create
   */
  export type StockJournalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockJournal
     */
    select?: StockJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockJournal
     */
    omit?: StockJournalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockJournalInclude<ExtArgs> | null
    /**
     * The data needed to create a StockJournal.
     */
    data: XOR<StockJournalCreateInput, StockJournalUncheckedCreateInput>
  }

  /**
   * StockJournal createMany
   */
  export type StockJournalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StockJournals.
     */
    data: StockJournalCreateManyInput | StockJournalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StockJournal createManyAndReturn
   */
  export type StockJournalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockJournal
     */
    select?: StockJournalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StockJournal
     */
    omit?: StockJournalOmit<ExtArgs> | null
    /**
     * The data used to create many StockJournals.
     */
    data: StockJournalCreateManyInput | StockJournalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockJournalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StockJournal update
   */
  export type StockJournalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockJournal
     */
    select?: StockJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockJournal
     */
    omit?: StockJournalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockJournalInclude<ExtArgs> | null
    /**
     * The data needed to update a StockJournal.
     */
    data: XOR<StockJournalUpdateInput, StockJournalUncheckedUpdateInput>
    /**
     * Choose, which StockJournal to update.
     */
    where: StockJournalWhereUniqueInput
  }

  /**
   * StockJournal updateMany
   */
  export type StockJournalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StockJournals.
     */
    data: XOR<StockJournalUpdateManyMutationInput, StockJournalUncheckedUpdateManyInput>
    /**
     * Filter which StockJournals to update
     */
    where?: StockJournalWhereInput
    /**
     * Limit how many StockJournals to update.
     */
    limit?: number
  }

  /**
   * StockJournal updateManyAndReturn
   */
  export type StockJournalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockJournal
     */
    select?: StockJournalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StockJournal
     */
    omit?: StockJournalOmit<ExtArgs> | null
    /**
     * The data used to update StockJournals.
     */
    data: XOR<StockJournalUpdateManyMutationInput, StockJournalUncheckedUpdateManyInput>
    /**
     * Filter which StockJournals to update
     */
    where?: StockJournalWhereInput
    /**
     * Limit how many StockJournals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockJournalIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StockJournal upsert
   */
  export type StockJournalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockJournal
     */
    select?: StockJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockJournal
     */
    omit?: StockJournalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockJournalInclude<ExtArgs> | null
    /**
     * The filter to search for the StockJournal to update in case it exists.
     */
    where: StockJournalWhereUniqueInput
    /**
     * In case the StockJournal found by the `where` argument doesn't exist, create a new StockJournal with this data.
     */
    create: XOR<StockJournalCreateInput, StockJournalUncheckedCreateInput>
    /**
     * In case the StockJournal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StockJournalUpdateInput, StockJournalUncheckedUpdateInput>
  }

  /**
   * StockJournal delete
   */
  export type StockJournalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockJournal
     */
    select?: StockJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockJournal
     */
    omit?: StockJournalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockJournalInclude<ExtArgs> | null
    /**
     * Filter which StockJournal to delete.
     */
    where: StockJournalWhereUniqueInput
  }

  /**
   * StockJournal deleteMany
   */
  export type StockJournalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StockJournals to delete
     */
    where?: StockJournalWhereInput
    /**
     * Limit how many StockJournals to delete.
     */
    limit?: number
  }

  /**
   * StockJournal without action
   */
  export type StockJournalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockJournal
     */
    select?: StockJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StockJournal
     */
    omit?: StockJournalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockJournalInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    product_id: number | null
    product_price: number | null
    product_category_id: number | null
  }

  export type ProductSumAggregateOutputType = {
    product_id: number | null
    product_price: number | null
    product_category_id: number | null
  }

  export type ProductMinAggregateOutputType = {
    product_id: number | null
    product_name: string | null
    product_price: number | null
    product_category_id: number | null
    product_description: string | null
    deletedAt: Date | null
  }

  export type ProductMaxAggregateOutputType = {
    product_id: number | null
    product_name: string | null
    product_price: number | null
    product_category_id: number | null
    product_description: string | null
    deletedAt: Date | null
  }

  export type ProductCountAggregateOutputType = {
    product_id: number
    product_name: number
    product_price: number
    product_category_id: number
    product_description: number
    deletedAt: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    product_id?: true
    product_price?: true
    product_category_id?: true
  }

  export type ProductSumAggregateInputType = {
    product_id?: true
    product_price?: true
    product_category_id?: true
  }

  export type ProductMinAggregateInputType = {
    product_id?: true
    product_name?: true
    product_price?: true
    product_category_id?: true
    product_description?: true
    deletedAt?: true
  }

  export type ProductMaxAggregateInputType = {
    product_id?: true
    product_name?: true
    product_price?: true
    product_category_id?: true
    product_description?: true
    deletedAt?: true
  }

  export type ProductCountAggregateInputType = {
    product_id?: true
    product_name?: true
    product_price?: true
    product_category_id?: true
    product_description?: true
    deletedAt?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    product_id: number
    product_name: string
    product_price: number
    product_category_id: number
    product_description: string | null
    deletedAt: Date | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    product_id?: boolean
    product_name?: boolean
    product_price?: boolean
    product_category_id?: boolean
    product_description?: boolean
    deletedAt?: boolean
    cart_items?: boolean | Product$cart_itemsArgs<ExtArgs>
    order_items?: boolean | Product$order_itemsArgs<ExtArgs>
    product_category?: boolean | ProductCategoryDefaultArgs<ExtArgs>
    product_img?: boolean | Product$product_imgArgs<ExtArgs>
    stock?: boolean | Product$stockArgs<ExtArgs>
    voucher?: boolean | Product$voucherArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    product_id?: boolean
    product_name?: boolean
    product_price?: boolean
    product_category_id?: boolean
    product_description?: boolean
    deletedAt?: boolean
    product_category?: boolean | ProductCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    product_id?: boolean
    product_name?: boolean
    product_price?: boolean
    product_category_id?: boolean
    product_description?: boolean
    deletedAt?: boolean
    product_category?: boolean | ProductCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    product_id?: boolean
    product_name?: boolean
    product_price?: boolean
    product_category_id?: boolean
    product_description?: boolean
    deletedAt?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"product_id" | "product_name" | "product_price" | "product_category_id" | "product_description" | "deletedAt", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cart_items?: boolean | Product$cart_itemsArgs<ExtArgs>
    order_items?: boolean | Product$order_itemsArgs<ExtArgs>
    product_category?: boolean | ProductCategoryDefaultArgs<ExtArgs>
    product_img?: boolean | Product$product_imgArgs<ExtArgs>
    stock?: boolean | Product$stockArgs<ExtArgs>
    voucher?: boolean | Product$voucherArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product_category?: boolean | ProductCategoryDefaultArgs<ExtArgs>
  }
  export type ProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product_category?: boolean | ProductCategoryDefaultArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      cart_items: Prisma.$CartItemPayload<ExtArgs>[]
      order_items: Prisma.$OrderItemPayload<ExtArgs>[]
      product_category: Prisma.$ProductCategoryPayload<ExtArgs>
      product_img: Prisma.$ProductImgPayload<ExtArgs>[]
      stock: Prisma.$StockPayload<ExtArgs> | null
      voucher: Prisma.$VoucherProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      product_id: number
      product_name: string
      product_price: number
      product_category_id: number
      product_description: string | null
      deletedAt: Date | null
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `product_id`
     * const productWithProduct_idOnly = await prisma.product.findMany({ select: { product_id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `product_id`
     * const productWithProduct_idOnly = await prisma.product.createManyAndReturn({
     *   select: { product_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products and returns the data updated in the database.
     * @param {ProductUpdateManyAndReturnArgs} args - Arguments to update many Products.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Products and only return the `product_id`
     * const productWithProduct_idOnly = await prisma.product.updateManyAndReturn({
     *   select: { product_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cart_items<T extends Product$cart_itemsArgs<ExtArgs> = {}>(args?: Subset<T, Product$cart_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    order_items<T extends Product$order_itemsArgs<ExtArgs> = {}>(args?: Subset<T, Product$order_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    product_category<T extends ProductCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductCategoryDefaultArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    product_img<T extends Product$product_imgArgs<ExtArgs> = {}>(args?: Subset<T, Product$product_imgArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductImgPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    stock<T extends Product$stockArgs<ExtArgs> = {}>(args?: Subset<T, Product$stockArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    voucher<T extends Product$voucherArgs<ExtArgs> = {}>(args?: Subset<T, Product$voucherArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoucherProductPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly product_id: FieldRef<"Product", 'Int'>
    readonly product_name: FieldRef<"Product", 'String'>
    readonly product_price: FieldRef<"Product", 'Int'>
    readonly product_category_id: FieldRef<"Product", 'Int'>
    readonly product_description: FieldRef<"Product", 'String'>
    readonly deletedAt: FieldRef<"Product", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product updateManyAndReturn
   */
  export type ProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product.cart_items
   */
  export type Product$cart_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    where?: CartItemWhereInput
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    cursor?: CartItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * Product.order_items
   */
  export type Product$order_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Product.product_img
   */
  export type Product$product_imgArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImg
     */
    select?: ProductImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImg
     */
    omit?: ProductImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImgInclude<ExtArgs> | null
    where?: ProductImgWhereInput
    orderBy?: ProductImgOrderByWithRelationInput | ProductImgOrderByWithRelationInput[]
    cursor?: ProductImgWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductImgScalarFieldEnum | ProductImgScalarFieldEnum[]
  }

  /**
   * Product.stock
   */
  export type Product$stockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    where?: StockWhereInput
  }

  /**
   * Product.voucher
   */
  export type Product$voucherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherProduct
     */
    select?: VoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherProduct
     */
    omit?: VoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherProductInclude<ExtArgs> | null
    where?: VoucherProductWhereInput
    orderBy?: VoucherProductOrderByWithRelationInput | VoucherProductOrderByWithRelationInput[]
    cursor?: VoucherProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoucherProductScalarFieldEnum | VoucherProductScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model ProductImg
   */

  export type AggregateProductImg = {
    _count: ProductImgCountAggregateOutputType | null
    _avg: ProductImgAvgAggregateOutputType | null
    _sum: ProductImgSumAggregateOutputType | null
    _min: ProductImgMinAggregateOutputType | null
    _max: ProductImgMaxAggregateOutputType | null
  }

  export type ProductImgAvgAggregateOutputType = {
    image_id: number | null
    product_id: number | null
  }

  export type ProductImgSumAggregateOutputType = {
    image_id: number | null
    product_id: number | null
  }

  export type ProductImgMinAggregateOutputType = {
    image_id: number | null
    image_url: string | null
    product_id: number | null
  }

  export type ProductImgMaxAggregateOutputType = {
    image_id: number | null
    image_url: string | null
    product_id: number | null
  }

  export type ProductImgCountAggregateOutputType = {
    image_id: number
    image_url: number
    product_id: number
    _all: number
  }


  export type ProductImgAvgAggregateInputType = {
    image_id?: true
    product_id?: true
  }

  export type ProductImgSumAggregateInputType = {
    image_id?: true
    product_id?: true
  }

  export type ProductImgMinAggregateInputType = {
    image_id?: true
    image_url?: true
    product_id?: true
  }

  export type ProductImgMaxAggregateInputType = {
    image_id?: true
    image_url?: true
    product_id?: true
  }

  export type ProductImgCountAggregateInputType = {
    image_id?: true
    image_url?: true
    product_id?: true
    _all?: true
  }

  export type ProductImgAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductImg to aggregate.
     */
    where?: ProductImgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductImgs to fetch.
     */
    orderBy?: ProductImgOrderByWithRelationInput | ProductImgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductImgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductImgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductImgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductImgs
    **/
    _count?: true | ProductImgCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductImgAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductImgSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductImgMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductImgMaxAggregateInputType
  }

  export type GetProductImgAggregateType<T extends ProductImgAggregateArgs> = {
        [P in keyof T & keyof AggregateProductImg]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductImg[P]>
      : GetScalarType<T[P], AggregateProductImg[P]>
  }




  export type ProductImgGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductImgWhereInput
    orderBy?: ProductImgOrderByWithAggregationInput | ProductImgOrderByWithAggregationInput[]
    by: ProductImgScalarFieldEnum[] | ProductImgScalarFieldEnum
    having?: ProductImgScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductImgCountAggregateInputType | true
    _avg?: ProductImgAvgAggregateInputType
    _sum?: ProductImgSumAggregateInputType
    _min?: ProductImgMinAggregateInputType
    _max?: ProductImgMaxAggregateInputType
  }

  export type ProductImgGroupByOutputType = {
    image_id: number
    image_url: string
    product_id: number
    _count: ProductImgCountAggregateOutputType | null
    _avg: ProductImgAvgAggregateOutputType | null
    _sum: ProductImgSumAggregateOutputType | null
    _min: ProductImgMinAggregateOutputType | null
    _max: ProductImgMaxAggregateOutputType | null
  }

  type GetProductImgGroupByPayload<T extends ProductImgGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductImgGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductImgGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductImgGroupByOutputType[P]>
            : GetScalarType<T[P], ProductImgGroupByOutputType[P]>
        }
      >
    >


  export type ProductImgSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    image_id?: boolean
    image_url?: boolean
    product_id?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productImg"]>

  export type ProductImgSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    image_id?: boolean
    image_url?: boolean
    product_id?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productImg"]>

  export type ProductImgSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    image_id?: boolean
    image_url?: boolean
    product_id?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productImg"]>

  export type ProductImgSelectScalar = {
    image_id?: boolean
    image_url?: boolean
    product_id?: boolean
  }

  export type ProductImgOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"image_id" | "image_url" | "product_id", ExtArgs["result"]["productImg"]>
  export type ProductImgInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductImgIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductImgIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ProductImgPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductImg"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      image_id: number
      image_url: string
      product_id: number
    }, ExtArgs["result"]["productImg"]>
    composites: {}
  }

  type ProductImgGetPayload<S extends boolean | null | undefined | ProductImgDefaultArgs> = $Result.GetResult<Prisma.$ProductImgPayload, S>

  type ProductImgCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductImgFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductImgCountAggregateInputType | true
    }

  export interface ProductImgDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductImg'], meta: { name: 'ProductImg' } }
    /**
     * Find zero or one ProductImg that matches the filter.
     * @param {ProductImgFindUniqueArgs} args - Arguments to find a ProductImg
     * @example
     * // Get one ProductImg
     * const productImg = await prisma.productImg.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductImgFindUniqueArgs>(args: SelectSubset<T, ProductImgFindUniqueArgs<ExtArgs>>): Prisma__ProductImgClient<$Result.GetResult<Prisma.$ProductImgPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ProductImg that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductImgFindUniqueOrThrowArgs} args - Arguments to find a ProductImg
     * @example
     * // Get one ProductImg
     * const productImg = await prisma.productImg.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductImgFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductImgFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductImgClient<$Result.GetResult<Prisma.$ProductImgPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ProductImg that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImgFindFirstArgs} args - Arguments to find a ProductImg
     * @example
     * // Get one ProductImg
     * const productImg = await prisma.productImg.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductImgFindFirstArgs>(args?: SelectSubset<T, ProductImgFindFirstArgs<ExtArgs>>): Prisma__ProductImgClient<$Result.GetResult<Prisma.$ProductImgPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ProductImg that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImgFindFirstOrThrowArgs} args - Arguments to find a ProductImg
     * @example
     * // Get one ProductImg
     * const productImg = await prisma.productImg.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductImgFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductImgFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductImgClient<$Result.GetResult<Prisma.$ProductImgPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ProductImgs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImgFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductImgs
     * const productImgs = await prisma.productImg.findMany()
     * 
     * // Get first 10 ProductImgs
     * const productImgs = await prisma.productImg.findMany({ take: 10 })
     * 
     * // Only select the `image_id`
     * const productImgWithImage_idOnly = await prisma.productImg.findMany({ select: { image_id: true } })
     * 
     */
    findMany<T extends ProductImgFindManyArgs>(args?: SelectSubset<T, ProductImgFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductImgPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ProductImg.
     * @param {ProductImgCreateArgs} args - Arguments to create a ProductImg.
     * @example
     * // Create one ProductImg
     * const ProductImg = await prisma.productImg.create({
     *   data: {
     *     // ... data to create a ProductImg
     *   }
     * })
     * 
     */
    create<T extends ProductImgCreateArgs>(args: SelectSubset<T, ProductImgCreateArgs<ExtArgs>>): Prisma__ProductImgClient<$Result.GetResult<Prisma.$ProductImgPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ProductImgs.
     * @param {ProductImgCreateManyArgs} args - Arguments to create many ProductImgs.
     * @example
     * // Create many ProductImgs
     * const productImg = await prisma.productImg.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductImgCreateManyArgs>(args?: SelectSubset<T, ProductImgCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductImgs and returns the data saved in the database.
     * @param {ProductImgCreateManyAndReturnArgs} args - Arguments to create many ProductImgs.
     * @example
     * // Create many ProductImgs
     * const productImg = await prisma.productImg.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductImgs and only return the `image_id`
     * const productImgWithImage_idOnly = await prisma.productImg.createManyAndReturn({
     *   select: { image_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductImgCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductImgCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductImgPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ProductImg.
     * @param {ProductImgDeleteArgs} args - Arguments to delete one ProductImg.
     * @example
     * // Delete one ProductImg
     * const ProductImg = await prisma.productImg.delete({
     *   where: {
     *     // ... filter to delete one ProductImg
     *   }
     * })
     * 
     */
    delete<T extends ProductImgDeleteArgs>(args: SelectSubset<T, ProductImgDeleteArgs<ExtArgs>>): Prisma__ProductImgClient<$Result.GetResult<Prisma.$ProductImgPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ProductImg.
     * @param {ProductImgUpdateArgs} args - Arguments to update one ProductImg.
     * @example
     * // Update one ProductImg
     * const productImg = await prisma.productImg.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductImgUpdateArgs>(args: SelectSubset<T, ProductImgUpdateArgs<ExtArgs>>): Prisma__ProductImgClient<$Result.GetResult<Prisma.$ProductImgPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ProductImgs.
     * @param {ProductImgDeleteManyArgs} args - Arguments to filter ProductImgs to delete.
     * @example
     * // Delete a few ProductImgs
     * const { count } = await prisma.productImg.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductImgDeleteManyArgs>(args?: SelectSubset<T, ProductImgDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductImgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImgUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductImgs
     * const productImg = await prisma.productImg.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductImgUpdateManyArgs>(args: SelectSubset<T, ProductImgUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductImgs and returns the data updated in the database.
     * @param {ProductImgUpdateManyAndReturnArgs} args - Arguments to update many ProductImgs.
     * @example
     * // Update many ProductImgs
     * const productImg = await prisma.productImg.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductImgs and only return the `image_id`
     * const productImgWithImage_idOnly = await prisma.productImg.updateManyAndReturn({
     *   select: { image_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductImgUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductImgUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductImgPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one ProductImg.
     * @param {ProductImgUpsertArgs} args - Arguments to update or create a ProductImg.
     * @example
     * // Update or create a ProductImg
     * const productImg = await prisma.productImg.upsert({
     *   create: {
     *     // ... data to create a ProductImg
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductImg we want to update
     *   }
     * })
     */
    upsert<T extends ProductImgUpsertArgs>(args: SelectSubset<T, ProductImgUpsertArgs<ExtArgs>>): Prisma__ProductImgClient<$Result.GetResult<Prisma.$ProductImgPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ProductImgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImgCountArgs} args - Arguments to filter ProductImgs to count.
     * @example
     * // Count the number of ProductImgs
     * const count = await prisma.productImg.count({
     *   where: {
     *     // ... the filter for the ProductImgs we want to count
     *   }
     * })
    **/
    count<T extends ProductImgCountArgs>(
      args?: Subset<T, ProductImgCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductImgCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductImg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImgAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductImgAggregateArgs>(args: Subset<T, ProductImgAggregateArgs>): Prisma.PrismaPromise<GetProductImgAggregateType<T>>

    /**
     * Group by ProductImg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImgGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductImgGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductImgGroupByArgs['orderBy'] }
        : { orderBy?: ProductImgGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductImgGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductImgGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductImg model
   */
  readonly fields: ProductImgFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductImg.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductImgClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductImg model
   */ 
  interface ProductImgFieldRefs {
    readonly image_id: FieldRef<"ProductImg", 'Int'>
    readonly image_url: FieldRef<"ProductImg", 'String'>
    readonly product_id: FieldRef<"ProductImg", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ProductImg findUnique
   */
  export type ProductImgFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImg
     */
    select?: ProductImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImg
     */
    omit?: ProductImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImgInclude<ExtArgs> | null
    /**
     * Filter, which ProductImg to fetch.
     */
    where: ProductImgWhereUniqueInput
  }

  /**
   * ProductImg findUniqueOrThrow
   */
  export type ProductImgFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImg
     */
    select?: ProductImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImg
     */
    omit?: ProductImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImgInclude<ExtArgs> | null
    /**
     * Filter, which ProductImg to fetch.
     */
    where: ProductImgWhereUniqueInput
  }

  /**
   * ProductImg findFirst
   */
  export type ProductImgFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImg
     */
    select?: ProductImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImg
     */
    omit?: ProductImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImgInclude<ExtArgs> | null
    /**
     * Filter, which ProductImg to fetch.
     */
    where?: ProductImgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductImgs to fetch.
     */
    orderBy?: ProductImgOrderByWithRelationInput | ProductImgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductImgs.
     */
    cursor?: ProductImgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductImgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductImgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductImgs.
     */
    distinct?: ProductImgScalarFieldEnum | ProductImgScalarFieldEnum[]
  }

  /**
   * ProductImg findFirstOrThrow
   */
  export type ProductImgFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImg
     */
    select?: ProductImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImg
     */
    omit?: ProductImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImgInclude<ExtArgs> | null
    /**
     * Filter, which ProductImg to fetch.
     */
    where?: ProductImgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductImgs to fetch.
     */
    orderBy?: ProductImgOrderByWithRelationInput | ProductImgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductImgs.
     */
    cursor?: ProductImgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductImgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductImgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductImgs.
     */
    distinct?: ProductImgScalarFieldEnum | ProductImgScalarFieldEnum[]
  }

  /**
   * ProductImg findMany
   */
  export type ProductImgFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImg
     */
    select?: ProductImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImg
     */
    omit?: ProductImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImgInclude<ExtArgs> | null
    /**
     * Filter, which ProductImgs to fetch.
     */
    where?: ProductImgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductImgs to fetch.
     */
    orderBy?: ProductImgOrderByWithRelationInput | ProductImgOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductImgs.
     */
    cursor?: ProductImgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductImgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductImgs.
     */
    skip?: number
    distinct?: ProductImgScalarFieldEnum | ProductImgScalarFieldEnum[]
  }

  /**
   * ProductImg create
   */
  export type ProductImgCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImg
     */
    select?: ProductImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImg
     */
    omit?: ProductImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImgInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductImg.
     */
    data: XOR<ProductImgCreateInput, ProductImgUncheckedCreateInput>
  }

  /**
   * ProductImg createMany
   */
  export type ProductImgCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductImgs.
     */
    data: ProductImgCreateManyInput | ProductImgCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductImg createManyAndReturn
   */
  export type ProductImgCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImg
     */
    select?: ProductImgSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImg
     */
    omit?: ProductImgOmit<ExtArgs> | null
    /**
     * The data used to create many ProductImgs.
     */
    data: ProductImgCreateManyInput | ProductImgCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImgIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductImg update
   */
  export type ProductImgUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImg
     */
    select?: ProductImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImg
     */
    omit?: ProductImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImgInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductImg.
     */
    data: XOR<ProductImgUpdateInput, ProductImgUncheckedUpdateInput>
    /**
     * Choose, which ProductImg to update.
     */
    where: ProductImgWhereUniqueInput
  }

  /**
   * ProductImg updateMany
   */
  export type ProductImgUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductImgs.
     */
    data: XOR<ProductImgUpdateManyMutationInput, ProductImgUncheckedUpdateManyInput>
    /**
     * Filter which ProductImgs to update
     */
    where?: ProductImgWhereInput
    /**
     * Limit how many ProductImgs to update.
     */
    limit?: number
  }

  /**
   * ProductImg updateManyAndReturn
   */
  export type ProductImgUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImg
     */
    select?: ProductImgSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImg
     */
    omit?: ProductImgOmit<ExtArgs> | null
    /**
     * The data used to update ProductImgs.
     */
    data: XOR<ProductImgUpdateManyMutationInput, ProductImgUncheckedUpdateManyInput>
    /**
     * Filter which ProductImgs to update
     */
    where?: ProductImgWhereInput
    /**
     * Limit how many ProductImgs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImgIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductImg upsert
   */
  export type ProductImgUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImg
     */
    select?: ProductImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImg
     */
    omit?: ProductImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImgInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductImg to update in case it exists.
     */
    where: ProductImgWhereUniqueInput
    /**
     * In case the ProductImg found by the `where` argument doesn't exist, create a new ProductImg with this data.
     */
    create: XOR<ProductImgCreateInput, ProductImgUncheckedCreateInput>
    /**
     * In case the ProductImg was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductImgUpdateInput, ProductImgUncheckedUpdateInput>
  }

  /**
   * ProductImg delete
   */
  export type ProductImgDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImg
     */
    select?: ProductImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImg
     */
    omit?: ProductImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImgInclude<ExtArgs> | null
    /**
     * Filter which ProductImg to delete.
     */
    where: ProductImgWhereUniqueInput
  }

  /**
   * ProductImg deleteMany
   */
  export type ProductImgDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductImgs to delete
     */
    where?: ProductImgWhereInput
    /**
     * Limit how many ProductImgs to delete.
     */
    limit?: number
  }

  /**
   * ProductImg without action
   */
  export type ProductImgDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImg
     */
    select?: ProductImgSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImg
     */
    omit?: ProductImgOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImgInclude<ExtArgs> | null
  }


  /**
   * Model ProductCategory
   */

  export type AggregateProductCategory = {
    _count: ProductCategoryCountAggregateOutputType | null
    _avg: ProductCategoryAvgAggregateOutputType | null
    _sum: ProductCategorySumAggregateOutputType | null
    _min: ProductCategoryMinAggregateOutputType | null
    _max: ProductCategoryMaxAggregateOutputType | null
  }

  export type ProductCategoryAvgAggregateOutputType = {
    product_category_id: number | null
  }

  export type ProductCategorySumAggregateOutputType = {
    product_category_id: number | null
  }

  export type ProductCategoryMinAggregateOutputType = {
    product_category_id: number | null
    product_category_name: string | null
    deletedAt: Date | null
  }

  export type ProductCategoryMaxAggregateOutputType = {
    product_category_id: number | null
    product_category_name: string | null
    deletedAt: Date | null
  }

  export type ProductCategoryCountAggregateOutputType = {
    product_category_id: number
    product_category_name: number
    deletedAt: number
    _all: number
  }


  export type ProductCategoryAvgAggregateInputType = {
    product_category_id?: true
  }

  export type ProductCategorySumAggregateInputType = {
    product_category_id?: true
  }

  export type ProductCategoryMinAggregateInputType = {
    product_category_id?: true
    product_category_name?: true
    deletedAt?: true
  }

  export type ProductCategoryMaxAggregateInputType = {
    product_category_id?: true
    product_category_name?: true
    deletedAt?: true
  }

  export type ProductCategoryCountAggregateInputType = {
    product_category_id?: true
    product_category_name?: true
    deletedAt?: true
    _all?: true
  }

  export type ProductCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductCategory to aggregate.
     */
    where?: ProductCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCategories to fetch.
     */
    orderBy?: ProductCategoryOrderByWithRelationInput | ProductCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductCategories
    **/
    _count?: true | ProductCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductCategoryMaxAggregateInputType
  }

  export type GetProductCategoryAggregateType<T extends ProductCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateProductCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductCategory[P]>
      : GetScalarType<T[P], AggregateProductCategory[P]>
  }




  export type ProductCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductCategoryWhereInput
    orderBy?: ProductCategoryOrderByWithAggregationInput | ProductCategoryOrderByWithAggregationInput[]
    by: ProductCategoryScalarFieldEnum[] | ProductCategoryScalarFieldEnum
    having?: ProductCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCategoryCountAggregateInputType | true
    _avg?: ProductCategoryAvgAggregateInputType
    _sum?: ProductCategorySumAggregateInputType
    _min?: ProductCategoryMinAggregateInputType
    _max?: ProductCategoryMaxAggregateInputType
  }

  export type ProductCategoryGroupByOutputType = {
    product_category_id: number
    product_category_name: string
    deletedAt: Date | null
    _count: ProductCategoryCountAggregateOutputType | null
    _avg: ProductCategoryAvgAggregateOutputType | null
    _sum: ProductCategorySumAggregateOutputType | null
    _min: ProductCategoryMinAggregateOutputType | null
    _max: ProductCategoryMaxAggregateOutputType | null
  }

  type GetProductCategoryGroupByPayload<T extends ProductCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], ProductCategoryGroupByOutputType[P]>
        }
      >
    >


  export type ProductCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    product_category_id?: boolean
    product_category_name?: boolean
    deletedAt?: boolean
    product?: boolean | ProductCategory$productArgs<ExtArgs>
    _count?: boolean | ProductCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productCategory"]>

  export type ProductCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    product_category_id?: boolean
    product_category_name?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["productCategory"]>

  export type ProductCategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    product_category_id?: boolean
    product_category_name?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["productCategory"]>

  export type ProductCategorySelectScalar = {
    product_category_id?: boolean
    product_category_name?: boolean
    deletedAt?: boolean
  }

  export type ProductCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"product_category_id" | "product_category_name" | "deletedAt", ExtArgs["result"]["productCategory"]>
  export type ProductCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductCategory$productArgs<ExtArgs>
    _count?: boolean | ProductCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProductCategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProductCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductCategory"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      product_category_id: number
      product_category_name: string
      deletedAt: Date | null
    }, ExtArgs["result"]["productCategory"]>
    composites: {}
  }

  type ProductCategoryGetPayload<S extends boolean | null | undefined | ProductCategoryDefaultArgs> = $Result.GetResult<Prisma.$ProductCategoryPayload, S>

  type ProductCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCategoryCountAggregateInputType | true
    }

  export interface ProductCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductCategory'], meta: { name: 'ProductCategory' } }
    /**
     * Find zero or one ProductCategory that matches the filter.
     * @param {ProductCategoryFindUniqueArgs} args - Arguments to find a ProductCategory
     * @example
     * // Get one ProductCategory
     * const productCategory = await prisma.productCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductCategoryFindUniqueArgs>(args: SelectSubset<T, ProductCategoryFindUniqueArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ProductCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductCategoryFindUniqueOrThrowArgs} args - Arguments to find a ProductCategory
     * @example
     * // Get one ProductCategory
     * const productCategory = await prisma.productCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ProductCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryFindFirstArgs} args - Arguments to find a ProductCategory
     * @example
     * // Get one ProductCategory
     * const productCategory = await prisma.productCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductCategoryFindFirstArgs>(args?: SelectSubset<T, ProductCategoryFindFirstArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ProductCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryFindFirstOrThrowArgs} args - Arguments to find a ProductCategory
     * @example
     * // Get one ProductCategory
     * const productCategory = await prisma.productCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ProductCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductCategories
     * const productCategories = await prisma.productCategory.findMany()
     * 
     * // Get first 10 ProductCategories
     * const productCategories = await prisma.productCategory.findMany({ take: 10 })
     * 
     * // Only select the `product_category_id`
     * const productCategoryWithProduct_category_idOnly = await prisma.productCategory.findMany({ select: { product_category_id: true } })
     * 
     */
    findMany<T extends ProductCategoryFindManyArgs>(args?: SelectSubset<T, ProductCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ProductCategory.
     * @param {ProductCategoryCreateArgs} args - Arguments to create a ProductCategory.
     * @example
     * // Create one ProductCategory
     * const ProductCategory = await prisma.productCategory.create({
     *   data: {
     *     // ... data to create a ProductCategory
     *   }
     * })
     * 
     */
    create<T extends ProductCategoryCreateArgs>(args: SelectSubset<T, ProductCategoryCreateArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ProductCategories.
     * @param {ProductCategoryCreateManyArgs} args - Arguments to create many ProductCategories.
     * @example
     * // Create many ProductCategories
     * const productCategory = await prisma.productCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCategoryCreateManyArgs>(args?: SelectSubset<T, ProductCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductCategories and returns the data saved in the database.
     * @param {ProductCategoryCreateManyAndReturnArgs} args - Arguments to create many ProductCategories.
     * @example
     * // Create many ProductCategories
     * const productCategory = await prisma.productCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductCategories and only return the `product_category_id`
     * const productCategoryWithProduct_category_idOnly = await prisma.productCategory.createManyAndReturn({
     *   select: { product_category_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ProductCategory.
     * @param {ProductCategoryDeleteArgs} args - Arguments to delete one ProductCategory.
     * @example
     * // Delete one ProductCategory
     * const ProductCategory = await prisma.productCategory.delete({
     *   where: {
     *     // ... filter to delete one ProductCategory
     *   }
     * })
     * 
     */
    delete<T extends ProductCategoryDeleteArgs>(args: SelectSubset<T, ProductCategoryDeleteArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ProductCategory.
     * @param {ProductCategoryUpdateArgs} args - Arguments to update one ProductCategory.
     * @example
     * // Update one ProductCategory
     * const productCategory = await prisma.productCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductCategoryUpdateArgs>(args: SelectSubset<T, ProductCategoryUpdateArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ProductCategories.
     * @param {ProductCategoryDeleteManyArgs} args - Arguments to filter ProductCategories to delete.
     * @example
     * // Delete a few ProductCategories
     * const { count } = await prisma.productCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductCategoryDeleteManyArgs>(args?: SelectSubset<T, ProductCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductCategories
     * const productCategory = await prisma.productCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductCategoryUpdateManyArgs>(args: SelectSubset<T, ProductCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductCategories and returns the data updated in the database.
     * @param {ProductCategoryUpdateManyAndReturnArgs} args - Arguments to update many ProductCategories.
     * @example
     * // Update many ProductCategories
     * const productCategory = await prisma.productCategory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductCategories and only return the `product_category_id`
     * const productCategoryWithProduct_category_idOnly = await prisma.productCategory.updateManyAndReturn({
     *   select: { product_category_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductCategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one ProductCategory.
     * @param {ProductCategoryUpsertArgs} args - Arguments to update or create a ProductCategory.
     * @example
     * // Update or create a ProductCategory
     * const productCategory = await prisma.productCategory.upsert({
     *   create: {
     *     // ... data to create a ProductCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductCategory we want to update
     *   }
     * })
     */
    upsert<T extends ProductCategoryUpsertArgs>(args: SelectSubset<T, ProductCategoryUpsertArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ProductCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryCountArgs} args - Arguments to filter ProductCategories to count.
     * @example
     * // Count the number of ProductCategories
     * const count = await prisma.productCategory.count({
     *   where: {
     *     // ... the filter for the ProductCategories we want to count
     *   }
     * })
    **/
    count<T extends ProductCategoryCountArgs>(
      args?: Subset<T, ProductCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductCategoryAggregateArgs>(args: Subset<T, ProductCategoryAggregateArgs>): Prisma.PrismaPromise<GetProductCategoryAggregateType<T>>

    /**
     * Group by ProductCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductCategoryGroupByArgs['orderBy'] }
        : { orderBy?: ProductCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductCategory model
   */
  readonly fields: ProductCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductCategory$productArgs<ExtArgs> = {}>(args?: Subset<T, ProductCategory$productArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductCategory model
   */ 
  interface ProductCategoryFieldRefs {
    readonly product_category_id: FieldRef<"ProductCategory", 'Int'>
    readonly product_category_name: FieldRef<"ProductCategory", 'String'>
    readonly deletedAt: FieldRef<"ProductCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProductCategory findUnique
   */
  export type ProductCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ProductCategory to fetch.
     */
    where: ProductCategoryWhereUniqueInput
  }

  /**
   * ProductCategory findUniqueOrThrow
   */
  export type ProductCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ProductCategory to fetch.
     */
    where: ProductCategoryWhereUniqueInput
  }

  /**
   * ProductCategory findFirst
   */
  export type ProductCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ProductCategory to fetch.
     */
    where?: ProductCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCategories to fetch.
     */
    orderBy?: ProductCategoryOrderByWithRelationInput | ProductCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductCategories.
     */
    cursor?: ProductCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductCategories.
     */
    distinct?: ProductCategoryScalarFieldEnum | ProductCategoryScalarFieldEnum[]
  }

  /**
   * ProductCategory findFirstOrThrow
   */
  export type ProductCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ProductCategory to fetch.
     */
    where?: ProductCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCategories to fetch.
     */
    orderBy?: ProductCategoryOrderByWithRelationInput | ProductCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductCategories.
     */
    cursor?: ProductCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductCategories.
     */
    distinct?: ProductCategoryScalarFieldEnum | ProductCategoryScalarFieldEnum[]
  }

  /**
   * ProductCategory findMany
   */
  export type ProductCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ProductCategories to fetch.
     */
    where?: ProductCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCategories to fetch.
     */
    orderBy?: ProductCategoryOrderByWithRelationInput | ProductCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductCategories.
     */
    cursor?: ProductCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCategories.
     */
    skip?: number
    distinct?: ProductCategoryScalarFieldEnum | ProductCategoryScalarFieldEnum[]
  }

  /**
   * ProductCategory create
   */
  export type ProductCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductCategory.
     */
    data: XOR<ProductCategoryCreateInput, ProductCategoryUncheckedCreateInput>
  }

  /**
   * ProductCategory createMany
   */
  export type ProductCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductCategories.
     */
    data: ProductCategoryCreateManyInput | ProductCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductCategory createManyAndReturn
   */
  export type ProductCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * The data used to create many ProductCategories.
     */
    data: ProductCategoryCreateManyInput | ProductCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductCategory update
   */
  export type ProductCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductCategory.
     */
    data: XOR<ProductCategoryUpdateInput, ProductCategoryUncheckedUpdateInput>
    /**
     * Choose, which ProductCategory to update.
     */
    where: ProductCategoryWhereUniqueInput
  }

  /**
   * ProductCategory updateMany
   */
  export type ProductCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductCategories.
     */
    data: XOR<ProductCategoryUpdateManyMutationInput, ProductCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ProductCategories to update
     */
    where?: ProductCategoryWhereInput
    /**
     * Limit how many ProductCategories to update.
     */
    limit?: number
  }

  /**
   * ProductCategory updateManyAndReturn
   */
  export type ProductCategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * The data used to update ProductCategories.
     */
    data: XOR<ProductCategoryUpdateManyMutationInput, ProductCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ProductCategories to update
     */
    where?: ProductCategoryWhereInput
    /**
     * Limit how many ProductCategories to update.
     */
    limit?: number
  }

  /**
   * ProductCategory upsert
   */
  export type ProductCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductCategory to update in case it exists.
     */
    where: ProductCategoryWhereUniqueInput
    /**
     * In case the ProductCategory found by the `where` argument doesn't exist, create a new ProductCategory with this data.
     */
    create: XOR<ProductCategoryCreateInput, ProductCategoryUncheckedCreateInput>
    /**
     * In case the ProductCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductCategoryUpdateInput, ProductCategoryUncheckedUpdateInput>
  }

  /**
   * ProductCategory delete
   */
  export type ProductCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * Filter which ProductCategory to delete.
     */
    where: ProductCategoryWhereUniqueInput
  }

  /**
   * ProductCategory deleteMany
   */
  export type ProductCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductCategories to delete
     */
    where?: ProductCategoryWhereInput
    /**
     * Limit how many ProductCategories to delete.
     */
    limit?: number
  }

  /**
   * ProductCategory.product
   */
  export type ProductCategory$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * ProductCategory without action
   */
  export type ProductCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
  }


  /**
   * Model VoucherStore
   */

  export type AggregateVoucherStore = {
    _count: VoucherStoreCountAggregateOutputType | null
    _avg: VoucherStoreAvgAggregateOutputType | null
    _sum: VoucherStoreSumAggregateOutputType | null
    _min: VoucherStoreMinAggregateOutputType | null
    _max: VoucherStoreMaxAggregateOutputType | null
  }

  export type VoucherStoreAvgAggregateOutputType = {
    voucher_store_id: number | null
    voucher_store_amount_percentage: number | null
    voucher_store_exact_nominal: number | null
    voucher_store_minimum_buy: number | null
    voucher_store_maximum_nominal: number | null
    admin_responsible: number | null
    store_id: number | null
  }

  export type VoucherStoreSumAggregateOutputType = {
    voucher_store_id: number | null
    voucher_store_amount_percentage: number | null
    voucher_store_exact_nominal: number | null
    voucher_store_minimum_buy: number | null
    voucher_store_maximum_nominal: number | null
    admin_responsible: number | null
    store_id: number | null
  }

  export type VoucherStoreMinAggregateOutputType = {
    voucher_store_id: number | null
    voucher_store_code: string | null
    voucher_store_amount_percentage: number | null
    voucher_store_exact_nominal: number | null
    voucher_store_minimum_buy: number | null
    voucher_store_maximum_nominal: number | null
    voucher_store_startdate: Date | null
    voucher_store_enddate: Date | null
    created_at: Date | null
    admin_responsible: number | null
    store_id: number | null
  }

  export type VoucherStoreMaxAggregateOutputType = {
    voucher_store_id: number | null
    voucher_store_code: string | null
    voucher_store_amount_percentage: number | null
    voucher_store_exact_nominal: number | null
    voucher_store_minimum_buy: number | null
    voucher_store_maximum_nominal: number | null
    voucher_store_startdate: Date | null
    voucher_store_enddate: Date | null
    created_at: Date | null
    admin_responsible: number | null
    store_id: number | null
  }

  export type VoucherStoreCountAggregateOutputType = {
    voucher_store_id: number
    voucher_store_code: number
    voucher_store_amount_percentage: number
    voucher_store_exact_nominal: number
    voucher_store_minimum_buy: number
    voucher_store_maximum_nominal: number
    voucher_store_startdate: number
    voucher_store_enddate: number
    created_at: number
    admin_responsible: number
    store_id: number
    _all: number
  }


  export type VoucherStoreAvgAggregateInputType = {
    voucher_store_id?: true
    voucher_store_amount_percentage?: true
    voucher_store_exact_nominal?: true
    voucher_store_minimum_buy?: true
    voucher_store_maximum_nominal?: true
    admin_responsible?: true
    store_id?: true
  }

  export type VoucherStoreSumAggregateInputType = {
    voucher_store_id?: true
    voucher_store_amount_percentage?: true
    voucher_store_exact_nominal?: true
    voucher_store_minimum_buy?: true
    voucher_store_maximum_nominal?: true
    admin_responsible?: true
    store_id?: true
  }

  export type VoucherStoreMinAggregateInputType = {
    voucher_store_id?: true
    voucher_store_code?: true
    voucher_store_amount_percentage?: true
    voucher_store_exact_nominal?: true
    voucher_store_minimum_buy?: true
    voucher_store_maximum_nominal?: true
    voucher_store_startdate?: true
    voucher_store_enddate?: true
    created_at?: true
    admin_responsible?: true
    store_id?: true
  }

  export type VoucherStoreMaxAggregateInputType = {
    voucher_store_id?: true
    voucher_store_code?: true
    voucher_store_amount_percentage?: true
    voucher_store_exact_nominal?: true
    voucher_store_minimum_buy?: true
    voucher_store_maximum_nominal?: true
    voucher_store_startdate?: true
    voucher_store_enddate?: true
    created_at?: true
    admin_responsible?: true
    store_id?: true
  }

  export type VoucherStoreCountAggregateInputType = {
    voucher_store_id?: true
    voucher_store_code?: true
    voucher_store_amount_percentage?: true
    voucher_store_exact_nominal?: true
    voucher_store_minimum_buy?: true
    voucher_store_maximum_nominal?: true
    voucher_store_startdate?: true
    voucher_store_enddate?: true
    created_at?: true
    admin_responsible?: true
    store_id?: true
    _all?: true
  }

  export type VoucherStoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VoucherStore to aggregate.
     */
    where?: VoucherStoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoucherStores to fetch.
     */
    orderBy?: VoucherStoreOrderByWithRelationInput | VoucherStoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VoucherStoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoucherStores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoucherStores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VoucherStores
    **/
    _count?: true | VoucherStoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VoucherStoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VoucherStoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoucherStoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoucherStoreMaxAggregateInputType
  }

  export type GetVoucherStoreAggregateType<T extends VoucherStoreAggregateArgs> = {
        [P in keyof T & keyof AggregateVoucherStore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVoucherStore[P]>
      : GetScalarType<T[P], AggregateVoucherStore[P]>
  }




  export type VoucherStoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoucherStoreWhereInput
    orderBy?: VoucherStoreOrderByWithAggregationInput | VoucherStoreOrderByWithAggregationInput[]
    by: VoucherStoreScalarFieldEnum[] | VoucherStoreScalarFieldEnum
    having?: VoucherStoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoucherStoreCountAggregateInputType | true
    _avg?: VoucherStoreAvgAggregateInputType
    _sum?: VoucherStoreSumAggregateInputType
    _min?: VoucherStoreMinAggregateInputType
    _max?: VoucherStoreMaxAggregateInputType
  }

  export type VoucherStoreGroupByOutputType = {
    voucher_store_id: number
    voucher_store_code: string
    voucher_store_amount_percentage: number
    voucher_store_exact_nominal: number
    voucher_store_minimum_buy: number
    voucher_store_maximum_nominal: number
    voucher_store_startdate: Date
    voucher_store_enddate: Date
    created_at: Date
    admin_responsible: number
    store_id: number
    _count: VoucherStoreCountAggregateOutputType | null
    _avg: VoucherStoreAvgAggregateOutputType | null
    _sum: VoucherStoreSumAggregateOutputType | null
    _min: VoucherStoreMinAggregateOutputType | null
    _max: VoucherStoreMaxAggregateOutputType | null
  }

  type GetVoucherStoreGroupByPayload<T extends VoucherStoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VoucherStoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoucherStoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoucherStoreGroupByOutputType[P]>
            : GetScalarType<T[P], VoucherStoreGroupByOutputType[P]>
        }
      >
    >


  export type VoucherStoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    voucher_store_id?: boolean
    voucher_store_code?: boolean
    voucher_store_amount_percentage?: boolean
    voucher_store_exact_nominal?: boolean
    voucher_store_minimum_buy?: boolean
    voucher_store_maximum_nominal?: boolean
    voucher_store_startdate?: boolean
    voucher_store_enddate?: boolean
    created_at?: boolean
    admin_responsible?: boolean
    store_id?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    profiles?: boolean | VoucherStore$profilesArgs<ExtArgs>
    _count?: boolean | VoucherStoreCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voucherStore"]>

  export type VoucherStoreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    voucher_store_id?: boolean
    voucher_store_code?: boolean
    voucher_store_amount_percentage?: boolean
    voucher_store_exact_nominal?: boolean
    voucher_store_minimum_buy?: boolean
    voucher_store_maximum_nominal?: boolean
    voucher_store_startdate?: boolean
    voucher_store_enddate?: boolean
    created_at?: boolean
    admin_responsible?: boolean
    store_id?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voucherStore"]>

  export type VoucherStoreSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    voucher_store_id?: boolean
    voucher_store_code?: boolean
    voucher_store_amount_percentage?: boolean
    voucher_store_exact_nominal?: boolean
    voucher_store_minimum_buy?: boolean
    voucher_store_maximum_nominal?: boolean
    voucher_store_startdate?: boolean
    voucher_store_enddate?: boolean
    created_at?: boolean
    admin_responsible?: boolean
    store_id?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voucherStore"]>

  export type VoucherStoreSelectScalar = {
    voucher_store_id?: boolean
    voucher_store_code?: boolean
    voucher_store_amount_percentage?: boolean
    voucher_store_exact_nominal?: boolean
    voucher_store_minimum_buy?: boolean
    voucher_store_maximum_nominal?: boolean
    voucher_store_startdate?: boolean
    voucher_store_enddate?: boolean
    created_at?: boolean
    admin_responsible?: boolean
    store_id?: boolean
  }

  export type VoucherStoreOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"voucher_store_id" | "voucher_store_code" | "voucher_store_amount_percentage" | "voucher_store_exact_nominal" | "voucher_store_minimum_buy" | "voucher_store_maximum_nominal" | "voucher_store_startdate" | "voucher_store_enddate" | "created_at" | "admin_responsible" | "store_id", ExtArgs["result"]["voucherStore"]>
  export type VoucherStoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    profiles?: boolean | VoucherStore$profilesArgs<ExtArgs>
    _count?: boolean | VoucherStoreCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VoucherStoreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }
  export type VoucherStoreIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }

  export type $VoucherStorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VoucherStore"
    objects: {
      admin: Prisma.$AdminPayload<ExtArgs>
      store: Prisma.$StorePayload<ExtArgs>
      profiles: Prisma.$ProfilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      voucher_store_id: number
      voucher_store_code: string
      voucher_store_amount_percentage: number
      voucher_store_exact_nominal: number
      voucher_store_minimum_buy: number
      voucher_store_maximum_nominal: number
      voucher_store_startdate: Date
      voucher_store_enddate: Date
      created_at: Date
      admin_responsible: number
      store_id: number
    }, ExtArgs["result"]["voucherStore"]>
    composites: {}
  }

  type VoucherStoreGetPayload<S extends boolean | null | undefined | VoucherStoreDefaultArgs> = $Result.GetResult<Prisma.$VoucherStorePayload, S>

  type VoucherStoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VoucherStoreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VoucherStoreCountAggregateInputType | true
    }

  export interface VoucherStoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VoucherStore'], meta: { name: 'VoucherStore' } }
    /**
     * Find zero or one VoucherStore that matches the filter.
     * @param {VoucherStoreFindUniqueArgs} args - Arguments to find a VoucherStore
     * @example
     * // Get one VoucherStore
     * const voucherStore = await prisma.voucherStore.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VoucherStoreFindUniqueArgs>(args: SelectSubset<T, VoucherStoreFindUniqueArgs<ExtArgs>>): Prisma__VoucherStoreClient<$Result.GetResult<Prisma.$VoucherStorePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one VoucherStore that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VoucherStoreFindUniqueOrThrowArgs} args - Arguments to find a VoucherStore
     * @example
     * // Get one VoucherStore
     * const voucherStore = await prisma.voucherStore.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VoucherStoreFindUniqueOrThrowArgs>(args: SelectSubset<T, VoucherStoreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VoucherStoreClient<$Result.GetResult<Prisma.$VoucherStorePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first VoucherStore that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherStoreFindFirstArgs} args - Arguments to find a VoucherStore
     * @example
     * // Get one VoucherStore
     * const voucherStore = await prisma.voucherStore.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VoucherStoreFindFirstArgs>(args?: SelectSubset<T, VoucherStoreFindFirstArgs<ExtArgs>>): Prisma__VoucherStoreClient<$Result.GetResult<Prisma.$VoucherStorePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first VoucherStore that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherStoreFindFirstOrThrowArgs} args - Arguments to find a VoucherStore
     * @example
     * // Get one VoucherStore
     * const voucherStore = await prisma.voucherStore.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VoucherStoreFindFirstOrThrowArgs>(args?: SelectSubset<T, VoucherStoreFindFirstOrThrowArgs<ExtArgs>>): Prisma__VoucherStoreClient<$Result.GetResult<Prisma.$VoucherStorePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more VoucherStores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherStoreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VoucherStores
     * const voucherStores = await prisma.voucherStore.findMany()
     * 
     * // Get first 10 VoucherStores
     * const voucherStores = await prisma.voucherStore.findMany({ take: 10 })
     * 
     * // Only select the `voucher_store_id`
     * const voucherStoreWithVoucher_store_idOnly = await prisma.voucherStore.findMany({ select: { voucher_store_id: true } })
     * 
     */
    findMany<T extends VoucherStoreFindManyArgs>(args?: SelectSubset<T, VoucherStoreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoucherStorePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a VoucherStore.
     * @param {VoucherStoreCreateArgs} args - Arguments to create a VoucherStore.
     * @example
     * // Create one VoucherStore
     * const VoucherStore = await prisma.voucherStore.create({
     *   data: {
     *     // ... data to create a VoucherStore
     *   }
     * })
     * 
     */
    create<T extends VoucherStoreCreateArgs>(args: SelectSubset<T, VoucherStoreCreateArgs<ExtArgs>>): Prisma__VoucherStoreClient<$Result.GetResult<Prisma.$VoucherStorePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many VoucherStores.
     * @param {VoucherStoreCreateManyArgs} args - Arguments to create many VoucherStores.
     * @example
     * // Create many VoucherStores
     * const voucherStore = await prisma.voucherStore.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VoucherStoreCreateManyArgs>(args?: SelectSubset<T, VoucherStoreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VoucherStores and returns the data saved in the database.
     * @param {VoucherStoreCreateManyAndReturnArgs} args - Arguments to create many VoucherStores.
     * @example
     * // Create many VoucherStores
     * const voucherStore = await prisma.voucherStore.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VoucherStores and only return the `voucher_store_id`
     * const voucherStoreWithVoucher_store_idOnly = await prisma.voucherStore.createManyAndReturn({
     *   select: { voucher_store_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VoucherStoreCreateManyAndReturnArgs>(args?: SelectSubset<T, VoucherStoreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoucherStorePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a VoucherStore.
     * @param {VoucherStoreDeleteArgs} args - Arguments to delete one VoucherStore.
     * @example
     * // Delete one VoucherStore
     * const VoucherStore = await prisma.voucherStore.delete({
     *   where: {
     *     // ... filter to delete one VoucherStore
     *   }
     * })
     * 
     */
    delete<T extends VoucherStoreDeleteArgs>(args: SelectSubset<T, VoucherStoreDeleteArgs<ExtArgs>>): Prisma__VoucherStoreClient<$Result.GetResult<Prisma.$VoucherStorePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one VoucherStore.
     * @param {VoucherStoreUpdateArgs} args - Arguments to update one VoucherStore.
     * @example
     * // Update one VoucherStore
     * const voucherStore = await prisma.voucherStore.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VoucherStoreUpdateArgs>(args: SelectSubset<T, VoucherStoreUpdateArgs<ExtArgs>>): Prisma__VoucherStoreClient<$Result.GetResult<Prisma.$VoucherStorePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more VoucherStores.
     * @param {VoucherStoreDeleteManyArgs} args - Arguments to filter VoucherStores to delete.
     * @example
     * // Delete a few VoucherStores
     * const { count } = await prisma.voucherStore.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VoucherStoreDeleteManyArgs>(args?: SelectSubset<T, VoucherStoreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VoucherStores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherStoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VoucherStores
     * const voucherStore = await prisma.voucherStore.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VoucherStoreUpdateManyArgs>(args: SelectSubset<T, VoucherStoreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VoucherStores and returns the data updated in the database.
     * @param {VoucherStoreUpdateManyAndReturnArgs} args - Arguments to update many VoucherStores.
     * @example
     * // Update many VoucherStores
     * const voucherStore = await prisma.voucherStore.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VoucherStores and only return the `voucher_store_id`
     * const voucherStoreWithVoucher_store_idOnly = await prisma.voucherStore.updateManyAndReturn({
     *   select: { voucher_store_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VoucherStoreUpdateManyAndReturnArgs>(args: SelectSubset<T, VoucherStoreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoucherStorePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one VoucherStore.
     * @param {VoucherStoreUpsertArgs} args - Arguments to update or create a VoucherStore.
     * @example
     * // Update or create a VoucherStore
     * const voucherStore = await prisma.voucherStore.upsert({
     *   create: {
     *     // ... data to create a VoucherStore
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VoucherStore we want to update
     *   }
     * })
     */
    upsert<T extends VoucherStoreUpsertArgs>(args: SelectSubset<T, VoucherStoreUpsertArgs<ExtArgs>>): Prisma__VoucherStoreClient<$Result.GetResult<Prisma.$VoucherStorePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of VoucherStores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherStoreCountArgs} args - Arguments to filter VoucherStores to count.
     * @example
     * // Count the number of VoucherStores
     * const count = await prisma.voucherStore.count({
     *   where: {
     *     // ... the filter for the VoucherStores we want to count
     *   }
     * })
    **/
    count<T extends VoucherStoreCountArgs>(
      args?: Subset<T, VoucherStoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoucherStoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VoucherStore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherStoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoucherStoreAggregateArgs>(args: Subset<T, VoucherStoreAggregateArgs>): Prisma.PrismaPromise<GetVoucherStoreAggregateType<T>>

    /**
     * Group by VoucherStore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherStoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoucherStoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoucherStoreGroupByArgs['orderBy'] }
        : { orderBy?: VoucherStoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoucherStoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoucherStoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VoucherStore model
   */
  readonly fields: VoucherStoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VoucherStore.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VoucherStoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends AdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminDefaultArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    store<T extends StoreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoreDefaultArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    profiles<T extends VoucherStore$profilesArgs<ExtArgs> = {}>(args?: Subset<T, VoucherStore$profilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VoucherStore model
   */ 
  interface VoucherStoreFieldRefs {
    readonly voucher_store_id: FieldRef<"VoucherStore", 'Int'>
    readonly voucher_store_code: FieldRef<"VoucherStore", 'String'>
    readonly voucher_store_amount_percentage: FieldRef<"VoucherStore", 'Int'>
    readonly voucher_store_exact_nominal: FieldRef<"VoucherStore", 'Int'>
    readonly voucher_store_minimum_buy: FieldRef<"VoucherStore", 'Int'>
    readonly voucher_store_maximum_nominal: FieldRef<"VoucherStore", 'Int'>
    readonly voucher_store_startdate: FieldRef<"VoucherStore", 'DateTime'>
    readonly voucher_store_enddate: FieldRef<"VoucherStore", 'DateTime'>
    readonly created_at: FieldRef<"VoucherStore", 'DateTime'>
    readonly admin_responsible: FieldRef<"VoucherStore", 'Int'>
    readonly store_id: FieldRef<"VoucherStore", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * VoucherStore findUnique
   */
  export type VoucherStoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherStore
     */
    select?: VoucherStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherStore
     */
    omit?: VoucherStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherStoreInclude<ExtArgs> | null
    /**
     * Filter, which VoucherStore to fetch.
     */
    where: VoucherStoreWhereUniqueInput
  }

  /**
   * VoucherStore findUniqueOrThrow
   */
  export type VoucherStoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherStore
     */
    select?: VoucherStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherStore
     */
    omit?: VoucherStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherStoreInclude<ExtArgs> | null
    /**
     * Filter, which VoucherStore to fetch.
     */
    where: VoucherStoreWhereUniqueInput
  }

  /**
   * VoucherStore findFirst
   */
  export type VoucherStoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherStore
     */
    select?: VoucherStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherStore
     */
    omit?: VoucherStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherStoreInclude<ExtArgs> | null
    /**
     * Filter, which VoucherStore to fetch.
     */
    where?: VoucherStoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoucherStores to fetch.
     */
    orderBy?: VoucherStoreOrderByWithRelationInput | VoucherStoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VoucherStores.
     */
    cursor?: VoucherStoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoucherStores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoucherStores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VoucherStores.
     */
    distinct?: VoucherStoreScalarFieldEnum | VoucherStoreScalarFieldEnum[]
  }

  /**
   * VoucherStore findFirstOrThrow
   */
  export type VoucherStoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherStore
     */
    select?: VoucherStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherStore
     */
    omit?: VoucherStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherStoreInclude<ExtArgs> | null
    /**
     * Filter, which VoucherStore to fetch.
     */
    where?: VoucherStoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoucherStores to fetch.
     */
    orderBy?: VoucherStoreOrderByWithRelationInput | VoucherStoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VoucherStores.
     */
    cursor?: VoucherStoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoucherStores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoucherStores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VoucherStores.
     */
    distinct?: VoucherStoreScalarFieldEnum | VoucherStoreScalarFieldEnum[]
  }

  /**
   * VoucherStore findMany
   */
  export type VoucherStoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherStore
     */
    select?: VoucherStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherStore
     */
    omit?: VoucherStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherStoreInclude<ExtArgs> | null
    /**
     * Filter, which VoucherStores to fetch.
     */
    where?: VoucherStoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoucherStores to fetch.
     */
    orderBy?: VoucherStoreOrderByWithRelationInput | VoucherStoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VoucherStores.
     */
    cursor?: VoucherStoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoucherStores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoucherStores.
     */
    skip?: number
    distinct?: VoucherStoreScalarFieldEnum | VoucherStoreScalarFieldEnum[]
  }

  /**
   * VoucherStore create
   */
  export type VoucherStoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherStore
     */
    select?: VoucherStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherStore
     */
    omit?: VoucherStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherStoreInclude<ExtArgs> | null
    /**
     * The data needed to create a VoucherStore.
     */
    data: XOR<VoucherStoreCreateInput, VoucherStoreUncheckedCreateInput>
  }

  /**
   * VoucherStore createMany
   */
  export type VoucherStoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VoucherStores.
     */
    data: VoucherStoreCreateManyInput | VoucherStoreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VoucherStore createManyAndReturn
   */
  export type VoucherStoreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherStore
     */
    select?: VoucherStoreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherStore
     */
    omit?: VoucherStoreOmit<ExtArgs> | null
    /**
     * The data used to create many VoucherStores.
     */
    data: VoucherStoreCreateManyInput | VoucherStoreCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherStoreIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VoucherStore update
   */
  export type VoucherStoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherStore
     */
    select?: VoucherStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherStore
     */
    omit?: VoucherStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherStoreInclude<ExtArgs> | null
    /**
     * The data needed to update a VoucherStore.
     */
    data: XOR<VoucherStoreUpdateInput, VoucherStoreUncheckedUpdateInput>
    /**
     * Choose, which VoucherStore to update.
     */
    where: VoucherStoreWhereUniqueInput
  }

  /**
   * VoucherStore updateMany
   */
  export type VoucherStoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VoucherStores.
     */
    data: XOR<VoucherStoreUpdateManyMutationInput, VoucherStoreUncheckedUpdateManyInput>
    /**
     * Filter which VoucherStores to update
     */
    where?: VoucherStoreWhereInput
    /**
     * Limit how many VoucherStores to update.
     */
    limit?: number
  }

  /**
   * VoucherStore updateManyAndReturn
   */
  export type VoucherStoreUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherStore
     */
    select?: VoucherStoreSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherStore
     */
    omit?: VoucherStoreOmit<ExtArgs> | null
    /**
     * The data used to update VoucherStores.
     */
    data: XOR<VoucherStoreUpdateManyMutationInput, VoucherStoreUncheckedUpdateManyInput>
    /**
     * Filter which VoucherStores to update
     */
    where?: VoucherStoreWhereInput
    /**
     * Limit how many VoucherStores to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherStoreIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VoucherStore upsert
   */
  export type VoucherStoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherStore
     */
    select?: VoucherStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherStore
     */
    omit?: VoucherStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherStoreInclude<ExtArgs> | null
    /**
     * The filter to search for the VoucherStore to update in case it exists.
     */
    where: VoucherStoreWhereUniqueInput
    /**
     * In case the VoucherStore found by the `where` argument doesn't exist, create a new VoucherStore with this data.
     */
    create: XOR<VoucherStoreCreateInput, VoucherStoreUncheckedCreateInput>
    /**
     * In case the VoucherStore was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VoucherStoreUpdateInput, VoucherStoreUncheckedUpdateInput>
  }

  /**
   * VoucherStore delete
   */
  export type VoucherStoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherStore
     */
    select?: VoucherStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherStore
     */
    omit?: VoucherStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherStoreInclude<ExtArgs> | null
    /**
     * Filter which VoucherStore to delete.
     */
    where: VoucherStoreWhereUniqueInput
  }

  /**
   * VoucherStore deleteMany
   */
  export type VoucherStoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VoucherStores to delete
     */
    where?: VoucherStoreWhereInput
    /**
     * Limit how many VoucherStores to delete.
     */
    limit?: number
  }

  /**
   * VoucherStore.profiles
   */
  export type VoucherStore$profilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * VoucherStore without action
   */
  export type VoucherStoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherStore
     */
    select?: VoucherStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherStore
     */
    omit?: VoucherStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherStoreInclude<ExtArgs> | null
  }


  /**
   * Model VoucherOngkir
   */

  export type AggregateVoucherOngkir = {
    _count: VoucherOngkirCountAggregateOutputType | null
    _avg: VoucherOngkirAvgAggregateOutputType | null
    _sum: VoucherOngkirSumAggregateOutputType | null
    _min: VoucherOngkirMinAggregateOutputType | null
    _max: VoucherOngkirMaxAggregateOutputType | null
  }

  export type VoucherOngkirAvgAggregateOutputType = {
    voucher_ongkir_id: number | null
    voucher_ongkir_nominal: number | null
    admin_responsible: number | null
    store_id: number | null
  }

  export type VoucherOngkirSumAggregateOutputType = {
    voucher_ongkir_id: number | null
    voucher_ongkir_nominal: number | null
    admin_responsible: number | null
    store_id: number | null
  }

  export type VoucherOngkirMinAggregateOutputType = {
    voucher_ongkir_id: number | null
    voucher_ongkir_code: string | null
    voucher_ongkir_nominal: number | null
    voucher_ongkir_startdate: Date | null
    voucher_ongkir_enddate: Date | null
    created_at: Date | null
    admin_responsible: number | null
    store_id: number | null
  }

  export type VoucherOngkirMaxAggregateOutputType = {
    voucher_ongkir_id: number | null
    voucher_ongkir_code: string | null
    voucher_ongkir_nominal: number | null
    voucher_ongkir_startdate: Date | null
    voucher_ongkir_enddate: Date | null
    created_at: Date | null
    admin_responsible: number | null
    store_id: number | null
  }

  export type VoucherOngkirCountAggregateOutputType = {
    voucher_ongkir_id: number
    voucher_ongkir_code: number
    voucher_ongkir_nominal: number
    voucher_ongkir_startdate: number
    voucher_ongkir_enddate: number
    created_at: number
    admin_responsible: number
    store_id: number
    _all: number
  }


  export type VoucherOngkirAvgAggregateInputType = {
    voucher_ongkir_id?: true
    voucher_ongkir_nominal?: true
    admin_responsible?: true
    store_id?: true
  }

  export type VoucherOngkirSumAggregateInputType = {
    voucher_ongkir_id?: true
    voucher_ongkir_nominal?: true
    admin_responsible?: true
    store_id?: true
  }

  export type VoucherOngkirMinAggregateInputType = {
    voucher_ongkir_id?: true
    voucher_ongkir_code?: true
    voucher_ongkir_nominal?: true
    voucher_ongkir_startdate?: true
    voucher_ongkir_enddate?: true
    created_at?: true
    admin_responsible?: true
    store_id?: true
  }

  export type VoucherOngkirMaxAggregateInputType = {
    voucher_ongkir_id?: true
    voucher_ongkir_code?: true
    voucher_ongkir_nominal?: true
    voucher_ongkir_startdate?: true
    voucher_ongkir_enddate?: true
    created_at?: true
    admin_responsible?: true
    store_id?: true
  }

  export type VoucherOngkirCountAggregateInputType = {
    voucher_ongkir_id?: true
    voucher_ongkir_code?: true
    voucher_ongkir_nominal?: true
    voucher_ongkir_startdate?: true
    voucher_ongkir_enddate?: true
    created_at?: true
    admin_responsible?: true
    store_id?: true
    _all?: true
  }

  export type VoucherOngkirAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VoucherOngkir to aggregate.
     */
    where?: VoucherOngkirWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoucherOngkirs to fetch.
     */
    orderBy?: VoucherOngkirOrderByWithRelationInput | VoucherOngkirOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VoucherOngkirWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoucherOngkirs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoucherOngkirs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VoucherOngkirs
    **/
    _count?: true | VoucherOngkirCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VoucherOngkirAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VoucherOngkirSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoucherOngkirMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoucherOngkirMaxAggregateInputType
  }

  export type GetVoucherOngkirAggregateType<T extends VoucherOngkirAggregateArgs> = {
        [P in keyof T & keyof AggregateVoucherOngkir]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVoucherOngkir[P]>
      : GetScalarType<T[P], AggregateVoucherOngkir[P]>
  }




  export type VoucherOngkirGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoucherOngkirWhereInput
    orderBy?: VoucherOngkirOrderByWithAggregationInput | VoucherOngkirOrderByWithAggregationInput[]
    by: VoucherOngkirScalarFieldEnum[] | VoucherOngkirScalarFieldEnum
    having?: VoucherOngkirScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoucherOngkirCountAggregateInputType | true
    _avg?: VoucherOngkirAvgAggregateInputType
    _sum?: VoucherOngkirSumAggregateInputType
    _min?: VoucherOngkirMinAggregateInputType
    _max?: VoucherOngkirMaxAggregateInputType
  }

  export type VoucherOngkirGroupByOutputType = {
    voucher_ongkir_id: number
    voucher_ongkir_code: string
    voucher_ongkir_nominal: number
    voucher_ongkir_startdate: Date
    voucher_ongkir_enddate: Date
    created_at: Date
    admin_responsible: number
    store_id: number
    _count: VoucherOngkirCountAggregateOutputType | null
    _avg: VoucherOngkirAvgAggregateOutputType | null
    _sum: VoucherOngkirSumAggregateOutputType | null
    _min: VoucherOngkirMinAggregateOutputType | null
    _max: VoucherOngkirMaxAggregateOutputType | null
  }

  type GetVoucherOngkirGroupByPayload<T extends VoucherOngkirGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VoucherOngkirGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoucherOngkirGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoucherOngkirGroupByOutputType[P]>
            : GetScalarType<T[P], VoucherOngkirGroupByOutputType[P]>
        }
      >
    >


  export type VoucherOngkirSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    voucher_ongkir_id?: boolean
    voucher_ongkir_code?: boolean
    voucher_ongkir_nominal?: boolean
    voucher_ongkir_startdate?: boolean
    voucher_ongkir_enddate?: boolean
    created_at?: boolean
    admin_responsible?: boolean
    store_id?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voucherOngkir"]>

  export type VoucherOngkirSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    voucher_ongkir_id?: boolean
    voucher_ongkir_code?: boolean
    voucher_ongkir_nominal?: boolean
    voucher_ongkir_startdate?: boolean
    voucher_ongkir_enddate?: boolean
    created_at?: boolean
    admin_responsible?: boolean
    store_id?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voucherOngkir"]>

  export type VoucherOngkirSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    voucher_ongkir_id?: boolean
    voucher_ongkir_code?: boolean
    voucher_ongkir_nominal?: boolean
    voucher_ongkir_startdate?: boolean
    voucher_ongkir_enddate?: boolean
    created_at?: boolean
    admin_responsible?: boolean
    store_id?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voucherOngkir"]>

  export type VoucherOngkirSelectScalar = {
    voucher_ongkir_id?: boolean
    voucher_ongkir_code?: boolean
    voucher_ongkir_nominal?: boolean
    voucher_ongkir_startdate?: boolean
    voucher_ongkir_enddate?: boolean
    created_at?: boolean
    admin_responsible?: boolean
    store_id?: boolean
  }

  export type VoucherOngkirOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"voucher_ongkir_id" | "voucher_ongkir_code" | "voucher_ongkir_nominal" | "voucher_ongkir_startdate" | "voucher_ongkir_enddate" | "created_at" | "admin_responsible" | "store_id", ExtArgs["result"]["voucherOngkir"]>
  export type VoucherOngkirInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }
  export type VoucherOngkirIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }
  export type VoucherOngkirIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
  }

  export type $VoucherOngkirPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VoucherOngkir"
    objects: {
      admin: Prisma.$AdminPayload<ExtArgs>
      store: Prisma.$StorePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      voucher_ongkir_id: number
      voucher_ongkir_code: string
      voucher_ongkir_nominal: number
      voucher_ongkir_startdate: Date
      voucher_ongkir_enddate: Date
      created_at: Date
      admin_responsible: number
      store_id: number
    }, ExtArgs["result"]["voucherOngkir"]>
    composites: {}
  }

  type VoucherOngkirGetPayload<S extends boolean | null | undefined | VoucherOngkirDefaultArgs> = $Result.GetResult<Prisma.$VoucherOngkirPayload, S>

  type VoucherOngkirCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VoucherOngkirFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VoucherOngkirCountAggregateInputType | true
    }

  export interface VoucherOngkirDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VoucherOngkir'], meta: { name: 'VoucherOngkir' } }
    /**
     * Find zero or one VoucherOngkir that matches the filter.
     * @param {VoucherOngkirFindUniqueArgs} args - Arguments to find a VoucherOngkir
     * @example
     * // Get one VoucherOngkir
     * const voucherOngkir = await prisma.voucherOngkir.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VoucherOngkirFindUniqueArgs>(args: SelectSubset<T, VoucherOngkirFindUniqueArgs<ExtArgs>>): Prisma__VoucherOngkirClient<$Result.GetResult<Prisma.$VoucherOngkirPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one VoucherOngkir that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VoucherOngkirFindUniqueOrThrowArgs} args - Arguments to find a VoucherOngkir
     * @example
     * // Get one VoucherOngkir
     * const voucherOngkir = await prisma.voucherOngkir.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VoucherOngkirFindUniqueOrThrowArgs>(args: SelectSubset<T, VoucherOngkirFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VoucherOngkirClient<$Result.GetResult<Prisma.$VoucherOngkirPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first VoucherOngkir that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherOngkirFindFirstArgs} args - Arguments to find a VoucherOngkir
     * @example
     * // Get one VoucherOngkir
     * const voucherOngkir = await prisma.voucherOngkir.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VoucherOngkirFindFirstArgs>(args?: SelectSubset<T, VoucherOngkirFindFirstArgs<ExtArgs>>): Prisma__VoucherOngkirClient<$Result.GetResult<Prisma.$VoucherOngkirPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first VoucherOngkir that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherOngkirFindFirstOrThrowArgs} args - Arguments to find a VoucherOngkir
     * @example
     * // Get one VoucherOngkir
     * const voucherOngkir = await prisma.voucherOngkir.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VoucherOngkirFindFirstOrThrowArgs>(args?: SelectSubset<T, VoucherOngkirFindFirstOrThrowArgs<ExtArgs>>): Prisma__VoucherOngkirClient<$Result.GetResult<Prisma.$VoucherOngkirPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more VoucherOngkirs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherOngkirFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VoucherOngkirs
     * const voucherOngkirs = await prisma.voucherOngkir.findMany()
     * 
     * // Get first 10 VoucherOngkirs
     * const voucherOngkirs = await prisma.voucherOngkir.findMany({ take: 10 })
     * 
     * // Only select the `voucher_ongkir_id`
     * const voucherOngkirWithVoucher_ongkir_idOnly = await prisma.voucherOngkir.findMany({ select: { voucher_ongkir_id: true } })
     * 
     */
    findMany<T extends VoucherOngkirFindManyArgs>(args?: SelectSubset<T, VoucherOngkirFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoucherOngkirPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a VoucherOngkir.
     * @param {VoucherOngkirCreateArgs} args - Arguments to create a VoucherOngkir.
     * @example
     * // Create one VoucherOngkir
     * const VoucherOngkir = await prisma.voucherOngkir.create({
     *   data: {
     *     // ... data to create a VoucherOngkir
     *   }
     * })
     * 
     */
    create<T extends VoucherOngkirCreateArgs>(args: SelectSubset<T, VoucherOngkirCreateArgs<ExtArgs>>): Prisma__VoucherOngkirClient<$Result.GetResult<Prisma.$VoucherOngkirPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many VoucherOngkirs.
     * @param {VoucherOngkirCreateManyArgs} args - Arguments to create many VoucherOngkirs.
     * @example
     * // Create many VoucherOngkirs
     * const voucherOngkir = await prisma.voucherOngkir.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VoucherOngkirCreateManyArgs>(args?: SelectSubset<T, VoucherOngkirCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VoucherOngkirs and returns the data saved in the database.
     * @param {VoucherOngkirCreateManyAndReturnArgs} args - Arguments to create many VoucherOngkirs.
     * @example
     * // Create many VoucherOngkirs
     * const voucherOngkir = await prisma.voucherOngkir.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VoucherOngkirs and only return the `voucher_ongkir_id`
     * const voucherOngkirWithVoucher_ongkir_idOnly = await prisma.voucherOngkir.createManyAndReturn({
     *   select: { voucher_ongkir_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VoucherOngkirCreateManyAndReturnArgs>(args?: SelectSubset<T, VoucherOngkirCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoucherOngkirPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a VoucherOngkir.
     * @param {VoucherOngkirDeleteArgs} args - Arguments to delete one VoucherOngkir.
     * @example
     * // Delete one VoucherOngkir
     * const VoucherOngkir = await prisma.voucherOngkir.delete({
     *   where: {
     *     // ... filter to delete one VoucherOngkir
     *   }
     * })
     * 
     */
    delete<T extends VoucherOngkirDeleteArgs>(args: SelectSubset<T, VoucherOngkirDeleteArgs<ExtArgs>>): Prisma__VoucherOngkirClient<$Result.GetResult<Prisma.$VoucherOngkirPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one VoucherOngkir.
     * @param {VoucherOngkirUpdateArgs} args - Arguments to update one VoucherOngkir.
     * @example
     * // Update one VoucherOngkir
     * const voucherOngkir = await prisma.voucherOngkir.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VoucherOngkirUpdateArgs>(args: SelectSubset<T, VoucherOngkirUpdateArgs<ExtArgs>>): Prisma__VoucherOngkirClient<$Result.GetResult<Prisma.$VoucherOngkirPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more VoucherOngkirs.
     * @param {VoucherOngkirDeleteManyArgs} args - Arguments to filter VoucherOngkirs to delete.
     * @example
     * // Delete a few VoucherOngkirs
     * const { count } = await prisma.voucherOngkir.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VoucherOngkirDeleteManyArgs>(args?: SelectSubset<T, VoucherOngkirDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VoucherOngkirs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherOngkirUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VoucherOngkirs
     * const voucherOngkir = await prisma.voucherOngkir.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VoucherOngkirUpdateManyArgs>(args: SelectSubset<T, VoucherOngkirUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VoucherOngkirs and returns the data updated in the database.
     * @param {VoucherOngkirUpdateManyAndReturnArgs} args - Arguments to update many VoucherOngkirs.
     * @example
     * // Update many VoucherOngkirs
     * const voucherOngkir = await prisma.voucherOngkir.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VoucherOngkirs and only return the `voucher_ongkir_id`
     * const voucherOngkirWithVoucher_ongkir_idOnly = await prisma.voucherOngkir.updateManyAndReturn({
     *   select: { voucher_ongkir_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VoucherOngkirUpdateManyAndReturnArgs>(args: SelectSubset<T, VoucherOngkirUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoucherOngkirPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one VoucherOngkir.
     * @param {VoucherOngkirUpsertArgs} args - Arguments to update or create a VoucherOngkir.
     * @example
     * // Update or create a VoucherOngkir
     * const voucherOngkir = await prisma.voucherOngkir.upsert({
     *   create: {
     *     // ... data to create a VoucherOngkir
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VoucherOngkir we want to update
     *   }
     * })
     */
    upsert<T extends VoucherOngkirUpsertArgs>(args: SelectSubset<T, VoucherOngkirUpsertArgs<ExtArgs>>): Prisma__VoucherOngkirClient<$Result.GetResult<Prisma.$VoucherOngkirPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of VoucherOngkirs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherOngkirCountArgs} args - Arguments to filter VoucherOngkirs to count.
     * @example
     * // Count the number of VoucherOngkirs
     * const count = await prisma.voucherOngkir.count({
     *   where: {
     *     // ... the filter for the VoucherOngkirs we want to count
     *   }
     * })
    **/
    count<T extends VoucherOngkirCountArgs>(
      args?: Subset<T, VoucherOngkirCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoucherOngkirCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VoucherOngkir.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherOngkirAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoucherOngkirAggregateArgs>(args: Subset<T, VoucherOngkirAggregateArgs>): Prisma.PrismaPromise<GetVoucherOngkirAggregateType<T>>

    /**
     * Group by VoucherOngkir.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherOngkirGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoucherOngkirGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoucherOngkirGroupByArgs['orderBy'] }
        : { orderBy?: VoucherOngkirGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoucherOngkirGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoucherOngkirGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VoucherOngkir model
   */
  readonly fields: VoucherOngkirFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VoucherOngkir.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VoucherOngkirClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends AdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminDefaultArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    store<T extends StoreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoreDefaultArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VoucherOngkir model
   */ 
  interface VoucherOngkirFieldRefs {
    readonly voucher_ongkir_id: FieldRef<"VoucherOngkir", 'Int'>
    readonly voucher_ongkir_code: FieldRef<"VoucherOngkir", 'String'>
    readonly voucher_ongkir_nominal: FieldRef<"VoucherOngkir", 'Int'>
    readonly voucher_ongkir_startdate: FieldRef<"VoucherOngkir", 'DateTime'>
    readonly voucher_ongkir_enddate: FieldRef<"VoucherOngkir", 'DateTime'>
    readonly created_at: FieldRef<"VoucherOngkir", 'DateTime'>
    readonly admin_responsible: FieldRef<"VoucherOngkir", 'Int'>
    readonly store_id: FieldRef<"VoucherOngkir", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * VoucherOngkir findUnique
   */
  export type VoucherOngkirFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherOngkir
     */
    select?: VoucherOngkirSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherOngkir
     */
    omit?: VoucherOngkirOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherOngkirInclude<ExtArgs> | null
    /**
     * Filter, which VoucherOngkir to fetch.
     */
    where: VoucherOngkirWhereUniqueInput
  }

  /**
   * VoucherOngkir findUniqueOrThrow
   */
  export type VoucherOngkirFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherOngkir
     */
    select?: VoucherOngkirSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherOngkir
     */
    omit?: VoucherOngkirOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherOngkirInclude<ExtArgs> | null
    /**
     * Filter, which VoucherOngkir to fetch.
     */
    where: VoucherOngkirWhereUniqueInput
  }

  /**
   * VoucherOngkir findFirst
   */
  export type VoucherOngkirFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherOngkir
     */
    select?: VoucherOngkirSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherOngkir
     */
    omit?: VoucherOngkirOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherOngkirInclude<ExtArgs> | null
    /**
     * Filter, which VoucherOngkir to fetch.
     */
    where?: VoucherOngkirWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoucherOngkirs to fetch.
     */
    orderBy?: VoucherOngkirOrderByWithRelationInput | VoucherOngkirOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VoucherOngkirs.
     */
    cursor?: VoucherOngkirWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoucherOngkirs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoucherOngkirs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VoucherOngkirs.
     */
    distinct?: VoucherOngkirScalarFieldEnum | VoucherOngkirScalarFieldEnum[]
  }

  /**
   * VoucherOngkir findFirstOrThrow
   */
  export type VoucherOngkirFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherOngkir
     */
    select?: VoucherOngkirSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherOngkir
     */
    omit?: VoucherOngkirOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherOngkirInclude<ExtArgs> | null
    /**
     * Filter, which VoucherOngkir to fetch.
     */
    where?: VoucherOngkirWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoucherOngkirs to fetch.
     */
    orderBy?: VoucherOngkirOrderByWithRelationInput | VoucherOngkirOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VoucherOngkirs.
     */
    cursor?: VoucherOngkirWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoucherOngkirs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoucherOngkirs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VoucherOngkirs.
     */
    distinct?: VoucherOngkirScalarFieldEnum | VoucherOngkirScalarFieldEnum[]
  }

  /**
   * VoucherOngkir findMany
   */
  export type VoucherOngkirFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherOngkir
     */
    select?: VoucherOngkirSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherOngkir
     */
    omit?: VoucherOngkirOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherOngkirInclude<ExtArgs> | null
    /**
     * Filter, which VoucherOngkirs to fetch.
     */
    where?: VoucherOngkirWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoucherOngkirs to fetch.
     */
    orderBy?: VoucherOngkirOrderByWithRelationInput | VoucherOngkirOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VoucherOngkirs.
     */
    cursor?: VoucherOngkirWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoucherOngkirs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoucherOngkirs.
     */
    skip?: number
    distinct?: VoucherOngkirScalarFieldEnum | VoucherOngkirScalarFieldEnum[]
  }

  /**
   * VoucherOngkir create
   */
  export type VoucherOngkirCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherOngkir
     */
    select?: VoucherOngkirSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherOngkir
     */
    omit?: VoucherOngkirOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherOngkirInclude<ExtArgs> | null
    /**
     * The data needed to create a VoucherOngkir.
     */
    data: XOR<VoucherOngkirCreateInput, VoucherOngkirUncheckedCreateInput>
  }

  /**
   * VoucherOngkir createMany
   */
  export type VoucherOngkirCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VoucherOngkirs.
     */
    data: VoucherOngkirCreateManyInput | VoucherOngkirCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VoucherOngkir createManyAndReturn
   */
  export type VoucherOngkirCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherOngkir
     */
    select?: VoucherOngkirSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherOngkir
     */
    omit?: VoucherOngkirOmit<ExtArgs> | null
    /**
     * The data used to create many VoucherOngkirs.
     */
    data: VoucherOngkirCreateManyInput | VoucherOngkirCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherOngkirIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VoucherOngkir update
   */
  export type VoucherOngkirUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherOngkir
     */
    select?: VoucherOngkirSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherOngkir
     */
    omit?: VoucherOngkirOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherOngkirInclude<ExtArgs> | null
    /**
     * The data needed to update a VoucherOngkir.
     */
    data: XOR<VoucherOngkirUpdateInput, VoucherOngkirUncheckedUpdateInput>
    /**
     * Choose, which VoucherOngkir to update.
     */
    where: VoucherOngkirWhereUniqueInput
  }

  /**
   * VoucherOngkir updateMany
   */
  export type VoucherOngkirUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VoucherOngkirs.
     */
    data: XOR<VoucherOngkirUpdateManyMutationInput, VoucherOngkirUncheckedUpdateManyInput>
    /**
     * Filter which VoucherOngkirs to update
     */
    where?: VoucherOngkirWhereInput
    /**
     * Limit how many VoucherOngkirs to update.
     */
    limit?: number
  }

  /**
   * VoucherOngkir updateManyAndReturn
   */
  export type VoucherOngkirUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherOngkir
     */
    select?: VoucherOngkirSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherOngkir
     */
    omit?: VoucherOngkirOmit<ExtArgs> | null
    /**
     * The data used to update VoucherOngkirs.
     */
    data: XOR<VoucherOngkirUpdateManyMutationInput, VoucherOngkirUncheckedUpdateManyInput>
    /**
     * Filter which VoucherOngkirs to update
     */
    where?: VoucherOngkirWhereInput
    /**
     * Limit how many VoucherOngkirs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherOngkirIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VoucherOngkir upsert
   */
  export type VoucherOngkirUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherOngkir
     */
    select?: VoucherOngkirSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherOngkir
     */
    omit?: VoucherOngkirOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherOngkirInclude<ExtArgs> | null
    /**
     * The filter to search for the VoucherOngkir to update in case it exists.
     */
    where: VoucherOngkirWhereUniqueInput
    /**
     * In case the VoucherOngkir found by the `where` argument doesn't exist, create a new VoucherOngkir with this data.
     */
    create: XOR<VoucherOngkirCreateInput, VoucherOngkirUncheckedCreateInput>
    /**
     * In case the VoucherOngkir was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VoucherOngkirUpdateInput, VoucherOngkirUncheckedUpdateInput>
  }

  /**
   * VoucherOngkir delete
   */
  export type VoucherOngkirDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherOngkir
     */
    select?: VoucherOngkirSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherOngkir
     */
    omit?: VoucherOngkirOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherOngkirInclude<ExtArgs> | null
    /**
     * Filter which VoucherOngkir to delete.
     */
    where: VoucherOngkirWhereUniqueInput
  }

  /**
   * VoucherOngkir deleteMany
   */
  export type VoucherOngkirDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VoucherOngkirs to delete
     */
    where?: VoucherOngkirWhereInput
    /**
     * Limit how many VoucherOngkirs to delete.
     */
    limit?: number
  }

  /**
   * VoucherOngkir without action
   */
  export type VoucherOngkirDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherOngkir
     */
    select?: VoucherOngkirSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherOngkir
     */
    omit?: VoucherOngkirOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherOngkirInclude<ExtArgs> | null
  }


  /**
   * Model VoucherProduct
   */

  export type AggregateVoucherProduct = {
    _count: VoucherProductCountAggregateOutputType | null
    _avg: VoucherProductAvgAggregateOutputType | null
    _sum: VoucherProductSumAggregateOutputType | null
    _min: VoucherProductMinAggregateOutputType | null
    _max: VoucherProductMaxAggregateOutputType | null
  }

  export type VoucherProductAvgAggregateOutputType = {
    voucher_product_id: number | null
    voucher_product_nominal: number | null
    admin_responsible: number | null
    product_id: number | null
  }

  export type VoucherProductSumAggregateOutputType = {
    voucher_product_id: number | null
    voucher_product_nominal: number | null
    admin_responsible: number | null
    product_id: number | null
  }

  export type VoucherProductMinAggregateOutputType = {
    voucher_product_id: number | null
    voucher_product_code: string | null
    voucher_product_nominal: number | null
    voucher_product_startdate: Date | null
    voucher_product_enddate: Date | null
    created_at: Date | null
    admin_responsible: number | null
    product_id: number | null
  }

  export type VoucherProductMaxAggregateOutputType = {
    voucher_product_id: number | null
    voucher_product_code: string | null
    voucher_product_nominal: number | null
    voucher_product_startdate: Date | null
    voucher_product_enddate: Date | null
    created_at: Date | null
    admin_responsible: number | null
    product_id: number | null
  }

  export type VoucherProductCountAggregateOutputType = {
    voucher_product_id: number
    voucher_product_code: number
    voucher_product_nominal: number
    voucher_product_startdate: number
    voucher_product_enddate: number
    created_at: number
    admin_responsible: number
    product_id: number
    _all: number
  }


  export type VoucherProductAvgAggregateInputType = {
    voucher_product_id?: true
    voucher_product_nominal?: true
    admin_responsible?: true
    product_id?: true
  }

  export type VoucherProductSumAggregateInputType = {
    voucher_product_id?: true
    voucher_product_nominal?: true
    admin_responsible?: true
    product_id?: true
  }

  export type VoucherProductMinAggregateInputType = {
    voucher_product_id?: true
    voucher_product_code?: true
    voucher_product_nominal?: true
    voucher_product_startdate?: true
    voucher_product_enddate?: true
    created_at?: true
    admin_responsible?: true
    product_id?: true
  }

  export type VoucherProductMaxAggregateInputType = {
    voucher_product_id?: true
    voucher_product_code?: true
    voucher_product_nominal?: true
    voucher_product_startdate?: true
    voucher_product_enddate?: true
    created_at?: true
    admin_responsible?: true
    product_id?: true
  }

  export type VoucherProductCountAggregateInputType = {
    voucher_product_id?: true
    voucher_product_code?: true
    voucher_product_nominal?: true
    voucher_product_startdate?: true
    voucher_product_enddate?: true
    created_at?: true
    admin_responsible?: true
    product_id?: true
    _all?: true
  }

  export type VoucherProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VoucherProduct to aggregate.
     */
    where?: VoucherProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoucherProducts to fetch.
     */
    orderBy?: VoucherProductOrderByWithRelationInput | VoucherProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VoucherProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoucherProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoucherProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VoucherProducts
    **/
    _count?: true | VoucherProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VoucherProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VoucherProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoucherProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoucherProductMaxAggregateInputType
  }

  export type GetVoucherProductAggregateType<T extends VoucherProductAggregateArgs> = {
        [P in keyof T & keyof AggregateVoucherProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVoucherProduct[P]>
      : GetScalarType<T[P], AggregateVoucherProduct[P]>
  }




  export type VoucherProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoucherProductWhereInput
    orderBy?: VoucherProductOrderByWithAggregationInput | VoucherProductOrderByWithAggregationInput[]
    by: VoucherProductScalarFieldEnum[] | VoucherProductScalarFieldEnum
    having?: VoucherProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoucherProductCountAggregateInputType | true
    _avg?: VoucherProductAvgAggregateInputType
    _sum?: VoucherProductSumAggregateInputType
    _min?: VoucherProductMinAggregateInputType
    _max?: VoucherProductMaxAggregateInputType
  }

  export type VoucherProductGroupByOutputType = {
    voucher_product_id: number
    voucher_product_code: string
    voucher_product_nominal: number
    voucher_product_startdate: Date
    voucher_product_enddate: Date
    created_at: Date
    admin_responsible: number
    product_id: number
    _count: VoucherProductCountAggregateOutputType | null
    _avg: VoucherProductAvgAggregateOutputType | null
    _sum: VoucherProductSumAggregateOutputType | null
    _min: VoucherProductMinAggregateOutputType | null
    _max: VoucherProductMaxAggregateOutputType | null
  }

  type GetVoucherProductGroupByPayload<T extends VoucherProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VoucherProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoucherProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoucherProductGroupByOutputType[P]>
            : GetScalarType<T[P], VoucherProductGroupByOutputType[P]>
        }
      >
    >


  export type VoucherProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    voucher_product_id?: boolean
    voucher_product_code?: boolean
    voucher_product_nominal?: boolean
    voucher_product_startdate?: boolean
    voucher_product_enddate?: boolean
    created_at?: boolean
    admin_responsible?: boolean
    product_id?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voucherProduct"]>

  export type VoucherProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    voucher_product_id?: boolean
    voucher_product_code?: boolean
    voucher_product_nominal?: boolean
    voucher_product_startdate?: boolean
    voucher_product_enddate?: boolean
    created_at?: boolean
    admin_responsible?: boolean
    product_id?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voucherProduct"]>

  export type VoucherProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    voucher_product_id?: boolean
    voucher_product_code?: boolean
    voucher_product_nominal?: boolean
    voucher_product_startdate?: boolean
    voucher_product_enddate?: boolean
    created_at?: boolean
    admin_responsible?: boolean
    product_id?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voucherProduct"]>

  export type VoucherProductSelectScalar = {
    voucher_product_id?: boolean
    voucher_product_code?: boolean
    voucher_product_nominal?: boolean
    voucher_product_startdate?: boolean
    voucher_product_enddate?: boolean
    created_at?: boolean
    admin_responsible?: boolean
    product_id?: boolean
  }

  export type VoucherProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"voucher_product_id" | "voucher_product_code" | "voucher_product_nominal" | "voucher_product_startdate" | "voucher_product_enddate" | "created_at" | "admin_responsible" | "product_id", ExtArgs["result"]["voucherProduct"]>
  export type VoucherProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type VoucherProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type VoucherProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $VoucherProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VoucherProduct"
    objects: {
      admin: Prisma.$AdminPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      voucher_product_id: number
      voucher_product_code: string
      voucher_product_nominal: number
      voucher_product_startdate: Date
      voucher_product_enddate: Date
      created_at: Date
      admin_responsible: number
      product_id: number
    }, ExtArgs["result"]["voucherProduct"]>
    composites: {}
  }

  type VoucherProductGetPayload<S extends boolean | null | undefined | VoucherProductDefaultArgs> = $Result.GetResult<Prisma.$VoucherProductPayload, S>

  type VoucherProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VoucherProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VoucherProductCountAggregateInputType | true
    }

  export interface VoucherProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VoucherProduct'], meta: { name: 'VoucherProduct' } }
    /**
     * Find zero or one VoucherProduct that matches the filter.
     * @param {VoucherProductFindUniqueArgs} args - Arguments to find a VoucherProduct
     * @example
     * // Get one VoucherProduct
     * const voucherProduct = await prisma.voucherProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VoucherProductFindUniqueArgs>(args: SelectSubset<T, VoucherProductFindUniqueArgs<ExtArgs>>): Prisma__VoucherProductClient<$Result.GetResult<Prisma.$VoucherProductPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one VoucherProduct that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VoucherProductFindUniqueOrThrowArgs} args - Arguments to find a VoucherProduct
     * @example
     * // Get one VoucherProduct
     * const voucherProduct = await prisma.voucherProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VoucherProductFindUniqueOrThrowArgs>(args: SelectSubset<T, VoucherProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VoucherProductClient<$Result.GetResult<Prisma.$VoucherProductPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first VoucherProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherProductFindFirstArgs} args - Arguments to find a VoucherProduct
     * @example
     * // Get one VoucherProduct
     * const voucherProduct = await prisma.voucherProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VoucherProductFindFirstArgs>(args?: SelectSubset<T, VoucherProductFindFirstArgs<ExtArgs>>): Prisma__VoucherProductClient<$Result.GetResult<Prisma.$VoucherProductPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first VoucherProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherProductFindFirstOrThrowArgs} args - Arguments to find a VoucherProduct
     * @example
     * // Get one VoucherProduct
     * const voucherProduct = await prisma.voucherProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VoucherProductFindFirstOrThrowArgs>(args?: SelectSubset<T, VoucherProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__VoucherProductClient<$Result.GetResult<Prisma.$VoucherProductPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more VoucherProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VoucherProducts
     * const voucherProducts = await prisma.voucherProduct.findMany()
     * 
     * // Get first 10 VoucherProducts
     * const voucherProducts = await prisma.voucherProduct.findMany({ take: 10 })
     * 
     * // Only select the `voucher_product_id`
     * const voucherProductWithVoucher_product_idOnly = await prisma.voucherProduct.findMany({ select: { voucher_product_id: true } })
     * 
     */
    findMany<T extends VoucherProductFindManyArgs>(args?: SelectSubset<T, VoucherProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoucherProductPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a VoucherProduct.
     * @param {VoucherProductCreateArgs} args - Arguments to create a VoucherProduct.
     * @example
     * // Create one VoucherProduct
     * const VoucherProduct = await prisma.voucherProduct.create({
     *   data: {
     *     // ... data to create a VoucherProduct
     *   }
     * })
     * 
     */
    create<T extends VoucherProductCreateArgs>(args: SelectSubset<T, VoucherProductCreateArgs<ExtArgs>>): Prisma__VoucherProductClient<$Result.GetResult<Prisma.$VoucherProductPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many VoucherProducts.
     * @param {VoucherProductCreateManyArgs} args - Arguments to create many VoucherProducts.
     * @example
     * // Create many VoucherProducts
     * const voucherProduct = await prisma.voucherProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VoucherProductCreateManyArgs>(args?: SelectSubset<T, VoucherProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VoucherProducts and returns the data saved in the database.
     * @param {VoucherProductCreateManyAndReturnArgs} args - Arguments to create many VoucherProducts.
     * @example
     * // Create many VoucherProducts
     * const voucherProduct = await prisma.voucherProduct.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VoucherProducts and only return the `voucher_product_id`
     * const voucherProductWithVoucher_product_idOnly = await prisma.voucherProduct.createManyAndReturn({
     *   select: { voucher_product_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VoucherProductCreateManyAndReturnArgs>(args?: SelectSubset<T, VoucherProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoucherProductPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a VoucherProduct.
     * @param {VoucherProductDeleteArgs} args - Arguments to delete one VoucherProduct.
     * @example
     * // Delete one VoucherProduct
     * const VoucherProduct = await prisma.voucherProduct.delete({
     *   where: {
     *     // ... filter to delete one VoucherProduct
     *   }
     * })
     * 
     */
    delete<T extends VoucherProductDeleteArgs>(args: SelectSubset<T, VoucherProductDeleteArgs<ExtArgs>>): Prisma__VoucherProductClient<$Result.GetResult<Prisma.$VoucherProductPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one VoucherProduct.
     * @param {VoucherProductUpdateArgs} args - Arguments to update one VoucherProduct.
     * @example
     * // Update one VoucherProduct
     * const voucherProduct = await prisma.voucherProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VoucherProductUpdateArgs>(args: SelectSubset<T, VoucherProductUpdateArgs<ExtArgs>>): Prisma__VoucherProductClient<$Result.GetResult<Prisma.$VoucherProductPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more VoucherProducts.
     * @param {VoucherProductDeleteManyArgs} args - Arguments to filter VoucherProducts to delete.
     * @example
     * // Delete a few VoucherProducts
     * const { count } = await prisma.voucherProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VoucherProductDeleteManyArgs>(args?: SelectSubset<T, VoucherProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VoucherProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VoucherProducts
     * const voucherProduct = await prisma.voucherProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VoucherProductUpdateManyArgs>(args: SelectSubset<T, VoucherProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VoucherProducts and returns the data updated in the database.
     * @param {VoucherProductUpdateManyAndReturnArgs} args - Arguments to update many VoucherProducts.
     * @example
     * // Update many VoucherProducts
     * const voucherProduct = await prisma.voucherProduct.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VoucherProducts and only return the `voucher_product_id`
     * const voucherProductWithVoucher_product_idOnly = await prisma.voucherProduct.updateManyAndReturn({
     *   select: { voucher_product_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VoucherProductUpdateManyAndReturnArgs>(args: SelectSubset<T, VoucherProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VoucherProductPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one VoucherProduct.
     * @param {VoucherProductUpsertArgs} args - Arguments to update or create a VoucherProduct.
     * @example
     * // Update or create a VoucherProduct
     * const voucherProduct = await prisma.voucherProduct.upsert({
     *   create: {
     *     // ... data to create a VoucherProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VoucherProduct we want to update
     *   }
     * })
     */
    upsert<T extends VoucherProductUpsertArgs>(args: SelectSubset<T, VoucherProductUpsertArgs<ExtArgs>>): Prisma__VoucherProductClient<$Result.GetResult<Prisma.$VoucherProductPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of VoucherProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherProductCountArgs} args - Arguments to filter VoucherProducts to count.
     * @example
     * // Count the number of VoucherProducts
     * const count = await prisma.voucherProduct.count({
     *   where: {
     *     // ... the filter for the VoucherProducts we want to count
     *   }
     * })
    **/
    count<T extends VoucherProductCountArgs>(
      args?: Subset<T, VoucherProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoucherProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VoucherProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoucherProductAggregateArgs>(args: Subset<T, VoucherProductAggregateArgs>): Prisma.PrismaPromise<GetVoucherProductAggregateType<T>>

    /**
     * Group by VoucherProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoucherProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoucherProductGroupByArgs['orderBy'] }
        : { orderBy?: VoucherProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoucherProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoucherProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VoucherProduct model
   */
  readonly fields: VoucherProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VoucherProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VoucherProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends AdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminDefaultArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VoucherProduct model
   */ 
  interface VoucherProductFieldRefs {
    readonly voucher_product_id: FieldRef<"VoucherProduct", 'Int'>
    readonly voucher_product_code: FieldRef<"VoucherProduct", 'String'>
    readonly voucher_product_nominal: FieldRef<"VoucherProduct", 'Int'>
    readonly voucher_product_startdate: FieldRef<"VoucherProduct", 'DateTime'>
    readonly voucher_product_enddate: FieldRef<"VoucherProduct", 'DateTime'>
    readonly created_at: FieldRef<"VoucherProduct", 'DateTime'>
    readonly admin_responsible: FieldRef<"VoucherProduct", 'Int'>
    readonly product_id: FieldRef<"VoucherProduct", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * VoucherProduct findUnique
   */
  export type VoucherProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherProduct
     */
    select?: VoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherProduct
     */
    omit?: VoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherProductInclude<ExtArgs> | null
    /**
     * Filter, which VoucherProduct to fetch.
     */
    where: VoucherProductWhereUniqueInput
  }

  /**
   * VoucherProduct findUniqueOrThrow
   */
  export type VoucherProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherProduct
     */
    select?: VoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherProduct
     */
    omit?: VoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherProductInclude<ExtArgs> | null
    /**
     * Filter, which VoucherProduct to fetch.
     */
    where: VoucherProductWhereUniqueInput
  }

  /**
   * VoucherProduct findFirst
   */
  export type VoucherProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherProduct
     */
    select?: VoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherProduct
     */
    omit?: VoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherProductInclude<ExtArgs> | null
    /**
     * Filter, which VoucherProduct to fetch.
     */
    where?: VoucherProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoucherProducts to fetch.
     */
    orderBy?: VoucherProductOrderByWithRelationInput | VoucherProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VoucherProducts.
     */
    cursor?: VoucherProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoucherProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoucherProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VoucherProducts.
     */
    distinct?: VoucherProductScalarFieldEnum | VoucherProductScalarFieldEnum[]
  }

  /**
   * VoucherProduct findFirstOrThrow
   */
  export type VoucherProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherProduct
     */
    select?: VoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherProduct
     */
    omit?: VoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherProductInclude<ExtArgs> | null
    /**
     * Filter, which VoucherProduct to fetch.
     */
    where?: VoucherProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoucherProducts to fetch.
     */
    orderBy?: VoucherProductOrderByWithRelationInput | VoucherProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VoucherProducts.
     */
    cursor?: VoucherProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoucherProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoucherProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VoucherProducts.
     */
    distinct?: VoucherProductScalarFieldEnum | VoucherProductScalarFieldEnum[]
  }

  /**
   * VoucherProduct findMany
   */
  export type VoucherProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherProduct
     */
    select?: VoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherProduct
     */
    omit?: VoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherProductInclude<ExtArgs> | null
    /**
     * Filter, which VoucherProducts to fetch.
     */
    where?: VoucherProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VoucherProducts to fetch.
     */
    orderBy?: VoucherProductOrderByWithRelationInput | VoucherProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VoucherProducts.
     */
    cursor?: VoucherProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VoucherProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VoucherProducts.
     */
    skip?: number
    distinct?: VoucherProductScalarFieldEnum | VoucherProductScalarFieldEnum[]
  }

  /**
   * VoucherProduct create
   */
  export type VoucherProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherProduct
     */
    select?: VoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherProduct
     */
    omit?: VoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherProductInclude<ExtArgs> | null
    /**
     * The data needed to create a VoucherProduct.
     */
    data: XOR<VoucherProductCreateInput, VoucherProductUncheckedCreateInput>
  }

  /**
   * VoucherProduct createMany
   */
  export type VoucherProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VoucherProducts.
     */
    data: VoucherProductCreateManyInput | VoucherProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VoucherProduct createManyAndReturn
   */
  export type VoucherProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherProduct
     */
    select?: VoucherProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherProduct
     */
    omit?: VoucherProductOmit<ExtArgs> | null
    /**
     * The data used to create many VoucherProducts.
     */
    data: VoucherProductCreateManyInput | VoucherProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VoucherProduct update
   */
  export type VoucherProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherProduct
     */
    select?: VoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherProduct
     */
    omit?: VoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherProductInclude<ExtArgs> | null
    /**
     * The data needed to update a VoucherProduct.
     */
    data: XOR<VoucherProductUpdateInput, VoucherProductUncheckedUpdateInput>
    /**
     * Choose, which VoucherProduct to update.
     */
    where: VoucherProductWhereUniqueInput
  }

  /**
   * VoucherProduct updateMany
   */
  export type VoucherProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VoucherProducts.
     */
    data: XOR<VoucherProductUpdateManyMutationInput, VoucherProductUncheckedUpdateManyInput>
    /**
     * Filter which VoucherProducts to update
     */
    where?: VoucherProductWhereInput
    /**
     * Limit how many VoucherProducts to update.
     */
    limit?: number
  }

  /**
   * VoucherProduct updateManyAndReturn
   */
  export type VoucherProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherProduct
     */
    select?: VoucherProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherProduct
     */
    omit?: VoucherProductOmit<ExtArgs> | null
    /**
     * The data used to update VoucherProducts.
     */
    data: XOR<VoucherProductUpdateManyMutationInput, VoucherProductUncheckedUpdateManyInput>
    /**
     * Filter which VoucherProducts to update
     */
    where?: VoucherProductWhereInput
    /**
     * Limit how many VoucherProducts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VoucherProduct upsert
   */
  export type VoucherProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherProduct
     */
    select?: VoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherProduct
     */
    omit?: VoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherProductInclude<ExtArgs> | null
    /**
     * The filter to search for the VoucherProduct to update in case it exists.
     */
    where: VoucherProductWhereUniqueInput
    /**
     * In case the VoucherProduct found by the `where` argument doesn't exist, create a new VoucherProduct with this data.
     */
    create: XOR<VoucherProductCreateInput, VoucherProductUncheckedCreateInput>
    /**
     * In case the VoucherProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VoucherProductUpdateInput, VoucherProductUncheckedUpdateInput>
  }

  /**
   * VoucherProduct delete
   */
  export type VoucherProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherProduct
     */
    select?: VoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherProduct
     */
    omit?: VoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherProductInclude<ExtArgs> | null
    /**
     * Filter which VoucherProduct to delete.
     */
    where: VoucherProductWhereUniqueInput
  }

  /**
   * VoucherProduct deleteMany
   */
  export type VoucherProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VoucherProducts to delete
     */
    where?: VoucherProductWhereInput
    /**
     * Limit how many VoucherProducts to delete.
     */
    limit?: number
  }

  /**
   * VoucherProduct without action
   */
  export type VoucherProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VoucherProduct
     */
    select?: VoucherProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VoucherProduct
     */
    omit?: VoucherProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoucherProductInclude<ExtArgs> | null
  }


  /**
   * Model Discount
   */

  export type AggregateDiscount = {
    _count: DiscountCountAggregateOutputType | null
    _avg: DiscountAvgAggregateOutputType | null
    _sum: DiscountSumAggregateOutputType | null
    _min: DiscountMinAggregateOutputType | null
    _max: DiscountMaxAggregateOutputType | null
  }

  export type DiscountAvgAggregateOutputType = {
    discount_id: number | null
    discount_amount: number | null
  }

  export type DiscountSumAggregateOutputType = {
    discount_id: number | null
    discount_amount: number | null
  }

  export type DiscountMinAggregateOutputType = {
    discount_id: number | null
    discount_product: string | null
    discount_amount: number | null
    created_at: Date | null
    discount_startdate: Date | null
    discount_enddate: Date | null
    isActive: boolean | null
  }

  export type DiscountMaxAggregateOutputType = {
    discount_id: number | null
    discount_product: string | null
    discount_amount: number | null
    created_at: Date | null
    discount_startdate: Date | null
    discount_enddate: Date | null
    isActive: boolean | null
  }

  export type DiscountCountAggregateOutputType = {
    discount_id: number
    discount_product: number
    discount_amount: number
    created_at: number
    discount_startdate: number
    discount_enddate: number
    isActive: number
    _all: number
  }


  export type DiscountAvgAggregateInputType = {
    discount_id?: true
    discount_amount?: true
  }

  export type DiscountSumAggregateInputType = {
    discount_id?: true
    discount_amount?: true
  }

  export type DiscountMinAggregateInputType = {
    discount_id?: true
    discount_product?: true
    discount_amount?: true
    created_at?: true
    discount_startdate?: true
    discount_enddate?: true
    isActive?: true
  }

  export type DiscountMaxAggregateInputType = {
    discount_id?: true
    discount_product?: true
    discount_amount?: true
    created_at?: true
    discount_startdate?: true
    discount_enddate?: true
    isActive?: true
  }

  export type DiscountCountAggregateInputType = {
    discount_id?: true
    discount_product?: true
    discount_amount?: true
    created_at?: true
    discount_startdate?: true
    discount_enddate?: true
    isActive?: true
    _all?: true
  }

  export type DiscountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Discount to aggregate.
     */
    where?: DiscountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Discounts to fetch.
     */
    orderBy?: DiscountOrderByWithRelationInput | DiscountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiscountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Discounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Discounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Discounts
    **/
    _count?: true | DiscountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DiscountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DiscountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiscountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiscountMaxAggregateInputType
  }

  export type GetDiscountAggregateType<T extends DiscountAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscount[P]>
      : GetScalarType<T[P], AggregateDiscount[P]>
  }




  export type DiscountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscountWhereInput
    orderBy?: DiscountOrderByWithAggregationInput | DiscountOrderByWithAggregationInput[]
    by: DiscountScalarFieldEnum[] | DiscountScalarFieldEnum
    having?: DiscountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiscountCountAggregateInputType | true
    _avg?: DiscountAvgAggregateInputType
    _sum?: DiscountSumAggregateInputType
    _min?: DiscountMinAggregateInputType
    _max?: DiscountMaxAggregateInputType
  }

  export type DiscountGroupByOutputType = {
    discount_id: number
    discount_product: string
    discount_amount: number
    created_at: Date
    discount_startdate: Date
    discount_enddate: Date
    isActive: boolean
    _count: DiscountCountAggregateOutputType | null
    _avg: DiscountAvgAggregateOutputType | null
    _sum: DiscountSumAggregateOutputType | null
    _min: DiscountMinAggregateOutputType | null
    _max: DiscountMaxAggregateOutputType | null
  }

  type GetDiscountGroupByPayload<T extends DiscountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiscountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiscountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiscountGroupByOutputType[P]>
            : GetScalarType<T[P], DiscountGroupByOutputType[P]>
        }
      >
    >


  export type DiscountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    discount_id?: boolean
    discount_product?: boolean
    discount_amount?: boolean
    created_at?: boolean
    discount_startdate?: boolean
    discount_enddate?: boolean
    isActive?: boolean
    orders?: boolean | Discount$ordersArgs<ExtArgs>
    _count?: boolean | DiscountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discount"]>

  export type DiscountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    discount_id?: boolean
    discount_product?: boolean
    discount_amount?: boolean
    created_at?: boolean
    discount_startdate?: boolean
    discount_enddate?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["discount"]>

  export type DiscountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    discount_id?: boolean
    discount_product?: boolean
    discount_amount?: boolean
    created_at?: boolean
    discount_startdate?: boolean
    discount_enddate?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["discount"]>

  export type DiscountSelectScalar = {
    discount_id?: boolean
    discount_product?: boolean
    discount_amount?: boolean
    created_at?: boolean
    discount_startdate?: boolean
    discount_enddate?: boolean
    isActive?: boolean
  }

  export type DiscountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"discount_id" | "discount_product" | "discount_amount" | "created_at" | "discount_startdate" | "discount_enddate" | "isActive", ExtArgs["result"]["discount"]>
  export type DiscountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | Discount$ordersArgs<ExtArgs>
    _count?: boolean | DiscountCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DiscountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DiscountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DiscountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Discount"
    objects: {
      orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      discount_id: number
      discount_product: string
      discount_amount: number
      created_at: Date
      discount_startdate: Date
      discount_enddate: Date
      isActive: boolean
    }, ExtArgs["result"]["discount"]>
    composites: {}
  }

  type DiscountGetPayload<S extends boolean | null | undefined | DiscountDefaultArgs> = $Result.GetResult<Prisma.$DiscountPayload, S>

  type DiscountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DiscountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DiscountCountAggregateInputType | true
    }

  export interface DiscountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Discount'], meta: { name: 'Discount' } }
    /**
     * Find zero or one Discount that matches the filter.
     * @param {DiscountFindUniqueArgs} args - Arguments to find a Discount
     * @example
     * // Get one Discount
     * const discount = await prisma.discount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DiscountFindUniqueArgs>(args: SelectSubset<T, DiscountFindUniqueArgs<ExtArgs>>): Prisma__DiscountClient<$Result.GetResult<Prisma.$DiscountPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Discount that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DiscountFindUniqueOrThrowArgs} args - Arguments to find a Discount
     * @example
     * // Get one Discount
     * const discount = await prisma.discount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DiscountFindUniqueOrThrowArgs>(args: SelectSubset<T, DiscountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DiscountClient<$Result.GetResult<Prisma.$DiscountPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Discount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscountFindFirstArgs} args - Arguments to find a Discount
     * @example
     * // Get one Discount
     * const discount = await prisma.discount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DiscountFindFirstArgs>(args?: SelectSubset<T, DiscountFindFirstArgs<ExtArgs>>): Prisma__DiscountClient<$Result.GetResult<Prisma.$DiscountPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Discount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscountFindFirstOrThrowArgs} args - Arguments to find a Discount
     * @example
     * // Get one Discount
     * const discount = await prisma.discount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DiscountFindFirstOrThrowArgs>(args?: SelectSubset<T, DiscountFindFirstOrThrowArgs<ExtArgs>>): Prisma__DiscountClient<$Result.GetResult<Prisma.$DiscountPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Discounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Discounts
     * const discounts = await prisma.discount.findMany()
     * 
     * // Get first 10 Discounts
     * const discounts = await prisma.discount.findMany({ take: 10 })
     * 
     * // Only select the `discount_id`
     * const discountWithDiscount_idOnly = await prisma.discount.findMany({ select: { discount_id: true } })
     * 
     */
    findMany<T extends DiscountFindManyArgs>(args?: SelectSubset<T, DiscountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscountPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Discount.
     * @param {DiscountCreateArgs} args - Arguments to create a Discount.
     * @example
     * // Create one Discount
     * const Discount = await prisma.discount.create({
     *   data: {
     *     // ... data to create a Discount
     *   }
     * })
     * 
     */
    create<T extends DiscountCreateArgs>(args: SelectSubset<T, DiscountCreateArgs<ExtArgs>>): Prisma__DiscountClient<$Result.GetResult<Prisma.$DiscountPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Discounts.
     * @param {DiscountCreateManyArgs} args - Arguments to create many Discounts.
     * @example
     * // Create many Discounts
     * const discount = await prisma.discount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DiscountCreateManyArgs>(args?: SelectSubset<T, DiscountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Discounts and returns the data saved in the database.
     * @param {DiscountCreateManyAndReturnArgs} args - Arguments to create many Discounts.
     * @example
     * // Create many Discounts
     * const discount = await prisma.discount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Discounts and only return the `discount_id`
     * const discountWithDiscount_idOnly = await prisma.discount.createManyAndReturn({
     *   select: { discount_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DiscountCreateManyAndReturnArgs>(args?: SelectSubset<T, DiscountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscountPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Discount.
     * @param {DiscountDeleteArgs} args - Arguments to delete one Discount.
     * @example
     * // Delete one Discount
     * const Discount = await prisma.discount.delete({
     *   where: {
     *     // ... filter to delete one Discount
     *   }
     * })
     * 
     */
    delete<T extends DiscountDeleteArgs>(args: SelectSubset<T, DiscountDeleteArgs<ExtArgs>>): Prisma__DiscountClient<$Result.GetResult<Prisma.$DiscountPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Discount.
     * @param {DiscountUpdateArgs} args - Arguments to update one Discount.
     * @example
     * // Update one Discount
     * const discount = await prisma.discount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DiscountUpdateArgs>(args: SelectSubset<T, DiscountUpdateArgs<ExtArgs>>): Prisma__DiscountClient<$Result.GetResult<Prisma.$DiscountPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Discounts.
     * @param {DiscountDeleteManyArgs} args - Arguments to filter Discounts to delete.
     * @example
     * // Delete a few Discounts
     * const { count } = await prisma.discount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DiscountDeleteManyArgs>(args?: SelectSubset<T, DiscountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Discounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Discounts
     * const discount = await prisma.discount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DiscountUpdateManyArgs>(args: SelectSubset<T, DiscountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Discounts and returns the data updated in the database.
     * @param {DiscountUpdateManyAndReturnArgs} args - Arguments to update many Discounts.
     * @example
     * // Update many Discounts
     * const discount = await prisma.discount.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Discounts and only return the `discount_id`
     * const discountWithDiscount_idOnly = await prisma.discount.updateManyAndReturn({
     *   select: { discount_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DiscountUpdateManyAndReturnArgs>(args: SelectSubset<T, DiscountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscountPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Discount.
     * @param {DiscountUpsertArgs} args - Arguments to update or create a Discount.
     * @example
     * // Update or create a Discount
     * const discount = await prisma.discount.upsert({
     *   create: {
     *     // ... data to create a Discount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Discount we want to update
     *   }
     * })
     */
    upsert<T extends DiscountUpsertArgs>(args: SelectSubset<T, DiscountUpsertArgs<ExtArgs>>): Prisma__DiscountClient<$Result.GetResult<Prisma.$DiscountPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Discounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscountCountArgs} args - Arguments to filter Discounts to count.
     * @example
     * // Count the number of Discounts
     * const count = await prisma.discount.count({
     *   where: {
     *     // ... the filter for the Discounts we want to count
     *   }
     * })
    **/
    count<T extends DiscountCountArgs>(
      args?: Subset<T, DiscountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiscountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Discount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiscountAggregateArgs>(args: Subset<T, DiscountAggregateArgs>): Prisma.PrismaPromise<GetDiscountAggregateType<T>>

    /**
     * Group by Discount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiscountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiscountGroupByArgs['orderBy'] }
        : { orderBy?: DiscountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiscountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Discount model
   */
  readonly fields: DiscountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Discount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiscountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends Discount$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Discount$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Discount model
   */ 
  interface DiscountFieldRefs {
    readonly discount_id: FieldRef<"Discount", 'Int'>
    readonly discount_product: FieldRef<"Discount", 'String'>
    readonly discount_amount: FieldRef<"Discount", 'Int'>
    readonly created_at: FieldRef<"Discount", 'DateTime'>
    readonly discount_startdate: FieldRef<"Discount", 'DateTime'>
    readonly discount_enddate: FieldRef<"Discount", 'DateTime'>
    readonly isActive: FieldRef<"Discount", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Discount findUnique
   */
  export type DiscountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discount
     */
    select?: DiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discount
     */
    omit?: DiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscountInclude<ExtArgs> | null
    /**
     * Filter, which Discount to fetch.
     */
    where: DiscountWhereUniqueInput
  }

  /**
   * Discount findUniqueOrThrow
   */
  export type DiscountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discount
     */
    select?: DiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discount
     */
    omit?: DiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscountInclude<ExtArgs> | null
    /**
     * Filter, which Discount to fetch.
     */
    where: DiscountWhereUniqueInput
  }

  /**
   * Discount findFirst
   */
  export type DiscountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discount
     */
    select?: DiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discount
     */
    omit?: DiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscountInclude<ExtArgs> | null
    /**
     * Filter, which Discount to fetch.
     */
    where?: DiscountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Discounts to fetch.
     */
    orderBy?: DiscountOrderByWithRelationInput | DiscountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Discounts.
     */
    cursor?: DiscountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Discounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Discounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Discounts.
     */
    distinct?: DiscountScalarFieldEnum | DiscountScalarFieldEnum[]
  }

  /**
   * Discount findFirstOrThrow
   */
  export type DiscountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discount
     */
    select?: DiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discount
     */
    omit?: DiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscountInclude<ExtArgs> | null
    /**
     * Filter, which Discount to fetch.
     */
    where?: DiscountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Discounts to fetch.
     */
    orderBy?: DiscountOrderByWithRelationInput | DiscountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Discounts.
     */
    cursor?: DiscountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Discounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Discounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Discounts.
     */
    distinct?: DiscountScalarFieldEnum | DiscountScalarFieldEnum[]
  }

  /**
   * Discount findMany
   */
  export type DiscountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discount
     */
    select?: DiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discount
     */
    omit?: DiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscountInclude<ExtArgs> | null
    /**
     * Filter, which Discounts to fetch.
     */
    where?: DiscountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Discounts to fetch.
     */
    orderBy?: DiscountOrderByWithRelationInput | DiscountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Discounts.
     */
    cursor?: DiscountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Discounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Discounts.
     */
    skip?: number
    distinct?: DiscountScalarFieldEnum | DiscountScalarFieldEnum[]
  }

  /**
   * Discount create
   */
  export type DiscountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discount
     */
    select?: DiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discount
     */
    omit?: DiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscountInclude<ExtArgs> | null
    /**
     * The data needed to create a Discount.
     */
    data: XOR<DiscountCreateInput, DiscountUncheckedCreateInput>
  }

  /**
   * Discount createMany
   */
  export type DiscountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Discounts.
     */
    data: DiscountCreateManyInput | DiscountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Discount createManyAndReturn
   */
  export type DiscountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discount
     */
    select?: DiscountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Discount
     */
    omit?: DiscountOmit<ExtArgs> | null
    /**
     * The data used to create many Discounts.
     */
    data: DiscountCreateManyInput | DiscountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Discount update
   */
  export type DiscountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discount
     */
    select?: DiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discount
     */
    omit?: DiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscountInclude<ExtArgs> | null
    /**
     * The data needed to update a Discount.
     */
    data: XOR<DiscountUpdateInput, DiscountUncheckedUpdateInput>
    /**
     * Choose, which Discount to update.
     */
    where: DiscountWhereUniqueInput
  }

  /**
   * Discount updateMany
   */
  export type DiscountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Discounts.
     */
    data: XOR<DiscountUpdateManyMutationInput, DiscountUncheckedUpdateManyInput>
    /**
     * Filter which Discounts to update
     */
    where?: DiscountWhereInput
    /**
     * Limit how many Discounts to update.
     */
    limit?: number
  }

  /**
   * Discount updateManyAndReturn
   */
  export type DiscountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discount
     */
    select?: DiscountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Discount
     */
    omit?: DiscountOmit<ExtArgs> | null
    /**
     * The data used to update Discounts.
     */
    data: XOR<DiscountUpdateManyMutationInput, DiscountUncheckedUpdateManyInput>
    /**
     * Filter which Discounts to update
     */
    where?: DiscountWhereInput
    /**
     * Limit how many Discounts to update.
     */
    limit?: number
  }

  /**
   * Discount upsert
   */
  export type DiscountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discount
     */
    select?: DiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discount
     */
    omit?: DiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscountInclude<ExtArgs> | null
    /**
     * The filter to search for the Discount to update in case it exists.
     */
    where: DiscountWhereUniqueInput
    /**
     * In case the Discount found by the `where` argument doesn't exist, create a new Discount with this data.
     */
    create: XOR<DiscountCreateInput, DiscountUncheckedCreateInput>
    /**
     * In case the Discount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiscountUpdateInput, DiscountUncheckedUpdateInput>
  }

  /**
   * Discount delete
   */
  export type DiscountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discount
     */
    select?: DiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discount
     */
    omit?: DiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscountInclude<ExtArgs> | null
    /**
     * Filter which Discount to delete.
     */
    where: DiscountWhereUniqueInput
  }

  /**
   * Discount deleteMany
   */
  export type DiscountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Discounts to delete
     */
    where?: DiscountWhereInput
    /**
     * Limit how many Discounts to delete.
     */
    limit?: number
  }

  /**
   * Discount.orders
   */
  export type Discount$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Discount without action
   */
  export type DiscountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discount
     */
    select?: DiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discount
     */
    omit?: DiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscountInclude<ExtArgs> | null
  }


  /**
   * Model Cart
   */

  export type AggregateCart = {
    _count: CartCountAggregateOutputType | null
    _avg: CartAvgAggregateOutputType | null
    _sum: CartSumAggregateOutputType | null
    _min: CartMinAggregateOutputType | null
    _max: CartMaxAggregateOutputType | null
  }

  export type CartAvgAggregateOutputType = {
    cart_id: number | null
    profile_id: number | null
  }

  export type CartSumAggregateOutputType = {
    cart_id: number | null
    profile_id: number | null
  }

  export type CartMinAggregateOutputType = {
    cart_id: number | null
    created_at: Date | null
    profile_id: number | null
  }

  export type CartMaxAggregateOutputType = {
    cart_id: number | null
    created_at: Date | null
    profile_id: number | null
  }

  export type CartCountAggregateOutputType = {
    cart_id: number
    created_at: number
    profile_id: number
    _all: number
  }


  export type CartAvgAggregateInputType = {
    cart_id?: true
    profile_id?: true
  }

  export type CartSumAggregateInputType = {
    cart_id?: true
    profile_id?: true
  }

  export type CartMinAggregateInputType = {
    cart_id?: true
    created_at?: true
    profile_id?: true
  }

  export type CartMaxAggregateInputType = {
    cart_id?: true
    created_at?: true
    profile_id?: true
  }

  export type CartCountAggregateInputType = {
    cart_id?: true
    created_at?: true
    profile_id?: true
    _all?: true
  }

  export type CartAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cart to aggregate.
     */
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
     */
    orderBy?: CartOrderByWithRelationInput | CartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Carts
    **/
    _count?: true | CartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CartAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CartSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartMaxAggregateInputType
  }

  export type GetCartAggregateType<T extends CartAggregateArgs> = {
        [P in keyof T & keyof AggregateCart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCart[P]>
      : GetScalarType<T[P], AggregateCart[P]>
  }




  export type CartGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartWhereInput
    orderBy?: CartOrderByWithAggregationInput | CartOrderByWithAggregationInput[]
    by: CartScalarFieldEnum[] | CartScalarFieldEnum
    having?: CartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartCountAggregateInputType | true
    _avg?: CartAvgAggregateInputType
    _sum?: CartSumAggregateInputType
    _min?: CartMinAggregateInputType
    _max?: CartMaxAggregateInputType
  }

  export type CartGroupByOutputType = {
    cart_id: number
    created_at: Date
    profile_id: number
    _count: CartCountAggregateOutputType | null
    _avg: CartAvgAggregateOutputType | null
    _sum: CartSumAggregateOutputType | null
    _min: CartMinAggregateOutputType | null
    _max: CartMaxAggregateOutputType | null
  }

  type GetCartGroupByPayload<T extends CartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartGroupByOutputType[P]>
            : GetScalarType<T[P], CartGroupByOutputType[P]>
        }
      >
    >


  export type CartSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cart_id?: boolean
    created_at?: boolean
    profile_id?: boolean
    cart_items?: boolean | Cart$cart_itemsArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    _count?: boolean | CartCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cart"]>

  export type CartSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cart_id?: boolean
    created_at?: boolean
    profile_id?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cart"]>

  export type CartSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cart_id?: boolean
    created_at?: boolean
    profile_id?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cart"]>

  export type CartSelectScalar = {
    cart_id?: boolean
    created_at?: boolean
    profile_id?: boolean
  }

  export type CartOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"cart_id" | "created_at" | "profile_id", ExtArgs["result"]["cart"]>
  export type CartInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cart_items?: boolean | Cart$cart_itemsArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    _count?: boolean | CartCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CartIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }
  export type CartIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
  }

  export type $CartPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cart"
    objects: {
      cart_items: Prisma.$CartItemPayload<ExtArgs>[]
      profile: Prisma.$ProfilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      cart_id: number
      created_at: Date
      profile_id: number
    }, ExtArgs["result"]["cart"]>
    composites: {}
  }

  type CartGetPayload<S extends boolean | null | undefined | CartDefaultArgs> = $Result.GetResult<Prisma.$CartPayload, S>

  type CartCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CartFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CartCountAggregateInputType | true
    }

  export interface CartDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cart'], meta: { name: 'Cart' } }
    /**
     * Find zero or one Cart that matches the filter.
     * @param {CartFindUniqueArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CartFindUniqueArgs>(args: SelectSubset<T, CartFindUniqueArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Cart that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CartFindUniqueOrThrowArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CartFindUniqueOrThrowArgs>(args: SelectSubset<T, CartFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Cart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartFindFirstArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CartFindFirstArgs>(args?: SelectSubset<T, CartFindFirstArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Cart that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartFindFirstOrThrowArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CartFindFirstOrThrowArgs>(args?: SelectSubset<T, CartFindFirstOrThrowArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Carts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carts
     * const carts = await prisma.cart.findMany()
     * 
     * // Get first 10 Carts
     * const carts = await prisma.cart.findMany({ take: 10 })
     * 
     * // Only select the `cart_id`
     * const cartWithCart_idOnly = await prisma.cart.findMany({ select: { cart_id: true } })
     * 
     */
    findMany<T extends CartFindManyArgs>(args?: SelectSubset<T, CartFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Cart.
     * @param {CartCreateArgs} args - Arguments to create a Cart.
     * @example
     * // Create one Cart
     * const Cart = await prisma.cart.create({
     *   data: {
     *     // ... data to create a Cart
     *   }
     * })
     * 
     */
    create<T extends CartCreateArgs>(args: SelectSubset<T, CartCreateArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Carts.
     * @param {CartCreateManyArgs} args - Arguments to create many Carts.
     * @example
     * // Create many Carts
     * const cart = await prisma.cart.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CartCreateManyArgs>(args?: SelectSubset<T, CartCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Carts and returns the data saved in the database.
     * @param {CartCreateManyAndReturnArgs} args - Arguments to create many Carts.
     * @example
     * // Create many Carts
     * const cart = await prisma.cart.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Carts and only return the `cart_id`
     * const cartWithCart_idOnly = await prisma.cart.createManyAndReturn({
     *   select: { cart_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CartCreateManyAndReturnArgs>(args?: SelectSubset<T, CartCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Cart.
     * @param {CartDeleteArgs} args - Arguments to delete one Cart.
     * @example
     * // Delete one Cart
     * const Cart = await prisma.cart.delete({
     *   where: {
     *     // ... filter to delete one Cart
     *   }
     * })
     * 
     */
    delete<T extends CartDeleteArgs>(args: SelectSubset<T, CartDeleteArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Cart.
     * @param {CartUpdateArgs} args - Arguments to update one Cart.
     * @example
     * // Update one Cart
     * const cart = await prisma.cart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CartUpdateArgs>(args: SelectSubset<T, CartUpdateArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Carts.
     * @param {CartDeleteManyArgs} args - Arguments to filter Carts to delete.
     * @example
     * // Delete a few Carts
     * const { count } = await prisma.cart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CartDeleteManyArgs>(args?: SelectSubset<T, CartDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carts
     * const cart = await prisma.cart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CartUpdateManyArgs>(args: SelectSubset<T, CartUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carts and returns the data updated in the database.
     * @param {CartUpdateManyAndReturnArgs} args - Arguments to update many Carts.
     * @example
     * // Update many Carts
     * const cart = await prisma.cart.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Carts and only return the `cart_id`
     * const cartWithCart_idOnly = await prisma.cart.updateManyAndReturn({
     *   select: { cart_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CartUpdateManyAndReturnArgs>(args: SelectSubset<T, CartUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Cart.
     * @param {CartUpsertArgs} args - Arguments to update or create a Cart.
     * @example
     * // Update or create a Cart
     * const cart = await prisma.cart.upsert({
     *   create: {
     *     // ... data to create a Cart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cart we want to update
     *   }
     * })
     */
    upsert<T extends CartUpsertArgs>(args: SelectSubset<T, CartUpsertArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Carts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartCountArgs} args - Arguments to filter Carts to count.
     * @example
     * // Count the number of Carts
     * const count = await prisma.cart.count({
     *   where: {
     *     // ... the filter for the Carts we want to count
     *   }
     * })
    **/
    count<T extends CartCountArgs>(
      args?: Subset<T, CartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartAggregateArgs>(args: Subset<T, CartAggregateArgs>): Prisma.PrismaPromise<GetCartAggregateType<T>>

    /**
     * Group by Cart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartGroupByArgs['orderBy'] }
        : { orderBy?: CartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cart model
   */
  readonly fields: CartFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CartClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cart_items<T extends Cart$cart_itemsArgs<ExtArgs> = {}>(args?: Subset<T, Cart$cart_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    profile<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cart model
   */ 
  interface CartFieldRefs {
    readonly cart_id: FieldRef<"Cart", 'Int'>
    readonly created_at: FieldRef<"Cart", 'DateTime'>
    readonly profile_id: FieldRef<"Cart", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Cart findUnique
   */
  export type CartFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Cart to fetch.
     */
    where: CartWhereUniqueInput
  }

  /**
   * Cart findUniqueOrThrow
   */
  export type CartFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Cart to fetch.
     */
    where: CartWhereUniqueInput
  }

  /**
   * Cart findFirst
   */
  export type CartFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Cart to fetch.
     */
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
     */
    orderBy?: CartOrderByWithRelationInput | CartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carts.
     */
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carts.
     */
    distinct?: CartScalarFieldEnum | CartScalarFieldEnum[]
  }

  /**
   * Cart findFirstOrThrow
   */
  export type CartFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Cart to fetch.
     */
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
     */
    orderBy?: CartOrderByWithRelationInput | CartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carts.
     */
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carts.
     */
    distinct?: CartScalarFieldEnum | CartScalarFieldEnum[]
  }

  /**
   * Cart findMany
   */
  export type CartFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Carts to fetch.
     */
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
     */
    orderBy?: CartOrderByWithRelationInput | CartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Carts.
     */
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
     */
    skip?: number
    distinct?: CartScalarFieldEnum | CartScalarFieldEnum[]
  }

  /**
   * Cart create
   */
  export type CartCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * The data needed to create a Cart.
     */
    data: XOR<CartCreateInput, CartUncheckedCreateInput>
  }

  /**
   * Cart createMany
   */
  export type CartCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Carts.
     */
    data: CartCreateManyInput | CartCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cart createManyAndReturn
   */
  export type CartCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * The data used to create many Carts.
     */
    data: CartCreateManyInput | CartCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Cart update
   */
  export type CartUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * The data needed to update a Cart.
     */
    data: XOR<CartUpdateInput, CartUncheckedUpdateInput>
    /**
     * Choose, which Cart to update.
     */
    where: CartWhereUniqueInput
  }

  /**
   * Cart updateMany
   */
  export type CartUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Carts.
     */
    data: XOR<CartUpdateManyMutationInput, CartUncheckedUpdateManyInput>
    /**
     * Filter which Carts to update
     */
    where?: CartWhereInput
    /**
     * Limit how many Carts to update.
     */
    limit?: number
  }

  /**
   * Cart updateManyAndReturn
   */
  export type CartUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * The data used to update Carts.
     */
    data: XOR<CartUpdateManyMutationInput, CartUncheckedUpdateManyInput>
    /**
     * Filter which Carts to update
     */
    where?: CartWhereInput
    /**
     * Limit how many Carts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Cart upsert
   */
  export type CartUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * The filter to search for the Cart to update in case it exists.
     */
    where: CartWhereUniqueInput
    /**
     * In case the Cart found by the `where` argument doesn't exist, create a new Cart with this data.
     */
    create: XOR<CartCreateInput, CartUncheckedCreateInput>
    /**
     * In case the Cart was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CartUpdateInput, CartUncheckedUpdateInput>
  }

  /**
   * Cart delete
   */
  export type CartDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter which Cart to delete.
     */
    where: CartWhereUniqueInput
  }

  /**
   * Cart deleteMany
   */
  export type CartDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Carts to delete
     */
    where?: CartWhereInput
    /**
     * Limit how many Carts to delete.
     */
    limit?: number
  }

  /**
   * Cart.cart_items
   */
  export type Cart$cart_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    where?: CartItemWhereInput
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    cursor?: CartItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * Cart without action
   */
  export type CartDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
  }


  /**
   * Model CartItem
   */

  export type AggregateCartItem = {
    _count: CartItemCountAggregateOutputType | null
    _avg: CartItemAvgAggregateOutputType | null
    _sum: CartItemSumAggregateOutputType | null
    _min: CartItemMinAggregateOutputType | null
    _max: CartItemMaxAggregateOutputType | null
  }

  export type CartItemAvgAggregateOutputType = {
    cart_item_id: number | null
    cart_id: number | null
    product_id: number | null
    quantity: number | null
  }

  export type CartItemSumAggregateOutputType = {
    cart_item_id: number | null
    cart_id: number | null
    product_id: number | null
    quantity: number | null
  }

  export type CartItemMinAggregateOutputType = {
    cart_item_id: number | null
    cart_id: number | null
    product_id: number | null
    quantity: number | null
  }

  export type CartItemMaxAggregateOutputType = {
    cart_item_id: number | null
    cart_id: number | null
    product_id: number | null
    quantity: number | null
  }

  export type CartItemCountAggregateOutputType = {
    cart_item_id: number
    cart_id: number
    product_id: number
    quantity: number
    _all: number
  }


  export type CartItemAvgAggregateInputType = {
    cart_item_id?: true
    cart_id?: true
    product_id?: true
    quantity?: true
  }

  export type CartItemSumAggregateInputType = {
    cart_item_id?: true
    cart_id?: true
    product_id?: true
    quantity?: true
  }

  export type CartItemMinAggregateInputType = {
    cart_item_id?: true
    cart_id?: true
    product_id?: true
    quantity?: true
  }

  export type CartItemMaxAggregateInputType = {
    cart_item_id?: true
    cart_id?: true
    product_id?: true
    quantity?: true
  }

  export type CartItemCountAggregateInputType = {
    cart_item_id?: true
    cart_id?: true
    product_id?: true
    quantity?: true
    _all?: true
  }

  export type CartItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartItem to aggregate.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CartItems
    **/
    _count?: true | CartItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CartItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CartItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartItemMaxAggregateInputType
  }

  export type GetCartItemAggregateType<T extends CartItemAggregateArgs> = {
        [P in keyof T & keyof AggregateCartItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCartItem[P]>
      : GetScalarType<T[P], AggregateCartItem[P]>
  }




  export type CartItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartItemWhereInput
    orderBy?: CartItemOrderByWithAggregationInput | CartItemOrderByWithAggregationInput[]
    by: CartItemScalarFieldEnum[] | CartItemScalarFieldEnum
    having?: CartItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartItemCountAggregateInputType | true
    _avg?: CartItemAvgAggregateInputType
    _sum?: CartItemSumAggregateInputType
    _min?: CartItemMinAggregateInputType
    _max?: CartItemMaxAggregateInputType
  }

  export type CartItemGroupByOutputType = {
    cart_item_id: number
    cart_id: number
    product_id: number
    quantity: number
    _count: CartItemCountAggregateOutputType | null
    _avg: CartItemAvgAggregateOutputType | null
    _sum: CartItemSumAggregateOutputType | null
    _min: CartItemMinAggregateOutputType | null
    _max: CartItemMaxAggregateOutputType | null
  }

  type GetCartItemGroupByPayload<T extends CartItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CartItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartItemGroupByOutputType[P]>
            : GetScalarType<T[P], CartItemGroupByOutputType[P]>
        }
      >
    >


  export type CartItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cart_item_id?: boolean
    cart_id?: boolean
    product_id?: boolean
    quantity?: boolean
    cart?: boolean | CartDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartItem"]>

  export type CartItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cart_item_id?: boolean
    cart_id?: boolean
    product_id?: boolean
    quantity?: boolean
    cart?: boolean | CartDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartItem"]>

  export type CartItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cart_item_id?: boolean
    cart_id?: boolean
    product_id?: boolean
    quantity?: boolean
    cart?: boolean | CartDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartItem"]>

  export type CartItemSelectScalar = {
    cart_item_id?: boolean
    cart_id?: boolean
    product_id?: boolean
    quantity?: boolean
  }

  export type CartItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"cart_item_id" | "cart_id" | "product_id" | "quantity", ExtArgs["result"]["cartItem"]>
  export type CartItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cart?: boolean | CartDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type CartItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cart?: boolean | CartDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type CartItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cart?: boolean | CartDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $CartItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CartItem"
    objects: {
      cart: Prisma.$CartPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      cart_item_id: number
      cart_id: number
      product_id: number
      quantity: number
    }, ExtArgs["result"]["cartItem"]>
    composites: {}
  }

  type CartItemGetPayload<S extends boolean | null | undefined | CartItemDefaultArgs> = $Result.GetResult<Prisma.$CartItemPayload, S>

  type CartItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CartItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CartItemCountAggregateInputType | true
    }

  export interface CartItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CartItem'], meta: { name: 'CartItem' } }
    /**
     * Find zero or one CartItem that matches the filter.
     * @param {CartItemFindUniqueArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CartItemFindUniqueArgs>(args: SelectSubset<T, CartItemFindUniqueArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one CartItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CartItemFindUniqueOrThrowArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CartItemFindUniqueOrThrowArgs>(args: SelectSubset<T, CartItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first CartItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemFindFirstArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CartItemFindFirstArgs>(args?: SelectSubset<T, CartItemFindFirstArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first CartItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemFindFirstOrThrowArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CartItemFindFirstOrThrowArgs>(args?: SelectSubset<T, CartItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more CartItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CartItems
     * const cartItems = await prisma.cartItem.findMany()
     * 
     * // Get first 10 CartItems
     * const cartItems = await prisma.cartItem.findMany({ take: 10 })
     * 
     * // Only select the `cart_item_id`
     * const cartItemWithCart_item_idOnly = await prisma.cartItem.findMany({ select: { cart_item_id: true } })
     * 
     */
    findMany<T extends CartItemFindManyArgs>(args?: SelectSubset<T, CartItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a CartItem.
     * @param {CartItemCreateArgs} args - Arguments to create a CartItem.
     * @example
     * // Create one CartItem
     * const CartItem = await prisma.cartItem.create({
     *   data: {
     *     // ... data to create a CartItem
     *   }
     * })
     * 
     */
    create<T extends CartItemCreateArgs>(args: SelectSubset<T, CartItemCreateArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many CartItems.
     * @param {CartItemCreateManyArgs} args - Arguments to create many CartItems.
     * @example
     * // Create many CartItems
     * const cartItem = await prisma.cartItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CartItemCreateManyArgs>(args?: SelectSubset<T, CartItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CartItems and returns the data saved in the database.
     * @param {CartItemCreateManyAndReturnArgs} args - Arguments to create many CartItems.
     * @example
     * // Create many CartItems
     * const cartItem = await prisma.cartItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CartItems and only return the `cart_item_id`
     * const cartItemWithCart_item_idOnly = await prisma.cartItem.createManyAndReturn({
     *   select: { cart_item_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CartItemCreateManyAndReturnArgs>(args?: SelectSubset<T, CartItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a CartItem.
     * @param {CartItemDeleteArgs} args - Arguments to delete one CartItem.
     * @example
     * // Delete one CartItem
     * const CartItem = await prisma.cartItem.delete({
     *   where: {
     *     // ... filter to delete one CartItem
     *   }
     * })
     * 
     */
    delete<T extends CartItemDeleteArgs>(args: SelectSubset<T, CartItemDeleteArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one CartItem.
     * @param {CartItemUpdateArgs} args - Arguments to update one CartItem.
     * @example
     * // Update one CartItem
     * const cartItem = await prisma.cartItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CartItemUpdateArgs>(args: SelectSubset<T, CartItemUpdateArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more CartItems.
     * @param {CartItemDeleteManyArgs} args - Arguments to filter CartItems to delete.
     * @example
     * // Delete a few CartItems
     * const { count } = await prisma.cartItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CartItemDeleteManyArgs>(args?: SelectSubset<T, CartItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CartItems
     * const cartItem = await prisma.cartItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CartItemUpdateManyArgs>(args: SelectSubset<T, CartItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartItems and returns the data updated in the database.
     * @param {CartItemUpdateManyAndReturnArgs} args - Arguments to update many CartItems.
     * @example
     * // Update many CartItems
     * const cartItem = await prisma.cartItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CartItems and only return the `cart_item_id`
     * const cartItemWithCart_item_idOnly = await prisma.cartItem.updateManyAndReturn({
     *   select: { cart_item_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CartItemUpdateManyAndReturnArgs>(args: SelectSubset<T, CartItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one CartItem.
     * @param {CartItemUpsertArgs} args - Arguments to update or create a CartItem.
     * @example
     * // Update or create a CartItem
     * const cartItem = await prisma.cartItem.upsert({
     *   create: {
     *     // ... data to create a CartItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CartItem we want to update
     *   }
     * })
     */
    upsert<T extends CartItemUpsertArgs>(args: SelectSubset<T, CartItemUpsertArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of CartItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemCountArgs} args - Arguments to filter CartItems to count.
     * @example
     * // Count the number of CartItems
     * const count = await prisma.cartItem.count({
     *   where: {
     *     // ... the filter for the CartItems we want to count
     *   }
     * })
    **/
    count<T extends CartItemCountArgs>(
      args?: Subset<T, CartItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CartItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartItemAggregateArgs>(args: Subset<T, CartItemAggregateArgs>): Prisma.PrismaPromise<GetCartItemAggregateType<T>>

    /**
     * Group by CartItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartItemGroupByArgs['orderBy'] }
        : { orderBy?: CartItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CartItem model
   */
  readonly fields: CartItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CartItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CartItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cart<T extends CartDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CartDefaultArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CartItem model
   */ 
  interface CartItemFieldRefs {
    readonly cart_item_id: FieldRef<"CartItem", 'Int'>
    readonly cart_id: FieldRef<"CartItem", 'Int'>
    readonly product_id: FieldRef<"CartItem", 'Int'>
    readonly quantity: FieldRef<"CartItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CartItem findUnique
   */
  export type CartItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem findUniqueOrThrow
   */
  export type CartItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem findFirst
   */
  export type CartItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartItems.
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartItems.
     */
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * CartItem findFirstOrThrow
   */
  export type CartItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartItems.
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartItems.
     */
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * CartItem findMany
   */
  export type CartItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItems to fetch.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CartItems.
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * CartItem create
   */
  export type CartItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * The data needed to create a CartItem.
     */
    data: XOR<CartItemCreateInput, CartItemUncheckedCreateInput>
  }

  /**
   * CartItem createMany
   */
  export type CartItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CartItems.
     */
    data: CartItemCreateManyInput | CartItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CartItem createManyAndReturn
   */
  export type CartItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * The data used to create many CartItems.
     */
    data: CartItemCreateManyInput | CartItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CartItem update
   */
  export type CartItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * The data needed to update a CartItem.
     */
    data: XOR<CartItemUpdateInput, CartItemUncheckedUpdateInput>
    /**
     * Choose, which CartItem to update.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem updateMany
   */
  export type CartItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CartItems.
     */
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyInput>
    /**
     * Filter which CartItems to update
     */
    where?: CartItemWhereInput
    /**
     * Limit how many CartItems to update.
     */
    limit?: number
  }

  /**
   * CartItem updateManyAndReturn
   */
  export type CartItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * The data used to update CartItems.
     */
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyInput>
    /**
     * Filter which CartItems to update
     */
    where?: CartItemWhereInput
    /**
     * Limit how many CartItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CartItem upsert
   */
  export type CartItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * The filter to search for the CartItem to update in case it exists.
     */
    where: CartItemWhereUniqueInput
    /**
     * In case the CartItem found by the `where` argument doesn't exist, create a new CartItem with this data.
     */
    create: XOR<CartItemCreateInput, CartItemUncheckedCreateInput>
    /**
     * In case the CartItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CartItemUpdateInput, CartItemUncheckedUpdateInput>
  }

  /**
   * CartItem delete
   */
  export type CartItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter which CartItem to delete.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem deleteMany
   */
  export type CartItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartItems to delete
     */
    where?: CartItemWhereInput
    /**
     * Limit how many CartItems to delete.
     */
    limit?: number
  }

  /**
   * CartItem without action
   */
  export type CartItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    order_id: number | null
    store_id: number | null
    address_id: number | null
    total_price: number | null
    shipping_price: number | null
    total_payment: number | null
    discount_id: number | null
    profile_id: number | null
  }

  export type OrderSumAggregateOutputType = {
    order_id: number | null
    store_id: number | null
    address_id: number | null
    total_price: number | null
    shipping_price: number | null
    total_payment: number | null
    discount_id: number | null
    profile_id: number | null
  }

  export type OrderMinAggregateOutputType = {
    order_id: number | null
    order_number: string | null
    store_id: number | null
    address_id: number | null
    total_price: number | null
    shipping_price: number | null
    total_payment: number | null
    tracking_number: string | null
    discount_id: number | null
    status: $Enums.OrderStatus | null
    order_date: Date | null
    profile_id: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    order_id: number | null
    order_number: string | null
    store_id: number | null
    address_id: number | null
    total_price: number | null
    shipping_price: number | null
    total_payment: number | null
    tracking_number: string | null
    discount_id: number | null
    status: $Enums.OrderStatus | null
    order_date: Date | null
    profile_id: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderCountAggregateOutputType = {
    order_id: number
    order_number: number
    store_id: number
    address_id: number
    total_price: number
    shipping_price: number
    total_payment: number
    tracking_number: number
    discount_id: number
    status: number
    order_date: number
    profile_id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    order_id?: true
    store_id?: true
    address_id?: true
    total_price?: true
    shipping_price?: true
    total_payment?: true
    discount_id?: true
    profile_id?: true
  }

  export type OrderSumAggregateInputType = {
    order_id?: true
    store_id?: true
    address_id?: true
    total_price?: true
    shipping_price?: true
    total_payment?: true
    discount_id?: true
    profile_id?: true
  }

  export type OrderMinAggregateInputType = {
    order_id?: true
    order_number?: true
    store_id?: true
    address_id?: true
    total_price?: true
    shipping_price?: true
    total_payment?: true
    tracking_number?: true
    discount_id?: true
    status?: true
    order_date?: true
    profile_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderMaxAggregateInputType = {
    order_id?: true
    order_number?: true
    store_id?: true
    address_id?: true
    total_price?: true
    shipping_price?: true
    total_payment?: true
    tracking_number?: true
    discount_id?: true
    status?: true
    order_date?: true
    profile_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderCountAggregateInputType = {
    order_id?: true
    order_number?: true
    store_id?: true
    address_id?: true
    total_price?: true
    shipping_price?: true
    total_payment?: true
    tracking_number?: true
    discount_id?: true
    status?: true
    order_date?: true
    profile_id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    order_id: number
    order_number: string | null
    store_id: number
    address_id: number
    total_price: number
    shipping_price: number | null
    total_payment: number | null
    tracking_number: string | null
    discount_id: number | null
    status: $Enums.OrderStatus
    order_date: Date
    profile_id: number
    createdAt: Date | null
    updatedAt: Date | null
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    order_id?: boolean
    order_number?: boolean
    store_id?: boolean
    address_id?: boolean
    total_price?: boolean
    shipping_price?: boolean
    total_payment?: boolean
    tracking_number?: boolean
    discount_id?: boolean
    status?: boolean
    order_date?: boolean
    profile_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    address?: boolean | AddressDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    discount?: boolean | Order$discountArgs<ExtArgs>
    order_cancel?: boolean | Order$order_cancelArgs<ExtArgs>
    admin_orders?: boolean | Order$admin_ordersArgs<ExtArgs>
    order_items?: boolean | Order$order_itemsArgs<ExtArgs>
    payment_proof?: boolean | Order$payment_proofArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    order_id?: boolean
    order_number?: boolean
    store_id?: boolean
    address_id?: boolean
    total_price?: boolean
    shipping_price?: boolean
    total_payment?: boolean
    tracking_number?: boolean
    discount_id?: boolean
    status?: boolean
    order_date?: boolean
    profile_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    address?: boolean | AddressDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    discount?: boolean | Order$discountArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    order_id?: boolean
    order_number?: boolean
    store_id?: boolean
    address_id?: boolean
    total_price?: boolean
    shipping_price?: boolean
    total_payment?: boolean
    tracking_number?: boolean
    discount_id?: boolean
    status?: boolean
    order_date?: boolean
    profile_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    address?: boolean | AddressDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    discount?: boolean | Order$discountArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    order_id?: boolean
    order_number?: boolean
    store_id?: boolean
    address_id?: boolean
    total_price?: boolean
    shipping_price?: boolean
    total_payment?: boolean
    tracking_number?: boolean
    discount_id?: boolean
    status?: boolean
    order_date?: boolean
    profile_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"order_id" | "order_number" | "store_id" | "address_id" | "total_price" | "shipping_price" | "total_payment" | "tracking_number" | "discount_id" | "status" | "order_date" | "profile_id" | "createdAt" | "updatedAt", ExtArgs["result"]["order"]>
  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | AddressDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    discount?: boolean | Order$discountArgs<ExtArgs>
    order_cancel?: boolean | Order$order_cancelArgs<ExtArgs>
    admin_orders?: boolean | Order$admin_ordersArgs<ExtArgs>
    order_items?: boolean | Order$order_itemsArgs<ExtArgs>
    payment_proof?: boolean | Order$payment_proofArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | AddressDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    discount?: boolean | Order$discountArgs<ExtArgs>
  }
  export type OrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | AddressDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    discount?: boolean | Order$discountArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      address: Prisma.$AddressPayload<ExtArgs>
      profile: Prisma.$ProfilePayload<ExtArgs>
      store: Prisma.$StorePayload<ExtArgs>
      discount: Prisma.$DiscountPayload<ExtArgs> | null
      order_cancel: Prisma.$OrderCancelPayload<ExtArgs> | null
      admin_orders: Prisma.$AdminOrderPayload<ExtArgs>[]
      order_items: Prisma.$OrderItemPayload<ExtArgs>[]
      payment_proof: Prisma.$PaymentProofPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      order_id: number
      order_number: string | null
      store_id: number
      address_id: number
      total_price: number
      shipping_price: number | null
      total_payment: number | null
      tracking_number: string | null
      discount_id: number | null
      status: $Enums.OrderStatus
      order_date: Date
      profile_id: number
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `order_id`
     * const orderWithOrder_idOnly = await prisma.order.findMany({ select: { order_id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `order_id`
     * const orderWithOrder_idOnly = await prisma.order.createManyAndReturn({
     *   select: { order_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders and returns the data updated in the database.
     * @param {OrderUpdateManyAndReturnArgs} args - Arguments to update many Orders.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Orders and only return the `order_id`
     * const orderWithOrder_idOnly = await prisma.order.updateManyAndReturn({
     *   select: { order_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    address<T extends AddressDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AddressDefaultArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    profile<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    store<T extends StoreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoreDefaultArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    discount<T extends Order$discountArgs<ExtArgs> = {}>(args?: Subset<T, Order$discountArgs<ExtArgs>>): Prisma__DiscountClient<$Result.GetResult<Prisma.$DiscountPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    order_cancel<T extends Order$order_cancelArgs<ExtArgs> = {}>(args?: Subset<T, Order$order_cancelArgs<ExtArgs>>): Prisma__OrderCancelClient<$Result.GetResult<Prisma.$OrderCancelPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    admin_orders<T extends Order$admin_ordersArgs<ExtArgs> = {}>(args?: Subset<T, Order$admin_ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminOrderPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    order_items<T extends Order$order_itemsArgs<ExtArgs> = {}>(args?: Subset<T, Order$order_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    payment_proof<T extends Order$payment_proofArgs<ExtArgs> = {}>(args?: Subset<T, Order$payment_proofArgs<ExtArgs>>): Prisma__PaymentProofClient<$Result.GetResult<Prisma.$PaymentProofPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */ 
  interface OrderFieldRefs {
    readonly order_id: FieldRef<"Order", 'Int'>
    readonly order_number: FieldRef<"Order", 'String'>
    readonly store_id: FieldRef<"Order", 'Int'>
    readonly address_id: FieldRef<"Order", 'Int'>
    readonly total_price: FieldRef<"Order", 'Int'>
    readonly shipping_price: FieldRef<"Order", 'Int'>
    readonly total_payment: FieldRef<"Order", 'Int'>
    readonly tracking_number: FieldRef<"Order", 'String'>
    readonly discount_id: FieldRef<"Order", 'Int'>
    readonly status: FieldRef<"Order", 'OrderStatus'>
    readonly order_date: FieldRef<"Order", 'DateTime'>
    readonly profile_id: FieldRef<"Order", 'Int'>
    readonly createdAt: FieldRef<"Order", 'DateTime'>
    readonly updatedAt: FieldRef<"Order", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
  }

  /**
   * Order updateManyAndReturn
   */
  export type OrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to delete.
     */
    limit?: number
  }

  /**
   * Order.discount
   */
  export type Order$discountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discount
     */
    select?: DiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discount
     */
    omit?: DiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscountInclude<ExtArgs> | null
    where?: DiscountWhereInput
  }

  /**
   * Order.order_cancel
   */
  export type Order$order_cancelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCancel
     */
    select?: OrderCancelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderCancel
     */
    omit?: OrderCancelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderCancelInclude<ExtArgs> | null
    where?: OrderCancelWhereInput
  }

  /**
   * Order.admin_orders
   */
  export type Order$admin_ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminOrder
     */
    select?: AdminOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminOrder
     */
    omit?: AdminOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminOrderInclude<ExtArgs> | null
    where?: AdminOrderWhereInput
    orderBy?: AdminOrderOrderByWithRelationInput | AdminOrderOrderByWithRelationInput[]
    cursor?: AdminOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminOrderScalarFieldEnum | AdminOrderScalarFieldEnum[]
  }

  /**
   * Order.order_items
   */
  export type Order$order_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Order.payment_proof
   */
  export type Order$payment_proofArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentProof
     */
    select?: PaymentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentProof
     */
    omit?: PaymentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentProofInclude<ExtArgs> | null
    where?: PaymentProofWhereInput
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model OrderItem
   */

  export type AggregateOrderItem = {
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  export type OrderItemAvgAggregateOutputType = {
    order_item_id: number | null
    order_id: number | null
    product_id: number | null
    quantity: number | null
    price: number | null
    subtotal: number | null
  }

  export type OrderItemSumAggregateOutputType = {
    order_item_id: number | null
    order_id: number | null
    product_id: number | null
    quantity: number | null
    price: number | null
    subtotal: number | null
  }

  export type OrderItemMinAggregateOutputType = {
    order_item_id: number | null
    order_id: number | null
    product_id: number | null
    quantity: number | null
    price: number | null
    subtotal: number | null
  }

  export type OrderItemMaxAggregateOutputType = {
    order_item_id: number | null
    order_id: number | null
    product_id: number | null
    quantity: number | null
    price: number | null
    subtotal: number | null
  }

  export type OrderItemCountAggregateOutputType = {
    order_item_id: number
    order_id: number
    product_id: number
    quantity: number
    price: number
    subtotal: number
    _all: number
  }


  export type OrderItemAvgAggregateInputType = {
    order_item_id?: true
    order_id?: true
    product_id?: true
    quantity?: true
    price?: true
    subtotal?: true
  }

  export type OrderItemSumAggregateInputType = {
    order_item_id?: true
    order_id?: true
    product_id?: true
    quantity?: true
    price?: true
    subtotal?: true
  }

  export type OrderItemMinAggregateInputType = {
    order_item_id?: true
    order_id?: true
    product_id?: true
    quantity?: true
    price?: true
    subtotal?: true
  }

  export type OrderItemMaxAggregateInputType = {
    order_item_id?: true
    order_id?: true
    product_id?: true
    quantity?: true
    price?: true
    subtotal?: true
  }

  export type OrderItemCountAggregateInputType = {
    order_item_id?: true
    order_id?: true
    product_id?: true
    quantity?: true
    price?: true
    subtotal?: true
    _all?: true
  }

  export type OrderItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItem to aggregate.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderItems
    **/
    _count?: true | OrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderItemMaxAggregateInputType
  }

  export type GetOrderItemAggregateType<T extends OrderItemAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderItem[P]>
      : GetScalarType<T[P], AggregateOrderItem[P]>
  }




  export type OrderItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithAggregationInput | OrderItemOrderByWithAggregationInput[]
    by: OrderItemScalarFieldEnum[] | OrderItemScalarFieldEnum
    having?: OrderItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderItemCountAggregateInputType | true
    _avg?: OrderItemAvgAggregateInputType
    _sum?: OrderItemSumAggregateInputType
    _min?: OrderItemMinAggregateInputType
    _max?: OrderItemMaxAggregateInputType
  }

  export type OrderItemGroupByOutputType = {
    order_item_id: number
    order_id: number
    product_id: number
    quantity: number
    price: number
    subtotal: number
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  type GetOrderItemGroupByPayload<T extends OrderItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
            : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
        }
      >
    >


  export type OrderItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    order_item_id?: boolean
    order_id?: boolean
    product_id?: boolean
    quantity?: boolean
    price?: boolean
    subtotal?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    order_item_id?: boolean
    order_id?: boolean
    product_id?: boolean
    quantity?: boolean
    price?: boolean
    subtotal?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    order_item_id?: boolean
    order_id?: boolean
    product_id?: boolean
    quantity?: boolean
    price?: boolean
    subtotal?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectScalar = {
    order_item_id?: boolean
    order_id?: boolean
    product_id?: boolean
    quantity?: boolean
    price?: boolean
    subtotal?: boolean
  }

  export type OrderItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"order_item_id" | "order_id" | "product_id" | "quantity" | "price" | "subtotal", ExtArgs["result"]["orderItem"]>
  export type OrderItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type OrderItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type OrderItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $OrderItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderItem"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      order_item_id: number
      order_id: number
      product_id: number
      quantity: number
      price: number
      subtotal: number
    }, ExtArgs["result"]["orderItem"]>
    composites: {}
  }

  type OrderItemGetPayload<S extends boolean | null | undefined | OrderItemDefaultArgs> = $Result.GetResult<Prisma.$OrderItemPayload, S>

  type OrderItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderItemCountAggregateInputType | true
    }

  export interface OrderItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderItem'], meta: { name: 'OrderItem' } }
    /**
     * Find zero or one OrderItem that matches the filter.
     * @param {OrderItemFindUniqueArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderItemFindUniqueArgs>(args: SelectSubset<T, OrderItemFindUniqueArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one OrderItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderItemFindUniqueOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderItemFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first OrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderItemFindFirstArgs>(args?: SelectSubset<T, OrderItemFindFirstArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first OrderItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderItemFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more OrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderItems
     * const orderItems = await prisma.orderItem.findMany()
     * 
     * // Get first 10 OrderItems
     * const orderItems = await prisma.orderItem.findMany({ take: 10 })
     * 
     * // Only select the `order_item_id`
     * const orderItemWithOrder_item_idOnly = await prisma.orderItem.findMany({ select: { order_item_id: true } })
     * 
     */
    findMany<T extends OrderItemFindManyArgs>(args?: SelectSubset<T, OrderItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a OrderItem.
     * @param {OrderItemCreateArgs} args - Arguments to create a OrderItem.
     * @example
     * // Create one OrderItem
     * const OrderItem = await prisma.orderItem.create({
     *   data: {
     *     // ... data to create a OrderItem
     *   }
     * })
     * 
     */
    create<T extends OrderItemCreateArgs>(args: SelectSubset<T, OrderItemCreateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many OrderItems.
     * @param {OrderItemCreateManyArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderItemCreateManyArgs>(args?: SelectSubset<T, OrderItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderItems and returns the data saved in the database.
     * @param {OrderItemCreateManyAndReturnArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderItems and only return the `order_item_id`
     * const orderItemWithOrder_item_idOnly = await prisma.orderItem.createManyAndReturn({
     *   select: { order_item_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderItemCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a OrderItem.
     * @param {OrderItemDeleteArgs} args - Arguments to delete one OrderItem.
     * @example
     * // Delete one OrderItem
     * const OrderItem = await prisma.orderItem.delete({
     *   where: {
     *     // ... filter to delete one OrderItem
     *   }
     * })
     * 
     */
    delete<T extends OrderItemDeleteArgs>(args: SelectSubset<T, OrderItemDeleteArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one OrderItem.
     * @param {OrderItemUpdateArgs} args - Arguments to update one OrderItem.
     * @example
     * // Update one OrderItem
     * const orderItem = await prisma.orderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderItemUpdateArgs>(args: SelectSubset<T, OrderItemUpdateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more OrderItems.
     * @param {OrderItemDeleteManyArgs} args - Arguments to filter OrderItems to delete.
     * @example
     * // Delete a few OrderItems
     * const { count } = await prisma.orderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderItemDeleteManyArgs>(args?: SelectSubset<T, OrderItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderItemUpdateManyArgs>(args: SelectSubset<T, OrderItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems and returns the data updated in the database.
     * @param {OrderItemUpdateManyAndReturnArgs} args - Arguments to update many OrderItems.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderItems and only return the `order_item_id`
     * const orderItemWithOrder_item_idOnly = await prisma.orderItem.updateManyAndReturn({
     *   select: { order_item_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderItemUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one OrderItem.
     * @param {OrderItemUpsertArgs} args - Arguments to update or create a OrderItem.
     * @example
     * // Update or create a OrderItem
     * const orderItem = await prisma.orderItem.upsert({
     *   create: {
     *     // ... data to create a OrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderItem we want to update
     *   }
     * })
     */
    upsert<T extends OrderItemUpsertArgs>(args: SelectSubset<T, OrderItemUpsertArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemCountArgs} args - Arguments to filter OrderItems to count.
     * @example
     * // Count the number of OrderItems
     * const count = await prisma.orderItem.count({
     *   where: {
     *     // ... the filter for the OrderItems we want to count
     *   }
     * })
    **/
    count<T extends OrderItemCountArgs>(
      args?: Subset<T, OrderItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderItemAggregateArgs>(args: Subset<T, OrderItemAggregateArgs>): Prisma.PrismaPromise<GetOrderItemAggregateType<T>>

    /**
     * Group by OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderItemGroupByArgs['orderBy'] }
        : { orderBy?: OrderItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderItem model
   */
  readonly fields: OrderItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderItem model
   */ 
  interface OrderItemFieldRefs {
    readonly order_item_id: FieldRef<"OrderItem", 'Int'>
    readonly order_id: FieldRef<"OrderItem", 'Int'>
    readonly product_id: FieldRef<"OrderItem", 'Int'>
    readonly quantity: FieldRef<"OrderItem", 'Int'>
    readonly price: FieldRef<"OrderItem", 'Int'>
    readonly subtotal: FieldRef<"OrderItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * OrderItem findUnique
   */
  export type OrderItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findUniqueOrThrow
   */
  export type OrderItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findFirst
   */
  export type OrderItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findFirstOrThrow
   */
  export type OrderItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findMany
   */
  export type OrderItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItems to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem create
   */
  export type OrderItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderItem.
     */
    data: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
  }

  /**
   * OrderItem createMany
   */
  export type OrderItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderItem createManyAndReturn
   */
  export type OrderItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItem update
   */
  export type OrderItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderItem.
     */
    data: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
    /**
     * Choose, which OrderItem to update.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem updateMany
   */
  export type OrderItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
  }

  /**
   * OrderItem updateManyAndReturn
   */
  export type OrderItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItem upsert
   */
  export type OrderItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderItem to update in case it exists.
     */
    where: OrderItemWhereUniqueInput
    /**
     * In case the OrderItem found by the `where` argument doesn't exist, create a new OrderItem with this data.
     */
    create: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
    /**
     * In case the OrderItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
  }

  /**
   * OrderItem delete
   */
  export type OrderItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter which OrderItem to delete.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem deleteMany
   */
  export type OrderItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItems to delete
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to delete.
     */
    limit?: number
  }

  /**
   * OrderItem without action
   */
  export type OrderItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
  }


  /**
   * Model PaymentProof
   */

  export type AggregatePaymentProof = {
    _count: PaymentProofCountAggregateOutputType | null
    _avg: PaymentProofAvgAggregateOutputType | null
    _sum: PaymentProofSumAggregateOutputType | null
    _min: PaymentProofMinAggregateOutputType | null
    _max: PaymentProofMaxAggregateOutputType | null
  }

  export type PaymentProofAvgAggregateOutputType = {
    payment_proof_id: number | null
    order_id: number | null
  }

  export type PaymentProofSumAggregateOutputType = {
    payment_proof_id: number | null
    order_id: number | null
  }

  export type PaymentProofMinAggregateOutputType = {
    payment_proof_id: number | null
    order_id: number | null
    image_url: string | null
    uploaded_at: Date | null
    status: $Enums.PaymentStatus | null
  }

  export type PaymentProofMaxAggregateOutputType = {
    payment_proof_id: number | null
    order_id: number | null
    image_url: string | null
    uploaded_at: Date | null
    status: $Enums.PaymentStatus | null
  }

  export type PaymentProofCountAggregateOutputType = {
    payment_proof_id: number
    order_id: number
    image_url: number
    uploaded_at: number
    status: number
    _all: number
  }


  export type PaymentProofAvgAggregateInputType = {
    payment_proof_id?: true
    order_id?: true
  }

  export type PaymentProofSumAggregateInputType = {
    payment_proof_id?: true
    order_id?: true
  }

  export type PaymentProofMinAggregateInputType = {
    payment_proof_id?: true
    order_id?: true
    image_url?: true
    uploaded_at?: true
    status?: true
  }

  export type PaymentProofMaxAggregateInputType = {
    payment_proof_id?: true
    order_id?: true
    image_url?: true
    uploaded_at?: true
    status?: true
  }

  export type PaymentProofCountAggregateInputType = {
    payment_proof_id?: true
    order_id?: true
    image_url?: true
    uploaded_at?: true
    status?: true
    _all?: true
  }

  export type PaymentProofAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentProof to aggregate.
     */
    where?: PaymentProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentProofs to fetch.
     */
    orderBy?: PaymentProofOrderByWithRelationInput | PaymentProofOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentProofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentProofs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentProofs
    **/
    _count?: true | PaymentProofCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentProofAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentProofSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentProofMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentProofMaxAggregateInputType
  }

  export type GetPaymentProofAggregateType<T extends PaymentProofAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentProof]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentProof[P]>
      : GetScalarType<T[P], AggregatePaymentProof[P]>
  }




  export type PaymentProofGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentProofWhereInput
    orderBy?: PaymentProofOrderByWithAggregationInput | PaymentProofOrderByWithAggregationInput[]
    by: PaymentProofScalarFieldEnum[] | PaymentProofScalarFieldEnum
    having?: PaymentProofScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentProofCountAggregateInputType | true
    _avg?: PaymentProofAvgAggregateInputType
    _sum?: PaymentProofSumAggregateInputType
    _min?: PaymentProofMinAggregateInputType
    _max?: PaymentProofMaxAggregateInputType
  }

  export type PaymentProofGroupByOutputType = {
    payment_proof_id: number
    order_id: number
    image_url: string
    uploaded_at: Date
    status: $Enums.PaymentStatus
    _count: PaymentProofCountAggregateOutputType | null
    _avg: PaymentProofAvgAggregateOutputType | null
    _sum: PaymentProofSumAggregateOutputType | null
    _min: PaymentProofMinAggregateOutputType | null
    _max: PaymentProofMaxAggregateOutputType | null
  }

  type GetPaymentProofGroupByPayload<T extends PaymentProofGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentProofGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentProofGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentProofGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentProofGroupByOutputType[P]>
        }
      >
    >


  export type PaymentProofSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    payment_proof_id?: boolean
    order_id?: boolean
    image_url?: boolean
    uploaded_at?: boolean
    status?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentProof"]>

  export type PaymentProofSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    payment_proof_id?: boolean
    order_id?: boolean
    image_url?: boolean
    uploaded_at?: boolean
    status?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentProof"]>

  export type PaymentProofSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    payment_proof_id?: boolean
    order_id?: boolean
    image_url?: boolean
    uploaded_at?: boolean
    status?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentProof"]>

  export type PaymentProofSelectScalar = {
    payment_proof_id?: boolean
    order_id?: boolean
    image_url?: boolean
    uploaded_at?: boolean
    status?: boolean
  }

  export type PaymentProofOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"payment_proof_id" | "order_id" | "image_url" | "uploaded_at" | "status", ExtArgs["result"]["paymentProof"]>
  export type PaymentProofInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type PaymentProofIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type PaymentProofIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }

  export type $PaymentProofPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentProof"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      payment_proof_id: number
      order_id: number
      image_url: string
      uploaded_at: Date
      status: $Enums.PaymentStatus
    }, ExtArgs["result"]["paymentProof"]>
    composites: {}
  }

  type PaymentProofGetPayload<S extends boolean | null | undefined | PaymentProofDefaultArgs> = $Result.GetResult<Prisma.$PaymentProofPayload, S>

  type PaymentProofCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentProofFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentProofCountAggregateInputType | true
    }

  export interface PaymentProofDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentProof'], meta: { name: 'PaymentProof' } }
    /**
     * Find zero or one PaymentProof that matches the filter.
     * @param {PaymentProofFindUniqueArgs} args - Arguments to find a PaymentProof
     * @example
     * // Get one PaymentProof
     * const paymentProof = await prisma.paymentProof.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentProofFindUniqueArgs>(args: SelectSubset<T, PaymentProofFindUniqueArgs<ExtArgs>>): Prisma__PaymentProofClient<$Result.GetResult<Prisma.$PaymentProofPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one PaymentProof that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentProofFindUniqueOrThrowArgs} args - Arguments to find a PaymentProof
     * @example
     * // Get one PaymentProof
     * const paymentProof = await prisma.paymentProof.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentProofFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentProofFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentProofClient<$Result.GetResult<Prisma.$PaymentProofPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first PaymentProof that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentProofFindFirstArgs} args - Arguments to find a PaymentProof
     * @example
     * // Get one PaymentProof
     * const paymentProof = await prisma.paymentProof.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentProofFindFirstArgs>(args?: SelectSubset<T, PaymentProofFindFirstArgs<ExtArgs>>): Prisma__PaymentProofClient<$Result.GetResult<Prisma.$PaymentProofPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first PaymentProof that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentProofFindFirstOrThrowArgs} args - Arguments to find a PaymentProof
     * @example
     * // Get one PaymentProof
     * const paymentProof = await prisma.paymentProof.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentProofFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentProofFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentProofClient<$Result.GetResult<Prisma.$PaymentProofPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more PaymentProofs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentProofFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentProofs
     * const paymentProofs = await prisma.paymentProof.findMany()
     * 
     * // Get first 10 PaymentProofs
     * const paymentProofs = await prisma.paymentProof.findMany({ take: 10 })
     * 
     * // Only select the `payment_proof_id`
     * const paymentProofWithPayment_proof_idOnly = await prisma.paymentProof.findMany({ select: { payment_proof_id: true } })
     * 
     */
    findMany<T extends PaymentProofFindManyArgs>(args?: SelectSubset<T, PaymentProofFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentProofPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a PaymentProof.
     * @param {PaymentProofCreateArgs} args - Arguments to create a PaymentProof.
     * @example
     * // Create one PaymentProof
     * const PaymentProof = await prisma.paymentProof.create({
     *   data: {
     *     // ... data to create a PaymentProof
     *   }
     * })
     * 
     */
    create<T extends PaymentProofCreateArgs>(args: SelectSubset<T, PaymentProofCreateArgs<ExtArgs>>): Prisma__PaymentProofClient<$Result.GetResult<Prisma.$PaymentProofPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many PaymentProofs.
     * @param {PaymentProofCreateManyArgs} args - Arguments to create many PaymentProofs.
     * @example
     * // Create many PaymentProofs
     * const paymentProof = await prisma.paymentProof.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentProofCreateManyArgs>(args?: SelectSubset<T, PaymentProofCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PaymentProofs and returns the data saved in the database.
     * @param {PaymentProofCreateManyAndReturnArgs} args - Arguments to create many PaymentProofs.
     * @example
     * // Create many PaymentProofs
     * const paymentProof = await prisma.paymentProof.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PaymentProofs and only return the `payment_proof_id`
     * const paymentProofWithPayment_proof_idOnly = await prisma.paymentProof.createManyAndReturn({
     *   select: { payment_proof_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentProofCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentProofCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentProofPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a PaymentProof.
     * @param {PaymentProofDeleteArgs} args - Arguments to delete one PaymentProof.
     * @example
     * // Delete one PaymentProof
     * const PaymentProof = await prisma.paymentProof.delete({
     *   where: {
     *     // ... filter to delete one PaymentProof
     *   }
     * })
     * 
     */
    delete<T extends PaymentProofDeleteArgs>(args: SelectSubset<T, PaymentProofDeleteArgs<ExtArgs>>): Prisma__PaymentProofClient<$Result.GetResult<Prisma.$PaymentProofPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one PaymentProof.
     * @param {PaymentProofUpdateArgs} args - Arguments to update one PaymentProof.
     * @example
     * // Update one PaymentProof
     * const paymentProof = await prisma.paymentProof.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentProofUpdateArgs>(args: SelectSubset<T, PaymentProofUpdateArgs<ExtArgs>>): Prisma__PaymentProofClient<$Result.GetResult<Prisma.$PaymentProofPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more PaymentProofs.
     * @param {PaymentProofDeleteManyArgs} args - Arguments to filter PaymentProofs to delete.
     * @example
     * // Delete a few PaymentProofs
     * const { count } = await prisma.paymentProof.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentProofDeleteManyArgs>(args?: SelectSubset<T, PaymentProofDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentProofs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentProofUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentProofs
     * const paymentProof = await prisma.paymentProof.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentProofUpdateManyArgs>(args: SelectSubset<T, PaymentProofUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentProofs and returns the data updated in the database.
     * @param {PaymentProofUpdateManyAndReturnArgs} args - Arguments to update many PaymentProofs.
     * @example
     * // Update many PaymentProofs
     * const paymentProof = await prisma.paymentProof.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PaymentProofs and only return the `payment_proof_id`
     * const paymentProofWithPayment_proof_idOnly = await prisma.paymentProof.updateManyAndReturn({
     *   select: { payment_proof_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentProofUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentProofUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentProofPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one PaymentProof.
     * @param {PaymentProofUpsertArgs} args - Arguments to update or create a PaymentProof.
     * @example
     * // Update or create a PaymentProof
     * const paymentProof = await prisma.paymentProof.upsert({
     *   create: {
     *     // ... data to create a PaymentProof
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentProof we want to update
     *   }
     * })
     */
    upsert<T extends PaymentProofUpsertArgs>(args: SelectSubset<T, PaymentProofUpsertArgs<ExtArgs>>): Prisma__PaymentProofClient<$Result.GetResult<Prisma.$PaymentProofPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of PaymentProofs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentProofCountArgs} args - Arguments to filter PaymentProofs to count.
     * @example
     * // Count the number of PaymentProofs
     * const count = await prisma.paymentProof.count({
     *   where: {
     *     // ... the filter for the PaymentProofs we want to count
     *   }
     * })
    **/
    count<T extends PaymentProofCountArgs>(
      args?: Subset<T, PaymentProofCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentProofCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentProof.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentProofAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentProofAggregateArgs>(args: Subset<T, PaymentProofAggregateArgs>): Prisma.PrismaPromise<GetPaymentProofAggregateType<T>>

    /**
     * Group by PaymentProof.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentProofGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentProofGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentProofGroupByArgs['orderBy'] }
        : { orderBy?: PaymentProofGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentProofGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentProofGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentProof model
   */
  readonly fields: PaymentProofFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentProof.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentProofClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentProof model
   */ 
  interface PaymentProofFieldRefs {
    readonly payment_proof_id: FieldRef<"PaymentProof", 'Int'>
    readonly order_id: FieldRef<"PaymentProof", 'Int'>
    readonly image_url: FieldRef<"PaymentProof", 'String'>
    readonly uploaded_at: FieldRef<"PaymentProof", 'DateTime'>
    readonly status: FieldRef<"PaymentProof", 'PaymentStatus'>
  }
    

  // Custom InputTypes
  /**
   * PaymentProof findUnique
   */
  export type PaymentProofFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentProof
     */
    select?: PaymentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentProof
     */
    omit?: PaymentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentProofInclude<ExtArgs> | null
    /**
     * Filter, which PaymentProof to fetch.
     */
    where: PaymentProofWhereUniqueInput
  }

  /**
   * PaymentProof findUniqueOrThrow
   */
  export type PaymentProofFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentProof
     */
    select?: PaymentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentProof
     */
    omit?: PaymentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentProofInclude<ExtArgs> | null
    /**
     * Filter, which PaymentProof to fetch.
     */
    where: PaymentProofWhereUniqueInput
  }

  /**
   * PaymentProof findFirst
   */
  export type PaymentProofFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentProof
     */
    select?: PaymentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentProof
     */
    omit?: PaymentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentProofInclude<ExtArgs> | null
    /**
     * Filter, which PaymentProof to fetch.
     */
    where?: PaymentProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentProofs to fetch.
     */
    orderBy?: PaymentProofOrderByWithRelationInput | PaymentProofOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentProofs.
     */
    cursor?: PaymentProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentProofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentProofs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentProofs.
     */
    distinct?: PaymentProofScalarFieldEnum | PaymentProofScalarFieldEnum[]
  }

  /**
   * PaymentProof findFirstOrThrow
   */
  export type PaymentProofFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentProof
     */
    select?: PaymentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentProof
     */
    omit?: PaymentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentProofInclude<ExtArgs> | null
    /**
     * Filter, which PaymentProof to fetch.
     */
    where?: PaymentProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentProofs to fetch.
     */
    orderBy?: PaymentProofOrderByWithRelationInput | PaymentProofOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentProofs.
     */
    cursor?: PaymentProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentProofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentProofs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentProofs.
     */
    distinct?: PaymentProofScalarFieldEnum | PaymentProofScalarFieldEnum[]
  }

  /**
   * PaymentProof findMany
   */
  export type PaymentProofFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentProof
     */
    select?: PaymentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentProof
     */
    omit?: PaymentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentProofInclude<ExtArgs> | null
    /**
     * Filter, which PaymentProofs to fetch.
     */
    where?: PaymentProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentProofs to fetch.
     */
    orderBy?: PaymentProofOrderByWithRelationInput | PaymentProofOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentProofs.
     */
    cursor?: PaymentProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentProofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentProofs.
     */
    skip?: number
    distinct?: PaymentProofScalarFieldEnum | PaymentProofScalarFieldEnum[]
  }

  /**
   * PaymentProof create
   */
  export type PaymentProofCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentProof
     */
    select?: PaymentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentProof
     */
    omit?: PaymentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentProofInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentProof.
     */
    data: XOR<PaymentProofCreateInput, PaymentProofUncheckedCreateInput>
  }

  /**
   * PaymentProof createMany
   */
  export type PaymentProofCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentProofs.
     */
    data: PaymentProofCreateManyInput | PaymentProofCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentProof createManyAndReturn
   */
  export type PaymentProofCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentProof
     */
    select?: PaymentProofSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentProof
     */
    omit?: PaymentProofOmit<ExtArgs> | null
    /**
     * The data used to create many PaymentProofs.
     */
    data: PaymentProofCreateManyInput | PaymentProofCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentProofIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentProof update
   */
  export type PaymentProofUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentProof
     */
    select?: PaymentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentProof
     */
    omit?: PaymentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentProofInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentProof.
     */
    data: XOR<PaymentProofUpdateInput, PaymentProofUncheckedUpdateInput>
    /**
     * Choose, which PaymentProof to update.
     */
    where: PaymentProofWhereUniqueInput
  }

  /**
   * PaymentProof updateMany
   */
  export type PaymentProofUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentProofs.
     */
    data: XOR<PaymentProofUpdateManyMutationInput, PaymentProofUncheckedUpdateManyInput>
    /**
     * Filter which PaymentProofs to update
     */
    where?: PaymentProofWhereInput
    /**
     * Limit how many PaymentProofs to update.
     */
    limit?: number
  }

  /**
   * PaymentProof updateManyAndReturn
   */
  export type PaymentProofUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentProof
     */
    select?: PaymentProofSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentProof
     */
    omit?: PaymentProofOmit<ExtArgs> | null
    /**
     * The data used to update PaymentProofs.
     */
    data: XOR<PaymentProofUpdateManyMutationInput, PaymentProofUncheckedUpdateManyInput>
    /**
     * Filter which PaymentProofs to update
     */
    where?: PaymentProofWhereInput
    /**
     * Limit how many PaymentProofs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentProofIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentProof upsert
   */
  export type PaymentProofUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentProof
     */
    select?: PaymentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentProof
     */
    omit?: PaymentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentProofInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentProof to update in case it exists.
     */
    where: PaymentProofWhereUniqueInput
    /**
     * In case the PaymentProof found by the `where` argument doesn't exist, create a new PaymentProof with this data.
     */
    create: XOR<PaymentProofCreateInput, PaymentProofUncheckedCreateInput>
    /**
     * In case the PaymentProof was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentProofUpdateInput, PaymentProofUncheckedUpdateInput>
  }

  /**
   * PaymentProof delete
   */
  export type PaymentProofDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentProof
     */
    select?: PaymentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentProof
     */
    omit?: PaymentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentProofInclude<ExtArgs> | null
    /**
     * Filter which PaymentProof to delete.
     */
    where: PaymentProofWhereUniqueInput
  }

  /**
   * PaymentProof deleteMany
   */
  export type PaymentProofDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentProofs to delete
     */
    where?: PaymentProofWhereInput
    /**
     * Limit how many PaymentProofs to delete.
     */
    limit?: number
  }

  /**
   * PaymentProof without action
   */
  export type PaymentProofDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentProof
     */
    select?: PaymentProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentProof
     */
    omit?: PaymentProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentProofInclude<ExtArgs> | null
  }


  /**
   * Model OrderCancel
   */

  export type AggregateOrderCancel = {
    _count: OrderCancelCountAggregateOutputType | null
    _avg: OrderCancelAvgAggregateOutputType | null
    _sum: OrderCancelSumAggregateOutputType | null
    _min: OrderCancelMinAggregateOutputType | null
    _max: OrderCancelMaxAggregateOutputType | null
  }

  export type OrderCancelAvgAggregateOutputType = {
    order_cancel_id: number | null
    order_id: number | null
  }

  export type OrderCancelSumAggregateOutputType = {
    order_cancel_id: number | null
    order_id: number | null
  }

  export type OrderCancelMinAggregateOutputType = {
    order_cancel_id: number | null
    order_id: number | null
    reason: string | null
    canceled_at: Date | null
  }

  export type OrderCancelMaxAggregateOutputType = {
    order_cancel_id: number | null
    order_id: number | null
    reason: string | null
    canceled_at: Date | null
  }

  export type OrderCancelCountAggregateOutputType = {
    order_cancel_id: number
    order_id: number
    reason: number
    canceled_at: number
    _all: number
  }


  export type OrderCancelAvgAggregateInputType = {
    order_cancel_id?: true
    order_id?: true
  }

  export type OrderCancelSumAggregateInputType = {
    order_cancel_id?: true
    order_id?: true
  }

  export type OrderCancelMinAggregateInputType = {
    order_cancel_id?: true
    order_id?: true
    reason?: true
    canceled_at?: true
  }

  export type OrderCancelMaxAggregateInputType = {
    order_cancel_id?: true
    order_id?: true
    reason?: true
    canceled_at?: true
  }

  export type OrderCancelCountAggregateInputType = {
    order_cancel_id?: true
    order_id?: true
    reason?: true
    canceled_at?: true
    _all?: true
  }

  export type OrderCancelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderCancel to aggregate.
     */
    where?: OrderCancelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderCancels to fetch.
     */
    orderBy?: OrderCancelOrderByWithRelationInput | OrderCancelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderCancelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderCancels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderCancels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderCancels
    **/
    _count?: true | OrderCancelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderCancelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderCancelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderCancelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderCancelMaxAggregateInputType
  }

  export type GetOrderCancelAggregateType<T extends OrderCancelAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderCancel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderCancel[P]>
      : GetScalarType<T[P], AggregateOrderCancel[P]>
  }




  export type OrderCancelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderCancelWhereInput
    orderBy?: OrderCancelOrderByWithAggregationInput | OrderCancelOrderByWithAggregationInput[]
    by: OrderCancelScalarFieldEnum[] | OrderCancelScalarFieldEnum
    having?: OrderCancelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCancelCountAggregateInputType | true
    _avg?: OrderCancelAvgAggregateInputType
    _sum?: OrderCancelSumAggregateInputType
    _min?: OrderCancelMinAggregateInputType
    _max?: OrderCancelMaxAggregateInputType
  }

  export type OrderCancelGroupByOutputType = {
    order_cancel_id: number
    order_id: number
    reason: string
    canceled_at: Date
    _count: OrderCancelCountAggregateOutputType | null
    _avg: OrderCancelAvgAggregateOutputType | null
    _sum: OrderCancelSumAggregateOutputType | null
    _min: OrderCancelMinAggregateOutputType | null
    _max: OrderCancelMaxAggregateOutputType | null
  }

  type GetOrderCancelGroupByPayload<T extends OrderCancelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderCancelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderCancelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderCancelGroupByOutputType[P]>
            : GetScalarType<T[P], OrderCancelGroupByOutputType[P]>
        }
      >
    >


  export type OrderCancelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    order_cancel_id?: boolean
    order_id?: boolean
    reason?: boolean
    canceled_at?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderCancel"]>

  export type OrderCancelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    order_cancel_id?: boolean
    order_id?: boolean
    reason?: boolean
    canceled_at?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderCancel"]>

  export type OrderCancelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    order_cancel_id?: boolean
    order_id?: boolean
    reason?: boolean
    canceled_at?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderCancel"]>

  export type OrderCancelSelectScalar = {
    order_cancel_id?: boolean
    order_id?: boolean
    reason?: boolean
    canceled_at?: boolean
  }

  export type OrderCancelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"order_cancel_id" | "order_id" | "reason" | "canceled_at", ExtArgs["result"]["orderCancel"]>
  export type OrderCancelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type OrderCancelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type OrderCancelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }

  export type $OrderCancelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderCancel"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      order_cancel_id: number
      order_id: number
      reason: string
      canceled_at: Date
    }, ExtArgs["result"]["orderCancel"]>
    composites: {}
  }

  type OrderCancelGetPayload<S extends boolean | null | undefined | OrderCancelDefaultArgs> = $Result.GetResult<Prisma.$OrderCancelPayload, S>

  type OrderCancelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderCancelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCancelCountAggregateInputType | true
    }

  export interface OrderCancelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderCancel'], meta: { name: 'OrderCancel' } }
    /**
     * Find zero or one OrderCancel that matches the filter.
     * @param {OrderCancelFindUniqueArgs} args - Arguments to find a OrderCancel
     * @example
     * // Get one OrderCancel
     * const orderCancel = await prisma.orderCancel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderCancelFindUniqueArgs>(args: SelectSubset<T, OrderCancelFindUniqueArgs<ExtArgs>>): Prisma__OrderCancelClient<$Result.GetResult<Prisma.$OrderCancelPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one OrderCancel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderCancelFindUniqueOrThrowArgs} args - Arguments to find a OrderCancel
     * @example
     * // Get one OrderCancel
     * const orderCancel = await prisma.orderCancel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderCancelFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderCancelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderCancelClient<$Result.GetResult<Prisma.$OrderCancelPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first OrderCancel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCancelFindFirstArgs} args - Arguments to find a OrderCancel
     * @example
     * // Get one OrderCancel
     * const orderCancel = await prisma.orderCancel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderCancelFindFirstArgs>(args?: SelectSubset<T, OrderCancelFindFirstArgs<ExtArgs>>): Prisma__OrderCancelClient<$Result.GetResult<Prisma.$OrderCancelPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first OrderCancel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCancelFindFirstOrThrowArgs} args - Arguments to find a OrderCancel
     * @example
     * // Get one OrderCancel
     * const orderCancel = await prisma.orderCancel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderCancelFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderCancelFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderCancelClient<$Result.GetResult<Prisma.$OrderCancelPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more OrderCancels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCancelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderCancels
     * const orderCancels = await prisma.orderCancel.findMany()
     * 
     * // Get first 10 OrderCancels
     * const orderCancels = await prisma.orderCancel.findMany({ take: 10 })
     * 
     * // Only select the `order_cancel_id`
     * const orderCancelWithOrder_cancel_idOnly = await prisma.orderCancel.findMany({ select: { order_cancel_id: true } })
     * 
     */
    findMany<T extends OrderCancelFindManyArgs>(args?: SelectSubset<T, OrderCancelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderCancelPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a OrderCancel.
     * @param {OrderCancelCreateArgs} args - Arguments to create a OrderCancel.
     * @example
     * // Create one OrderCancel
     * const OrderCancel = await prisma.orderCancel.create({
     *   data: {
     *     // ... data to create a OrderCancel
     *   }
     * })
     * 
     */
    create<T extends OrderCancelCreateArgs>(args: SelectSubset<T, OrderCancelCreateArgs<ExtArgs>>): Prisma__OrderCancelClient<$Result.GetResult<Prisma.$OrderCancelPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many OrderCancels.
     * @param {OrderCancelCreateManyArgs} args - Arguments to create many OrderCancels.
     * @example
     * // Create many OrderCancels
     * const orderCancel = await prisma.orderCancel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCancelCreateManyArgs>(args?: SelectSubset<T, OrderCancelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderCancels and returns the data saved in the database.
     * @param {OrderCancelCreateManyAndReturnArgs} args - Arguments to create many OrderCancels.
     * @example
     * // Create many OrderCancels
     * const orderCancel = await prisma.orderCancel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderCancels and only return the `order_cancel_id`
     * const orderCancelWithOrder_cancel_idOnly = await prisma.orderCancel.createManyAndReturn({
     *   select: { order_cancel_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCancelCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCancelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderCancelPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a OrderCancel.
     * @param {OrderCancelDeleteArgs} args - Arguments to delete one OrderCancel.
     * @example
     * // Delete one OrderCancel
     * const OrderCancel = await prisma.orderCancel.delete({
     *   where: {
     *     // ... filter to delete one OrderCancel
     *   }
     * })
     * 
     */
    delete<T extends OrderCancelDeleteArgs>(args: SelectSubset<T, OrderCancelDeleteArgs<ExtArgs>>): Prisma__OrderCancelClient<$Result.GetResult<Prisma.$OrderCancelPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one OrderCancel.
     * @param {OrderCancelUpdateArgs} args - Arguments to update one OrderCancel.
     * @example
     * // Update one OrderCancel
     * const orderCancel = await prisma.orderCancel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderCancelUpdateArgs>(args: SelectSubset<T, OrderCancelUpdateArgs<ExtArgs>>): Prisma__OrderCancelClient<$Result.GetResult<Prisma.$OrderCancelPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more OrderCancels.
     * @param {OrderCancelDeleteManyArgs} args - Arguments to filter OrderCancels to delete.
     * @example
     * // Delete a few OrderCancels
     * const { count } = await prisma.orderCancel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderCancelDeleteManyArgs>(args?: SelectSubset<T, OrderCancelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderCancels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCancelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderCancels
     * const orderCancel = await prisma.orderCancel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderCancelUpdateManyArgs>(args: SelectSubset<T, OrderCancelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderCancels and returns the data updated in the database.
     * @param {OrderCancelUpdateManyAndReturnArgs} args - Arguments to update many OrderCancels.
     * @example
     * // Update many OrderCancels
     * const orderCancel = await prisma.orderCancel.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderCancels and only return the `order_cancel_id`
     * const orderCancelWithOrder_cancel_idOnly = await prisma.orderCancel.updateManyAndReturn({
     *   select: { order_cancel_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderCancelUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderCancelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderCancelPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one OrderCancel.
     * @param {OrderCancelUpsertArgs} args - Arguments to update or create a OrderCancel.
     * @example
     * // Update or create a OrderCancel
     * const orderCancel = await prisma.orderCancel.upsert({
     *   create: {
     *     // ... data to create a OrderCancel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderCancel we want to update
     *   }
     * })
     */
    upsert<T extends OrderCancelUpsertArgs>(args: SelectSubset<T, OrderCancelUpsertArgs<ExtArgs>>): Prisma__OrderCancelClient<$Result.GetResult<Prisma.$OrderCancelPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of OrderCancels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCancelCountArgs} args - Arguments to filter OrderCancels to count.
     * @example
     * // Count the number of OrderCancels
     * const count = await prisma.orderCancel.count({
     *   where: {
     *     // ... the filter for the OrderCancels we want to count
     *   }
     * })
    **/
    count<T extends OrderCancelCountArgs>(
      args?: Subset<T, OrderCancelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCancelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderCancel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCancelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderCancelAggregateArgs>(args: Subset<T, OrderCancelAggregateArgs>): Prisma.PrismaPromise<GetOrderCancelAggregateType<T>>

    /**
     * Group by OrderCancel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCancelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderCancelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderCancelGroupByArgs['orderBy'] }
        : { orderBy?: OrderCancelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderCancelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderCancelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderCancel model
   */
  readonly fields: OrderCancelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderCancel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderCancelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderCancel model
   */ 
  interface OrderCancelFieldRefs {
    readonly order_cancel_id: FieldRef<"OrderCancel", 'Int'>
    readonly order_id: FieldRef<"OrderCancel", 'Int'>
    readonly reason: FieldRef<"OrderCancel", 'String'>
    readonly canceled_at: FieldRef<"OrderCancel", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OrderCancel findUnique
   */
  export type OrderCancelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCancel
     */
    select?: OrderCancelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderCancel
     */
    omit?: OrderCancelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderCancelInclude<ExtArgs> | null
    /**
     * Filter, which OrderCancel to fetch.
     */
    where: OrderCancelWhereUniqueInput
  }

  /**
   * OrderCancel findUniqueOrThrow
   */
  export type OrderCancelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCancel
     */
    select?: OrderCancelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderCancel
     */
    omit?: OrderCancelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderCancelInclude<ExtArgs> | null
    /**
     * Filter, which OrderCancel to fetch.
     */
    where: OrderCancelWhereUniqueInput
  }

  /**
   * OrderCancel findFirst
   */
  export type OrderCancelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCancel
     */
    select?: OrderCancelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderCancel
     */
    omit?: OrderCancelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderCancelInclude<ExtArgs> | null
    /**
     * Filter, which OrderCancel to fetch.
     */
    where?: OrderCancelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderCancels to fetch.
     */
    orderBy?: OrderCancelOrderByWithRelationInput | OrderCancelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderCancels.
     */
    cursor?: OrderCancelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderCancels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderCancels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderCancels.
     */
    distinct?: OrderCancelScalarFieldEnum | OrderCancelScalarFieldEnum[]
  }

  /**
   * OrderCancel findFirstOrThrow
   */
  export type OrderCancelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCancel
     */
    select?: OrderCancelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderCancel
     */
    omit?: OrderCancelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderCancelInclude<ExtArgs> | null
    /**
     * Filter, which OrderCancel to fetch.
     */
    where?: OrderCancelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderCancels to fetch.
     */
    orderBy?: OrderCancelOrderByWithRelationInput | OrderCancelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderCancels.
     */
    cursor?: OrderCancelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderCancels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderCancels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderCancels.
     */
    distinct?: OrderCancelScalarFieldEnum | OrderCancelScalarFieldEnum[]
  }

  /**
   * OrderCancel findMany
   */
  export type OrderCancelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCancel
     */
    select?: OrderCancelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderCancel
     */
    omit?: OrderCancelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderCancelInclude<ExtArgs> | null
    /**
     * Filter, which OrderCancels to fetch.
     */
    where?: OrderCancelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderCancels to fetch.
     */
    orderBy?: OrderCancelOrderByWithRelationInput | OrderCancelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderCancels.
     */
    cursor?: OrderCancelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderCancels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderCancels.
     */
    skip?: number
    distinct?: OrderCancelScalarFieldEnum | OrderCancelScalarFieldEnum[]
  }

  /**
   * OrderCancel create
   */
  export type OrderCancelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCancel
     */
    select?: OrderCancelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderCancel
     */
    omit?: OrderCancelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderCancelInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderCancel.
     */
    data: XOR<OrderCancelCreateInput, OrderCancelUncheckedCreateInput>
  }

  /**
   * OrderCancel createMany
   */
  export type OrderCancelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderCancels.
     */
    data: OrderCancelCreateManyInput | OrderCancelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderCancel createManyAndReturn
   */
  export type OrderCancelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCancel
     */
    select?: OrderCancelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderCancel
     */
    omit?: OrderCancelOmit<ExtArgs> | null
    /**
     * The data used to create many OrderCancels.
     */
    data: OrderCancelCreateManyInput | OrderCancelCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderCancelIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderCancel update
   */
  export type OrderCancelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCancel
     */
    select?: OrderCancelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderCancel
     */
    omit?: OrderCancelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderCancelInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderCancel.
     */
    data: XOR<OrderCancelUpdateInput, OrderCancelUncheckedUpdateInput>
    /**
     * Choose, which OrderCancel to update.
     */
    where: OrderCancelWhereUniqueInput
  }

  /**
   * OrderCancel updateMany
   */
  export type OrderCancelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderCancels.
     */
    data: XOR<OrderCancelUpdateManyMutationInput, OrderCancelUncheckedUpdateManyInput>
    /**
     * Filter which OrderCancels to update
     */
    where?: OrderCancelWhereInput
    /**
     * Limit how many OrderCancels to update.
     */
    limit?: number
  }

  /**
   * OrderCancel updateManyAndReturn
   */
  export type OrderCancelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCancel
     */
    select?: OrderCancelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderCancel
     */
    omit?: OrderCancelOmit<ExtArgs> | null
    /**
     * The data used to update OrderCancels.
     */
    data: XOR<OrderCancelUpdateManyMutationInput, OrderCancelUncheckedUpdateManyInput>
    /**
     * Filter which OrderCancels to update
     */
    where?: OrderCancelWhereInput
    /**
     * Limit how many OrderCancels to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderCancelIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderCancel upsert
   */
  export type OrderCancelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCancel
     */
    select?: OrderCancelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderCancel
     */
    omit?: OrderCancelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderCancelInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderCancel to update in case it exists.
     */
    where: OrderCancelWhereUniqueInput
    /**
     * In case the OrderCancel found by the `where` argument doesn't exist, create a new OrderCancel with this data.
     */
    create: XOR<OrderCancelCreateInput, OrderCancelUncheckedCreateInput>
    /**
     * In case the OrderCancel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderCancelUpdateInput, OrderCancelUncheckedUpdateInput>
  }

  /**
   * OrderCancel delete
   */
  export type OrderCancelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCancel
     */
    select?: OrderCancelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderCancel
     */
    omit?: OrderCancelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderCancelInclude<ExtArgs> | null
    /**
     * Filter which OrderCancel to delete.
     */
    where: OrderCancelWhereUniqueInput
  }

  /**
   * OrderCancel deleteMany
   */
  export type OrderCancelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderCancels to delete
     */
    where?: OrderCancelWhereInput
    /**
     * Limit how many OrderCancels to delete.
     */
    limit?: number
  }

  /**
   * OrderCancel without action
   */
  export type OrderCancelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCancel
     */
    select?: OrderCancelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderCancel
     */
    omit?: OrderCancelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderCancelInclude<ExtArgs> | null
  }


  /**
   * Model AdminOrder
   */

  export type AggregateAdminOrder = {
    _count: AdminOrderCountAggregateOutputType | null
    _avg: AdminOrderAvgAggregateOutputType | null
    _sum: AdminOrderSumAggregateOutputType | null
    _min: AdminOrderMinAggregateOutputType | null
    _max: AdminOrderMaxAggregateOutputType | null
  }

  export type AdminOrderAvgAggregateOutputType = {
    admin_order_id: number | null
    admin_id: number | null
    order_id: number | null
  }

  export type AdminOrderSumAggregateOutputType = {
    admin_order_id: number | null
    admin_id: number | null
    order_id: number | null
  }

  export type AdminOrderMinAggregateOutputType = {
    admin_order_id: number | null
    admin_id: number | null
    order_id: number | null
    action: $Enums.ActionEnum | null
    action_time: Date | null
  }

  export type AdminOrderMaxAggregateOutputType = {
    admin_order_id: number | null
    admin_id: number | null
    order_id: number | null
    action: $Enums.ActionEnum | null
    action_time: Date | null
  }

  export type AdminOrderCountAggregateOutputType = {
    admin_order_id: number
    admin_id: number
    order_id: number
    action: number
    action_time: number
    _all: number
  }


  export type AdminOrderAvgAggregateInputType = {
    admin_order_id?: true
    admin_id?: true
    order_id?: true
  }

  export type AdminOrderSumAggregateInputType = {
    admin_order_id?: true
    admin_id?: true
    order_id?: true
  }

  export type AdminOrderMinAggregateInputType = {
    admin_order_id?: true
    admin_id?: true
    order_id?: true
    action?: true
    action_time?: true
  }

  export type AdminOrderMaxAggregateInputType = {
    admin_order_id?: true
    admin_id?: true
    order_id?: true
    action?: true
    action_time?: true
  }

  export type AdminOrderCountAggregateInputType = {
    admin_order_id?: true
    admin_id?: true
    order_id?: true
    action?: true
    action_time?: true
    _all?: true
  }

  export type AdminOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminOrder to aggregate.
     */
    where?: AdminOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminOrders to fetch.
     */
    orderBy?: AdminOrderOrderByWithRelationInput | AdminOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminOrders
    **/
    _count?: true | AdminOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminOrderMaxAggregateInputType
  }

  export type GetAdminOrderAggregateType<T extends AdminOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminOrder[P]>
      : GetScalarType<T[P], AggregateAdminOrder[P]>
  }




  export type AdminOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminOrderWhereInput
    orderBy?: AdminOrderOrderByWithAggregationInput | AdminOrderOrderByWithAggregationInput[]
    by: AdminOrderScalarFieldEnum[] | AdminOrderScalarFieldEnum
    having?: AdminOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminOrderCountAggregateInputType | true
    _avg?: AdminOrderAvgAggregateInputType
    _sum?: AdminOrderSumAggregateInputType
    _min?: AdminOrderMinAggregateInputType
    _max?: AdminOrderMaxAggregateInputType
  }

  export type AdminOrderGroupByOutputType = {
    admin_order_id: number
    admin_id: number
    order_id: number
    action: $Enums.ActionEnum
    action_time: Date
    _count: AdminOrderCountAggregateOutputType | null
    _avg: AdminOrderAvgAggregateOutputType | null
    _sum: AdminOrderSumAggregateOutputType | null
    _min: AdminOrderMinAggregateOutputType | null
    _max: AdminOrderMaxAggregateOutputType | null
  }

  type GetAdminOrderGroupByPayload<T extends AdminOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminOrderGroupByOutputType[P]>
            : GetScalarType<T[P], AdminOrderGroupByOutputType[P]>
        }
      >
    >


  export type AdminOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    admin_order_id?: boolean
    admin_id?: boolean
    order_id?: boolean
    action?: boolean
    action_time?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminOrder"]>

  export type AdminOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    admin_order_id?: boolean
    admin_id?: boolean
    order_id?: boolean
    action?: boolean
    action_time?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminOrder"]>

  export type AdminOrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    admin_order_id?: boolean
    admin_id?: boolean
    order_id?: boolean
    action?: boolean
    action_time?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminOrder"]>

  export type AdminOrderSelectScalar = {
    admin_order_id?: boolean
    admin_id?: boolean
    order_id?: boolean
    action?: boolean
    action_time?: boolean
  }

  export type AdminOrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"admin_order_id" | "admin_id" | "order_id" | "action" | "action_time", ExtArgs["result"]["adminOrder"]>
  export type AdminOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type AdminOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }
  export type AdminOrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    order?: boolean | OrderDefaultArgs<ExtArgs>
  }

  export type $AdminOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminOrder"
    objects: {
      admin: Prisma.$AdminPayload<ExtArgs>
      order: Prisma.$OrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      admin_order_id: number
      admin_id: number
      order_id: number
      action: $Enums.ActionEnum
      action_time: Date
    }, ExtArgs["result"]["adminOrder"]>
    composites: {}
  }

  type AdminOrderGetPayload<S extends boolean | null | undefined | AdminOrderDefaultArgs> = $Result.GetResult<Prisma.$AdminOrderPayload, S>

  type AdminOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminOrderCountAggregateInputType | true
    }

  export interface AdminOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminOrder'], meta: { name: 'AdminOrder' } }
    /**
     * Find zero or one AdminOrder that matches the filter.
     * @param {AdminOrderFindUniqueArgs} args - Arguments to find a AdminOrder
     * @example
     * // Get one AdminOrder
     * const adminOrder = await prisma.adminOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminOrderFindUniqueArgs>(args: SelectSubset<T, AdminOrderFindUniqueArgs<ExtArgs>>): Prisma__AdminOrderClient<$Result.GetResult<Prisma.$AdminOrderPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one AdminOrder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminOrderFindUniqueOrThrowArgs} args - Arguments to find a AdminOrder
     * @example
     * // Get one AdminOrder
     * const adminOrder = await prisma.adminOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminOrderClient<$Result.GetResult<Prisma.$AdminOrderPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first AdminOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminOrderFindFirstArgs} args - Arguments to find a AdminOrder
     * @example
     * // Get one AdminOrder
     * const adminOrder = await prisma.adminOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminOrderFindFirstArgs>(args?: SelectSubset<T, AdminOrderFindFirstArgs<ExtArgs>>): Prisma__AdminOrderClient<$Result.GetResult<Prisma.$AdminOrderPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first AdminOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminOrderFindFirstOrThrowArgs} args - Arguments to find a AdminOrder
     * @example
     * // Get one AdminOrder
     * const adminOrder = await prisma.adminOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminOrderClient<$Result.GetResult<Prisma.$AdminOrderPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more AdminOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminOrders
     * const adminOrders = await prisma.adminOrder.findMany()
     * 
     * // Get first 10 AdminOrders
     * const adminOrders = await prisma.adminOrder.findMany({ take: 10 })
     * 
     * // Only select the `admin_order_id`
     * const adminOrderWithAdmin_order_idOnly = await prisma.adminOrder.findMany({ select: { admin_order_id: true } })
     * 
     */
    findMany<T extends AdminOrderFindManyArgs>(args?: SelectSubset<T, AdminOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminOrderPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a AdminOrder.
     * @param {AdminOrderCreateArgs} args - Arguments to create a AdminOrder.
     * @example
     * // Create one AdminOrder
     * const AdminOrder = await prisma.adminOrder.create({
     *   data: {
     *     // ... data to create a AdminOrder
     *   }
     * })
     * 
     */
    create<T extends AdminOrderCreateArgs>(args: SelectSubset<T, AdminOrderCreateArgs<ExtArgs>>): Prisma__AdminOrderClient<$Result.GetResult<Prisma.$AdminOrderPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many AdminOrders.
     * @param {AdminOrderCreateManyArgs} args - Arguments to create many AdminOrders.
     * @example
     * // Create many AdminOrders
     * const adminOrder = await prisma.adminOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminOrderCreateManyArgs>(args?: SelectSubset<T, AdminOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdminOrders and returns the data saved in the database.
     * @param {AdminOrderCreateManyAndReturnArgs} args - Arguments to create many AdminOrders.
     * @example
     * // Create many AdminOrders
     * const adminOrder = await prisma.adminOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdminOrders and only return the `admin_order_id`
     * const adminOrderWithAdmin_order_idOnly = await prisma.adminOrder.createManyAndReturn({
     *   select: { admin_order_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminOrderPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a AdminOrder.
     * @param {AdminOrderDeleteArgs} args - Arguments to delete one AdminOrder.
     * @example
     * // Delete one AdminOrder
     * const AdminOrder = await prisma.adminOrder.delete({
     *   where: {
     *     // ... filter to delete one AdminOrder
     *   }
     * })
     * 
     */
    delete<T extends AdminOrderDeleteArgs>(args: SelectSubset<T, AdminOrderDeleteArgs<ExtArgs>>): Prisma__AdminOrderClient<$Result.GetResult<Prisma.$AdminOrderPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one AdminOrder.
     * @param {AdminOrderUpdateArgs} args - Arguments to update one AdminOrder.
     * @example
     * // Update one AdminOrder
     * const adminOrder = await prisma.adminOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminOrderUpdateArgs>(args: SelectSubset<T, AdminOrderUpdateArgs<ExtArgs>>): Prisma__AdminOrderClient<$Result.GetResult<Prisma.$AdminOrderPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more AdminOrders.
     * @param {AdminOrderDeleteManyArgs} args - Arguments to filter AdminOrders to delete.
     * @example
     * // Delete a few AdminOrders
     * const { count } = await prisma.adminOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminOrderDeleteManyArgs>(args?: SelectSubset<T, AdminOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminOrders
     * const adminOrder = await prisma.adminOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminOrderUpdateManyArgs>(args: SelectSubset<T, AdminOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminOrders and returns the data updated in the database.
     * @param {AdminOrderUpdateManyAndReturnArgs} args - Arguments to update many AdminOrders.
     * @example
     * // Update many AdminOrders
     * const adminOrder = await prisma.adminOrder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AdminOrders and only return the `admin_order_id`
     * const adminOrderWithAdmin_order_idOnly = await prisma.adminOrder.updateManyAndReturn({
     *   select: { admin_order_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminOrderUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminOrderPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one AdminOrder.
     * @param {AdminOrderUpsertArgs} args - Arguments to update or create a AdminOrder.
     * @example
     * // Update or create a AdminOrder
     * const adminOrder = await prisma.adminOrder.upsert({
     *   create: {
     *     // ... data to create a AdminOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminOrder we want to update
     *   }
     * })
     */
    upsert<T extends AdminOrderUpsertArgs>(args: SelectSubset<T, AdminOrderUpsertArgs<ExtArgs>>): Prisma__AdminOrderClient<$Result.GetResult<Prisma.$AdminOrderPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of AdminOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminOrderCountArgs} args - Arguments to filter AdminOrders to count.
     * @example
     * // Count the number of AdminOrders
     * const count = await prisma.adminOrder.count({
     *   where: {
     *     // ... the filter for the AdminOrders we want to count
     *   }
     * })
    **/
    count<T extends AdminOrderCountArgs>(
      args?: Subset<T, AdminOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminOrderAggregateArgs>(args: Subset<T, AdminOrderAggregateArgs>): Prisma.PrismaPromise<GetAdminOrderAggregateType<T>>

    /**
     * Group by AdminOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminOrderGroupByArgs['orderBy'] }
        : { orderBy?: AdminOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminOrder model
   */
  readonly fields: AdminOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends AdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminDefaultArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminOrder model
   */ 
  interface AdminOrderFieldRefs {
    readonly admin_order_id: FieldRef<"AdminOrder", 'Int'>
    readonly admin_id: FieldRef<"AdminOrder", 'Int'>
    readonly order_id: FieldRef<"AdminOrder", 'Int'>
    readonly action: FieldRef<"AdminOrder", 'ActionEnum'>
    readonly action_time: FieldRef<"AdminOrder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AdminOrder findUnique
   */
  export type AdminOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminOrder
     */
    select?: AdminOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminOrder
     */
    omit?: AdminOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminOrderInclude<ExtArgs> | null
    /**
     * Filter, which AdminOrder to fetch.
     */
    where: AdminOrderWhereUniqueInput
  }

  /**
   * AdminOrder findUniqueOrThrow
   */
  export type AdminOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminOrder
     */
    select?: AdminOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminOrder
     */
    omit?: AdminOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminOrderInclude<ExtArgs> | null
    /**
     * Filter, which AdminOrder to fetch.
     */
    where: AdminOrderWhereUniqueInput
  }

  /**
   * AdminOrder findFirst
   */
  export type AdminOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminOrder
     */
    select?: AdminOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminOrder
     */
    omit?: AdminOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminOrderInclude<ExtArgs> | null
    /**
     * Filter, which AdminOrder to fetch.
     */
    where?: AdminOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminOrders to fetch.
     */
    orderBy?: AdminOrderOrderByWithRelationInput | AdminOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminOrders.
     */
    cursor?: AdminOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminOrders.
     */
    distinct?: AdminOrderScalarFieldEnum | AdminOrderScalarFieldEnum[]
  }

  /**
   * AdminOrder findFirstOrThrow
   */
  export type AdminOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminOrder
     */
    select?: AdminOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminOrder
     */
    omit?: AdminOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminOrderInclude<ExtArgs> | null
    /**
     * Filter, which AdminOrder to fetch.
     */
    where?: AdminOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminOrders to fetch.
     */
    orderBy?: AdminOrderOrderByWithRelationInput | AdminOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminOrders.
     */
    cursor?: AdminOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminOrders.
     */
    distinct?: AdminOrderScalarFieldEnum | AdminOrderScalarFieldEnum[]
  }

  /**
   * AdminOrder findMany
   */
  export type AdminOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminOrder
     */
    select?: AdminOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminOrder
     */
    omit?: AdminOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminOrderInclude<ExtArgs> | null
    /**
     * Filter, which AdminOrders to fetch.
     */
    where?: AdminOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminOrders to fetch.
     */
    orderBy?: AdminOrderOrderByWithRelationInput | AdminOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminOrders.
     */
    cursor?: AdminOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminOrders.
     */
    skip?: number
    distinct?: AdminOrderScalarFieldEnum | AdminOrderScalarFieldEnum[]
  }

  /**
   * AdminOrder create
   */
  export type AdminOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminOrder
     */
    select?: AdminOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminOrder
     */
    omit?: AdminOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a AdminOrder.
     */
    data: XOR<AdminOrderCreateInput, AdminOrderUncheckedCreateInput>
  }

  /**
   * AdminOrder createMany
   */
  export type AdminOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminOrders.
     */
    data: AdminOrderCreateManyInput | AdminOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminOrder createManyAndReturn
   */
  export type AdminOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminOrder
     */
    select?: AdminOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminOrder
     */
    omit?: AdminOrderOmit<ExtArgs> | null
    /**
     * The data used to create many AdminOrders.
     */
    data: AdminOrderCreateManyInput | AdminOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminOrder update
   */
  export type AdminOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminOrder
     */
    select?: AdminOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminOrder
     */
    omit?: AdminOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a AdminOrder.
     */
    data: XOR<AdminOrderUpdateInput, AdminOrderUncheckedUpdateInput>
    /**
     * Choose, which AdminOrder to update.
     */
    where: AdminOrderWhereUniqueInput
  }

  /**
   * AdminOrder updateMany
   */
  export type AdminOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminOrders.
     */
    data: XOR<AdminOrderUpdateManyMutationInput, AdminOrderUncheckedUpdateManyInput>
    /**
     * Filter which AdminOrders to update
     */
    where?: AdminOrderWhereInput
    /**
     * Limit how many AdminOrders to update.
     */
    limit?: number
  }

  /**
   * AdminOrder updateManyAndReturn
   */
  export type AdminOrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminOrder
     */
    select?: AdminOrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminOrder
     */
    omit?: AdminOrderOmit<ExtArgs> | null
    /**
     * The data used to update AdminOrders.
     */
    data: XOR<AdminOrderUpdateManyMutationInput, AdminOrderUncheckedUpdateManyInput>
    /**
     * Filter which AdminOrders to update
     */
    where?: AdminOrderWhereInput
    /**
     * Limit how many AdminOrders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminOrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminOrder upsert
   */
  export type AdminOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminOrder
     */
    select?: AdminOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminOrder
     */
    omit?: AdminOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the AdminOrder to update in case it exists.
     */
    where: AdminOrderWhereUniqueInput
    /**
     * In case the AdminOrder found by the `where` argument doesn't exist, create a new AdminOrder with this data.
     */
    create: XOR<AdminOrderCreateInput, AdminOrderUncheckedCreateInput>
    /**
     * In case the AdminOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminOrderUpdateInput, AdminOrderUncheckedUpdateInput>
  }

  /**
   * AdminOrder delete
   */
  export type AdminOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminOrder
     */
    select?: AdminOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminOrder
     */
    omit?: AdminOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminOrderInclude<ExtArgs> | null
    /**
     * Filter which AdminOrder to delete.
     */
    where: AdminOrderWhereUniqueInput
  }

  /**
   * AdminOrder deleteMany
   */
  export type AdminOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminOrders to delete
     */
    where?: AdminOrderWhereInput
    /**
     * Limit how many AdminOrders to delete.
     */
    limit?: number
  }

  /**
   * AdminOrder without action
   */
  export type AdminOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminOrder
     */
    select?: AdminOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminOrder
     */
    omit?: AdminOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminOrderInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    password: 'password',
    role: 'role',
    updateAt: 'updateAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state',
    userId: 'userId'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    profile_id: 'profile_id',
    user_id: 'user_id',
    phone: 'phone',
    pfp_url: 'pfp_url',
    referred_id: 'referred_id'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const ReferralScalarFieldEnum: {
    referral_id: 'referral_id',
    referral_code: 'referral_code',
    profile_id: 'profile_id'
  };

  export type ReferralScalarFieldEnum = (typeof ReferralScalarFieldEnum)[keyof typeof ReferralScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    address_id: 'address_id',
    street: 'street',
    city: 'city',
    country: 'country',
    lat: 'lat',
    lng: 'lng',
    post_code: 'post_code',
    address_name: 'address_name',
    address_contact: 'address_contact',
    profile_id: 'profile_id',
    deleted_at: 'deleted_at'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    admin_id: 'admin_id',
    user_id: 'user_id',
    store_id: 'store_id',
    phone: 'phone',
    position: 'position',
    deleted_at: 'deleted_at'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const StoreScalarFieldEnum: {
    store_id: 'store_id',
    store_name: 'store_name',
    store_address: 'store_address',
    country: 'country',
    city: 'city',
    lat: 'lat',
    lng: 'lng',
    isActive: 'isActive'
  };

  export type StoreScalarFieldEnum = (typeof StoreScalarFieldEnum)[keyof typeof StoreScalarFieldEnum]


  export const StockScalarFieldEnum: {
    stock_id: 'stock_id',
    store_id: 'store_id',
    product_id: 'product_id',
    quantity: 'quantity'
  };

  export type StockScalarFieldEnum = (typeof StockScalarFieldEnum)[keyof typeof StockScalarFieldEnum]


  export const StockJournalScalarFieldEnum: {
    stock_journal_id: 'stock_journal_id',
    store_id: 'store_id',
    stock_id: 'stock_id',
    product_id: 'product_id',
    quantity: 'quantity',
    type: 'type',
    notes: 'notes',
    created_at: 'created_at'
  };

  export type StockJournalScalarFieldEnum = (typeof StockJournalScalarFieldEnum)[keyof typeof StockJournalScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    product_id: 'product_id',
    product_name: 'product_name',
    product_price: 'product_price',
    product_category_id: 'product_category_id',
    product_description: 'product_description',
    deletedAt: 'deletedAt'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ProductImgScalarFieldEnum: {
    image_id: 'image_id',
    image_url: 'image_url',
    product_id: 'product_id'
  };

  export type ProductImgScalarFieldEnum = (typeof ProductImgScalarFieldEnum)[keyof typeof ProductImgScalarFieldEnum]


  export const ProductCategoryScalarFieldEnum: {
    product_category_id: 'product_category_id',
    product_category_name: 'product_category_name',
    deletedAt: 'deletedAt'
  };

  export type ProductCategoryScalarFieldEnum = (typeof ProductCategoryScalarFieldEnum)[keyof typeof ProductCategoryScalarFieldEnum]


  export const VoucherStoreScalarFieldEnum: {
    voucher_store_id: 'voucher_store_id',
    voucher_store_code: 'voucher_store_code',
    voucher_store_amount_percentage: 'voucher_store_amount_percentage',
    voucher_store_exact_nominal: 'voucher_store_exact_nominal',
    voucher_store_minimum_buy: 'voucher_store_minimum_buy',
    voucher_store_maximum_nominal: 'voucher_store_maximum_nominal',
    voucher_store_startdate: 'voucher_store_startdate',
    voucher_store_enddate: 'voucher_store_enddate',
    created_at: 'created_at',
    admin_responsible: 'admin_responsible',
    store_id: 'store_id'
  };

  export type VoucherStoreScalarFieldEnum = (typeof VoucherStoreScalarFieldEnum)[keyof typeof VoucherStoreScalarFieldEnum]


  export const VoucherOngkirScalarFieldEnum: {
    voucher_ongkir_id: 'voucher_ongkir_id',
    voucher_ongkir_code: 'voucher_ongkir_code',
    voucher_ongkir_nominal: 'voucher_ongkir_nominal',
    voucher_ongkir_startdate: 'voucher_ongkir_startdate',
    voucher_ongkir_enddate: 'voucher_ongkir_enddate',
    created_at: 'created_at',
    admin_responsible: 'admin_responsible',
    store_id: 'store_id'
  };

  export type VoucherOngkirScalarFieldEnum = (typeof VoucherOngkirScalarFieldEnum)[keyof typeof VoucherOngkirScalarFieldEnum]


  export const VoucherProductScalarFieldEnum: {
    voucher_product_id: 'voucher_product_id',
    voucher_product_code: 'voucher_product_code',
    voucher_product_nominal: 'voucher_product_nominal',
    voucher_product_startdate: 'voucher_product_startdate',
    voucher_product_enddate: 'voucher_product_enddate',
    created_at: 'created_at',
    admin_responsible: 'admin_responsible',
    product_id: 'product_id'
  };

  export type VoucherProductScalarFieldEnum = (typeof VoucherProductScalarFieldEnum)[keyof typeof VoucherProductScalarFieldEnum]


  export const DiscountScalarFieldEnum: {
    discount_id: 'discount_id',
    discount_product: 'discount_product',
    discount_amount: 'discount_amount',
    created_at: 'created_at',
    discount_startdate: 'discount_startdate',
    discount_enddate: 'discount_enddate',
    isActive: 'isActive'
  };

  export type DiscountScalarFieldEnum = (typeof DiscountScalarFieldEnum)[keyof typeof DiscountScalarFieldEnum]


  export const CartScalarFieldEnum: {
    cart_id: 'cart_id',
    created_at: 'created_at',
    profile_id: 'profile_id'
  };

  export type CartScalarFieldEnum = (typeof CartScalarFieldEnum)[keyof typeof CartScalarFieldEnum]


  export const CartItemScalarFieldEnum: {
    cart_item_id: 'cart_item_id',
    cart_id: 'cart_id',
    product_id: 'product_id',
    quantity: 'quantity'
  };

  export type CartItemScalarFieldEnum = (typeof CartItemScalarFieldEnum)[keyof typeof CartItemScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    order_id: 'order_id',
    order_number: 'order_number',
    store_id: 'store_id',
    address_id: 'address_id',
    total_price: 'total_price',
    shipping_price: 'shipping_price',
    total_payment: 'total_payment',
    tracking_number: 'tracking_number',
    discount_id: 'discount_id',
    status: 'status',
    order_date: 'order_date',
    profile_id: 'profile_id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderItemScalarFieldEnum: {
    order_item_id: 'order_item_id',
    order_id: 'order_id',
    product_id: 'product_id',
    quantity: 'quantity',
    price: 'price',
    subtotal: 'subtotal'
  };

  export type OrderItemScalarFieldEnum = (typeof OrderItemScalarFieldEnum)[keyof typeof OrderItemScalarFieldEnum]


  export const PaymentProofScalarFieldEnum: {
    payment_proof_id: 'payment_proof_id',
    order_id: 'order_id',
    image_url: 'image_url',
    uploaded_at: 'uploaded_at',
    status: 'status'
  };

  export type PaymentProofScalarFieldEnum = (typeof PaymentProofScalarFieldEnum)[keyof typeof PaymentProofScalarFieldEnum]


  export const OrderCancelScalarFieldEnum: {
    order_cancel_id: 'order_cancel_id',
    order_id: 'order_id',
    reason: 'reason',
    canceled_at: 'canceled_at'
  };

  export type OrderCancelScalarFieldEnum = (typeof OrderCancelScalarFieldEnum)[keyof typeof OrderCancelScalarFieldEnum]


  export const AdminOrderScalarFieldEnum: {
    admin_order_id: 'admin_order_id',
    admin_id: 'admin_id',
    order_id: 'order_id',
    action: 'action',
    action_time: 'action_time'
  };

  export type AdminOrderScalarFieldEnum = (typeof AdminOrderScalarFieldEnum)[keyof typeof AdminOrderScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'OrderStatus[]'
   */
  export type ListEnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


  /**
   * Reference to a field of type 'ActionEnum'
   */
  export type EnumActionEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActionEnum'>
    


  /**
   * Reference to a field of type 'ActionEnum[]'
   */
  export type ListEnumActionEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActionEnum[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    updateAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    admin?: XOR<AdminNullableScalarRelationFilter, AdminWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    updateAt?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    profile?: ProfileOrderByWithRelationInput
    admin?: AdminOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    updateAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    admin?: XOR<AdminNullableScalarRelationFilter, AdminWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    updateAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    updateAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    userId?: StringFilter<"Account"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
    userId?: StringWithAggregatesFilter<"Account"> | string
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    profile_id?: IntFilter<"Profile"> | number
    user_id?: StringFilter<"Profile"> | string
    phone?: StringNullableFilter<"Profile"> | string | null
    pfp_url?: StringNullableFilter<"Profile"> | string | null
    referred_id?: IntNullableFilter<"Profile"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    cart?: CartListRelationFilter
    orders?: OrderListRelationFilter
    voucher_store?: VoucherStoreListRelationFilter
    Address?: AddressListRelationFilter
    referral?: XOR<ReferralNullableScalarRelationFilter, ReferralWhereInput> | null
    referred?: XOR<ReferralNullableScalarRelationFilter, ReferralWhereInput> | null
  }

  export type ProfileOrderByWithRelationInput = {
    profile_id?: SortOrder
    user_id?: SortOrder
    phone?: SortOrderInput | SortOrder
    pfp_url?: SortOrderInput | SortOrder
    referred_id?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    cart?: CartOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
    voucher_store?: VoucherStoreOrderByRelationAggregateInput
    Address?: AddressOrderByRelationAggregateInput
    referral?: ReferralOrderByWithRelationInput
    referred?: ReferralOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    profile_id?: number
    user_id?: string
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    phone?: StringNullableFilter<"Profile"> | string | null
    pfp_url?: StringNullableFilter<"Profile"> | string | null
    referred_id?: IntNullableFilter<"Profile"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    cart?: CartListRelationFilter
    orders?: OrderListRelationFilter
    voucher_store?: VoucherStoreListRelationFilter
    Address?: AddressListRelationFilter
    referral?: XOR<ReferralNullableScalarRelationFilter, ReferralWhereInput> | null
    referred?: XOR<ReferralNullableScalarRelationFilter, ReferralWhereInput> | null
  }, "profile_id" | "user_id">

  export type ProfileOrderByWithAggregationInput = {
    profile_id?: SortOrder
    user_id?: SortOrder
    phone?: SortOrderInput | SortOrder
    pfp_url?: SortOrderInput | SortOrder
    referred_id?: SortOrderInput | SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    profile_id?: IntWithAggregatesFilter<"Profile"> | number
    user_id?: StringWithAggregatesFilter<"Profile"> | string
    phone?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    pfp_url?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    referred_id?: IntNullableWithAggregatesFilter<"Profile"> | number | null
  }

  export type ReferralWhereInput = {
    AND?: ReferralWhereInput | ReferralWhereInput[]
    OR?: ReferralWhereInput[]
    NOT?: ReferralWhereInput | ReferralWhereInput[]
    referral_id?: IntFilter<"Referral"> | number
    referral_code?: StringFilter<"Referral"> | string
    profile_id?: IntNullableFilter<"Referral"> | number | null
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    referred?: ProfileListRelationFilter
  }

  export type ReferralOrderByWithRelationInput = {
    referral_id?: SortOrder
    referral_code?: SortOrder
    profile_id?: SortOrderInput | SortOrder
    profile?: ProfileOrderByWithRelationInput
    referred?: ProfileOrderByRelationAggregateInput
  }

  export type ReferralWhereUniqueInput = Prisma.AtLeast<{
    referral_id?: number
    profile_id?: number
    AND?: ReferralWhereInput | ReferralWhereInput[]
    OR?: ReferralWhereInput[]
    NOT?: ReferralWhereInput | ReferralWhereInput[]
    referral_code?: StringFilter<"Referral"> | string
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    referred?: ProfileListRelationFilter
  }, "referral_id" | "profile_id">

  export type ReferralOrderByWithAggregationInput = {
    referral_id?: SortOrder
    referral_code?: SortOrder
    profile_id?: SortOrderInput | SortOrder
    _count?: ReferralCountOrderByAggregateInput
    _avg?: ReferralAvgOrderByAggregateInput
    _max?: ReferralMaxOrderByAggregateInput
    _min?: ReferralMinOrderByAggregateInput
    _sum?: ReferralSumOrderByAggregateInput
  }

  export type ReferralScalarWhereWithAggregatesInput = {
    AND?: ReferralScalarWhereWithAggregatesInput | ReferralScalarWhereWithAggregatesInput[]
    OR?: ReferralScalarWhereWithAggregatesInput[]
    NOT?: ReferralScalarWhereWithAggregatesInput | ReferralScalarWhereWithAggregatesInput[]
    referral_id?: IntWithAggregatesFilter<"Referral"> | number
    referral_code?: StringWithAggregatesFilter<"Referral"> | string
    profile_id?: IntNullableWithAggregatesFilter<"Referral"> | number | null
  }

  export type AddressWhereInput = {
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    address_id?: IntFilter<"Address"> | number
    street?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    country?: StringFilter<"Address"> | string
    lat?: StringFilter<"Address"> | string
    lng?: StringFilter<"Address"> | string
    post_code?: StringFilter<"Address"> | string
    address_name?: StringFilter<"Address"> | string
    address_contact?: StringFilter<"Address"> | string
    profile_id?: IntFilter<"Address"> | number
    deleted_at?: DateTimeNullableFilter<"Address"> | Date | string | null
    orders?: OrderListRelationFilter
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
  }

  export type AddressOrderByWithRelationInput = {
    address_id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    country?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    post_code?: SortOrder
    address_name?: SortOrder
    address_contact?: SortOrder
    profile_id?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    orders?: OrderOrderByRelationAggregateInput
    profile?: ProfileOrderByWithRelationInput
  }

  export type AddressWhereUniqueInput = Prisma.AtLeast<{
    address_id?: number
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    street?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    country?: StringFilter<"Address"> | string
    lat?: StringFilter<"Address"> | string
    lng?: StringFilter<"Address"> | string
    post_code?: StringFilter<"Address"> | string
    address_name?: StringFilter<"Address"> | string
    address_contact?: StringFilter<"Address"> | string
    profile_id?: IntFilter<"Address"> | number
    deleted_at?: DateTimeNullableFilter<"Address"> | Date | string | null
    orders?: OrderListRelationFilter
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
  }, "address_id">

  export type AddressOrderByWithAggregationInput = {
    address_id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    country?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    post_code?: SortOrder
    address_name?: SortOrder
    address_contact?: SortOrder
    profile_id?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    _count?: AddressCountOrderByAggregateInput
    _avg?: AddressAvgOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
    _sum?: AddressSumOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    OR?: AddressScalarWhereWithAggregatesInput[]
    NOT?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    address_id?: IntWithAggregatesFilter<"Address"> | number
    street?: StringWithAggregatesFilter<"Address"> | string
    city?: StringWithAggregatesFilter<"Address"> | string
    country?: StringWithAggregatesFilter<"Address"> | string
    lat?: StringWithAggregatesFilter<"Address"> | string
    lng?: StringWithAggregatesFilter<"Address"> | string
    post_code?: StringWithAggregatesFilter<"Address"> | string
    address_name?: StringWithAggregatesFilter<"Address"> | string
    address_contact?: StringWithAggregatesFilter<"Address"> | string
    profile_id?: IntWithAggregatesFilter<"Address"> | number
    deleted_at?: DateTimeNullableWithAggregatesFilter<"Address"> | Date | string | null
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    admin_id?: IntFilter<"Admin"> | number
    user_id?: StringFilter<"Admin"> | string
    store_id?: IntFilter<"Admin"> | number
    phone?: StringFilter<"Admin"> | string
    position?: StringFilter<"Admin"> | string
    deleted_at?: DateTimeNullableFilter<"Admin"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    store?: XOR<StoreScalarRelationFilter, StoreWhereInput>
    admin_orders?: AdminOrderListRelationFilter
    voucher_ongkir?: VoucherOngkirListRelationFilter
    voucher_product?: VoucherProductListRelationFilter
    voucher_store?: VoucherStoreListRelationFilter
  }

  export type AdminOrderByWithRelationInput = {
    admin_id?: SortOrder
    user_id?: SortOrder
    store_id?: SortOrder
    phone?: SortOrder
    position?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    store?: StoreOrderByWithRelationInput
    admin_orders?: AdminOrderOrderByRelationAggregateInput
    voucher_ongkir?: VoucherOngkirOrderByRelationAggregateInput
    voucher_product?: VoucherProductOrderByRelationAggregateInput
    voucher_store?: VoucherStoreOrderByRelationAggregateInput
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    admin_id?: number
    user_id?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    store_id?: IntFilter<"Admin"> | number
    phone?: StringFilter<"Admin"> | string
    position?: StringFilter<"Admin"> | string
    deleted_at?: DateTimeNullableFilter<"Admin"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    store?: XOR<StoreScalarRelationFilter, StoreWhereInput>
    admin_orders?: AdminOrderListRelationFilter
    voucher_ongkir?: VoucherOngkirListRelationFilter
    voucher_product?: VoucherProductListRelationFilter
    voucher_store?: VoucherStoreListRelationFilter
  }, "admin_id" | "user_id">

  export type AdminOrderByWithAggregationInput = {
    admin_id?: SortOrder
    user_id?: SortOrder
    store_id?: SortOrder
    phone?: SortOrder
    position?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    admin_id?: IntWithAggregatesFilter<"Admin"> | number
    user_id?: StringWithAggregatesFilter<"Admin"> | string
    store_id?: IntWithAggregatesFilter<"Admin"> | number
    phone?: StringWithAggregatesFilter<"Admin"> | string
    position?: StringWithAggregatesFilter<"Admin"> | string
    deleted_at?: DateTimeNullableWithAggregatesFilter<"Admin"> | Date | string | null
  }

  export type StoreWhereInput = {
    AND?: StoreWhereInput | StoreWhereInput[]
    OR?: StoreWhereInput[]
    NOT?: StoreWhereInput | StoreWhereInput[]
    store_id?: IntFilter<"Store"> | number
    store_name?: StringFilter<"Store"> | string
    store_address?: StringFilter<"Store"> | string
    country?: StringFilter<"Store"> | string
    city?: StringFilter<"Store"> | string
    lat?: StringFilter<"Store"> | string
    lng?: StringFilter<"Store"> | string
    isActive?: BoolFilter<"Store"> | boolean
    orders?: OrderListRelationFilter
    admin?: AdminListRelationFilter
    stock?: StockListRelationFilter
    stock_journal?: StockJournalListRelationFilter
    voucher_ongkir?: XOR<VoucherOngkirNullableScalarRelationFilter, VoucherOngkirWhereInput> | null
    voucher_stores?: VoucherStoreListRelationFilter
  }

  export type StoreOrderByWithRelationInput = {
    store_id?: SortOrder
    store_name?: SortOrder
    store_address?: SortOrder
    country?: SortOrder
    city?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    isActive?: SortOrder
    orders?: OrderOrderByRelationAggregateInput
    admin?: AdminOrderByRelationAggregateInput
    stock?: StockOrderByRelationAggregateInput
    stock_journal?: StockJournalOrderByRelationAggregateInput
    voucher_ongkir?: VoucherOngkirOrderByWithRelationInput
    voucher_stores?: VoucherStoreOrderByRelationAggregateInput
  }

  export type StoreWhereUniqueInput = Prisma.AtLeast<{
    store_id?: number
    store_name?: string
    AND?: StoreWhereInput | StoreWhereInput[]
    OR?: StoreWhereInput[]
    NOT?: StoreWhereInput | StoreWhereInput[]
    store_address?: StringFilter<"Store"> | string
    country?: StringFilter<"Store"> | string
    city?: StringFilter<"Store"> | string
    lat?: StringFilter<"Store"> | string
    lng?: StringFilter<"Store"> | string
    isActive?: BoolFilter<"Store"> | boolean
    orders?: OrderListRelationFilter
    admin?: AdminListRelationFilter
    stock?: StockListRelationFilter
    stock_journal?: StockJournalListRelationFilter
    voucher_ongkir?: XOR<VoucherOngkirNullableScalarRelationFilter, VoucherOngkirWhereInput> | null
    voucher_stores?: VoucherStoreListRelationFilter
  }, "store_id" | "store_name">

  export type StoreOrderByWithAggregationInput = {
    store_id?: SortOrder
    store_name?: SortOrder
    store_address?: SortOrder
    country?: SortOrder
    city?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    isActive?: SortOrder
    _count?: StoreCountOrderByAggregateInput
    _avg?: StoreAvgOrderByAggregateInput
    _max?: StoreMaxOrderByAggregateInput
    _min?: StoreMinOrderByAggregateInput
    _sum?: StoreSumOrderByAggregateInput
  }

  export type StoreScalarWhereWithAggregatesInput = {
    AND?: StoreScalarWhereWithAggregatesInput | StoreScalarWhereWithAggregatesInput[]
    OR?: StoreScalarWhereWithAggregatesInput[]
    NOT?: StoreScalarWhereWithAggregatesInput | StoreScalarWhereWithAggregatesInput[]
    store_id?: IntWithAggregatesFilter<"Store"> | number
    store_name?: StringWithAggregatesFilter<"Store"> | string
    store_address?: StringWithAggregatesFilter<"Store"> | string
    country?: StringWithAggregatesFilter<"Store"> | string
    city?: StringWithAggregatesFilter<"Store"> | string
    lat?: StringWithAggregatesFilter<"Store"> | string
    lng?: StringWithAggregatesFilter<"Store"> | string
    isActive?: BoolWithAggregatesFilter<"Store"> | boolean
  }

  export type StockWhereInput = {
    AND?: StockWhereInput | StockWhereInput[]
    OR?: StockWhereInput[]
    NOT?: StockWhereInput | StockWhereInput[]
    stock_id?: IntFilter<"Stock"> | number
    store_id?: IntFilter<"Stock"> | number
    product_id?: IntFilter<"Stock"> | number
    quantity?: IntFilter<"Stock"> | number
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    store?: XOR<StoreScalarRelationFilter, StoreWhereInput>
    stock_journal?: StockJournalListRelationFilter
  }

  export type StockOrderByWithRelationInput = {
    stock_id?: SortOrder
    store_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    product?: ProductOrderByWithRelationInput
    store?: StoreOrderByWithRelationInput
    stock_journal?: StockJournalOrderByRelationAggregateInput
  }

  export type StockWhereUniqueInput = Prisma.AtLeast<{
    stock_id?: number
    product_id?: number
    AND?: StockWhereInput | StockWhereInput[]
    OR?: StockWhereInput[]
    NOT?: StockWhereInput | StockWhereInput[]
    store_id?: IntFilter<"Stock"> | number
    quantity?: IntFilter<"Stock"> | number
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    store?: XOR<StoreScalarRelationFilter, StoreWhereInput>
    stock_journal?: StockJournalListRelationFilter
  }, "stock_id" | "product_id">

  export type StockOrderByWithAggregationInput = {
    stock_id?: SortOrder
    store_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    _count?: StockCountOrderByAggregateInput
    _avg?: StockAvgOrderByAggregateInput
    _max?: StockMaxOrderByAggregateInput
    _min?: StockMinOrderByAggregateInput
    _sum?: StockSumOrderByAggregateInput
  }

  export type StockScalarWhereWithAggregatesInput = {
    AND?: StockScalarWhereWithAggregatesInput | StockScalarWhereWithAggregatesInput[]
    OR?: StockScalarWhereWithAggregatesInput[]
    NOT?: StockScalarWhereWithAggregatesInput | StockScalarWhereWithAggregatesInput[]
    stock_id?: IntWithAggregatesFilter<"Stock"> | number
    store_id?: IntWithAggregatesFilter<"Stock"> | number
    product_id?: IntWithAggregatesFilter<"Stock"> | number
    quantity?: IntWithAggregatesFilter<"Stock"> | number
  }

  export type StockJournalWhereInput = {
    AND?: StockJournalWhereInput | StockJournalWhereInput[]
    OR?: StockJournalWhereInput[]
    NOT?: StockJournalWhereInput | StockJournalWhereInput[]
    stock_journal_id?: IntFilter<"StockJournal"> | number
    store_id?: IntFilter<"StockJournal"> | number
    stock_id?: IntFilter<"StockJournal"> | number
    product_id?: StringFilter<"StockJournal"> | string
    quantity?: IntFilter<"StockJournal"> | number
    type?: StringFilter<"StockJournal"> | string
    notes?: StringFilter<"StockJournal"> | string
    created_at?: DateTimeFilter<"StockJournal"> | Date | string
    stock?: XOR<StockScalarRelationFilter, StockWhereInput>
    store?: XOR<StoreScalarRelationFilter, StoreWhereInput>
  }

  export type StockJournalOrderByWithRelationInput = {
    stock_journal_id?: SortOrder
    store_id?: SortOrder
    stock_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    stock?: StockOrderByWithRelationInput
    store?: StoreOrderByWithRelationInput
  }

  export type StockJournalWhereUniqueInput = Prisma.AtLeast<{
    stock_journal_id?: number
    AND?: StockJournalWhereInput | StockJournalWhereInput[]
    OR?: StockJournalWhereInput[]
    NOT?: StockJournalWhereInput | StockJournalWhereInput[]
    store_id?: IntFilter<"StockJournal"> | number
    stock_id?: IntFilter<"StockJournal"> | number
    product_id?: StringFilter<"StockJournal"> | string
    quantity?: IntFilter<"StockJournal"> | number
    type?: StringFilter<"StockJournal"> | string
    notes?: StringFilter<"StockJournal"> | string
    created_at?: DateTimeFilter<"StockJournal"> | Date | string
    stock?: XOR<StockScalarRelationFilter, StockWhereInput>
    store?: XOR<StoreScalarRelationFilter, StoreWhereInput>
  }, "stock_journal_id">

  export type StockJournalOrderByWithAggregationInput = {
    stock_journal_id?: SortOrder
    store_id?: SortOrder
    stock_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
    _count?: StockJournalCountOrderByAggregateInput
    _avg?: StockJournalAvgOrderByAggregateInput
    _max?: StockJournalMaxOrderByAggregateInput
    _min?: StockJournalMinOrderByAggregateInput
    _sum?: StockJournalSumOrderByAggregateInput
  }

  export type StockJournalScalarWhereWithAggregatesInput = {
    AND?: StockJournalScalarWhereWithAggregatesInput | StockJournalScalarWhereWithAggregatesInput[]
    OR?: StockJournalScalarWhereWithAggregatesInput[]
    NOT?: StockJournalScalarWhereWithAggregatesInput | StockJournalScalarWhereWithAggregatesInput[]
    stock_journal_id?: IntWithAggregatesFilter<"StockJournal"> | number
    store_id?: IntWithAggregatesFilter<"StockJournal"> | number
    stock_id?: IntWithAggregatesFilter<"StockJournal"> | number
    product_id?: StringWithAggregatesFilter<"StockJournal"> | string
    quantity?: IntWithAggregatesFilter<"StockJournal"> | number
    type?: StringWithAggregatesFilter<"StockJournal"> | string
    notes?: StringWithAggregatesFilter<"StockJournal"> | string
    created_at?: DateTimeWithAggregatesFilter<"StockJournal"> | Date | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    product_id?: IntFilter<"Product"> | number
    product_name?: StringFilter<"Product"> | string
    product_price?: IntFilter<"Product"> | number
    product_category_id?: IntFilter<"Product"> | number
    product_description?: StringNullableFilter<"Product"> | string | null
    deletedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    cart_items?: CartItemListRelationFilter
    order_items?: OrderItemListRelationFilter
    product_category?: XOR<ProductCategoryScalarRelationFilter, ProductCategoryWhereInput>
    product_img?: ProductImgListRelationFilter
    stock?: XOR<StockNullableScalarRelationFilter, StockWhereInput> | null
    voucher?: VoucherProductListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    product_id?: SortOrder
    product_name?: SortOrder
    product_price?: SortOrder
    product_category_id?: SortOrder
    product_description?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    cart_items?: CartItemOrderByRelationAggregateInput
    order_items?: OrderItemOrderByRelationAggregateInput
    product_category?: ProductCategoryOrderByWithRelationInput
    product_img?: ProductImgOrderByRelationAggregateInput
    stock?: StockOrderByWithRelationInput
    voucher?: VoucherProductOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    product_id?: number
    product_name?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    product_price?: IntFilter<"Product"> | number
    product_category_id?: IntFilter<"Product"> | number
    product_description?: StringNullableFilter<"Product"> | string | null
    deletedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    cart_items?: CartItemListRelationFilter
    order_items?: OrderItemListRelationFilter
    product_category?: XOR<ProductCategoryScalarRelationFilter, ProductCategoryWhereInput>
    product_img?: ProductImgListRelationFilter
    stock?: XOR<StockNullableScalarRelationFilter, StockWhereInput> | null
    voucher?: VoucherProductListRelationFilter
  }, "product_id" | "product_name">

  export type ProductOrderByWithAggregationInput = {
    product_id?: SortOrder
    product_name?: SortOrder
    product_price?: SortOrder
    product_category_id?: SortOrder
    product_description?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    product_id?: IntWithAggregatesFilter<"Product"> | number
    product_name?: StringWithAggregatesFilter<"Product"> | string
    product_price?: IntWithAggregatesFilter<"Product"> | number
    product_category_id?: IntWithAggregatesFilter<"Product"> | number
    product_description?: StringNullableWithAggregatesFilter<"Product"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Product"> | Date | string | null
  }

  export type ProductImgWhereInput = {
    AND?: ProductImgWhereInput | ProductImgWhereInput[]
    OR?: ProductImgWhereInput[]
    NOT?: ProductImgWhereInput | ProductImgWhereInput[]
    image_id?: IntFilter<"ProductImg"> | number
    image_url?: StringFilter<"ProductImg"> | string
    product_id?: IntFilter<"ProductImg"> | number
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type ProductImgOrderByWithRelationInput = {
    image_id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
    product?: ProductOrderByWithRelationInput
  }

  export type ProductImgWhereUniqueInput = Prisma.AtLeast<{
    image_id?: number
    AND?: ProductImgWhereInput | ProductImgWhereInput[]
    OR?: ProductImgWhereInput[]
    NOT?: ProductImgWhereInput | ProductImgWhereInput[]
    image_url?: StringFilter<"ProductImg"> | string
    product_id?: IntFilter<"ProductImg"> | number
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "image_id">

  export type ProductImgOrderByWithAggregationInput = {
    image_id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
    _count?: ProductImgCountOrderByAggregateInput
    _avg?: ProductImgAvgOrderByAggregateInput
    _max?: ProductImgMaxOrderByAggregateInput
    _min?: ProductImgMinOrderByAggregateInput
    _sum?: ProductImgSumOrderByAggregateInput
  }

  export type ProductImgScalarWhereWithAggregatesInput = {
    AND?: ProductImgScalarWhereWithAggregatesInput | ProductImgScalarWhereWithAggregatesInput[]
    OR?: ProductImgScalarWhereWithAggregatesInput[]
    NOT?: ProductImgScalarWhereWithAggregatesInput | ProductImgScalarWhereWithAggregatesInput[]
    image_id?: IntWithAggregatesFilter<"ProductImg"> | number
    image_url?: StringWithAggregatesFilter<"ProductImg"> | string
    product_id?: IntWithAggregatesFilter<"ProductImg"> | number
  }

  export type ProductCategoryWhereInput = {
    AND?: ProductCategoryWhereInput | ProductCategoryWhereInput[]
    OR?: ProductCategoryWhereInput[]
    NOT?: ProductCategoryWhereInput | ProductCategoryWhereInput[]
    product_category_id?: IntFilter<"ProductCategory"> | number
    product_category_name?: StringFilter<"ProductCategory"> | string
    deletedAt?: DateTimeNullableFilter<"ProductCategory"> | Date | string | null
    product?: ProductListRelationFilter
  }

  export type ProductCategoryOrderByWithRelationInput = {
    product_category_id?: SortOrder
    product_category_name?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    product?: ProductOrderByRelationAggregateInput
  }

  export type ProductCategoryWhereUniqueInput = Prisma.AtLeast<{
    product_category_id?: number
    product_category_name?: string
    AND?: ProductCategoryWhereInput | ProductCategoryWhereInput[]
    OR?: ProductCategoryWhereInput[]
    NOT?: ProductCategoryWhereInput | ProductCategoryWhereInput[]
    deletedAt?: DateTimeNullableFilter<"ProductCategory"> | Date | string | null
    product?: ProductListRelationFilter
  }, "product_category_id" | "product_category_name">

  export type ProductCategoryOrderByWithAggregationInput = {
    product_category_id?: SortOrder
    product_category_name?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: ProductCategoryCountOrderByAggregateInput
    _avg?: ProductCategoryAvgOrderByAggregateInput
    _max?: ProductCategoryMaxOrderByAggregateInput
    _min?: ProductCategoryMinOrderByAggregateInput
    _sum?: ProductCategorySumOrderByAggregateInput
  }

  export type ProductCategoryScalarWhereWithAggregatesInput = {
    AND?: ProductCategoryScalarWhereWithAggregatesInput | ProductCategoryScalarWhereWithAggregatesInput[]
    OR?: ProductCategoryScalarWhereWithAggregatesInput[]
    NOT?: ProductCategoryScalarWhereWithAggregatesInput | ProductCategoryScalarWhereWithAggregatesInput[]
    product_category_id?: IntWithAggregatesFilter<"ProductCategory"> | number
    product_category_name?: StringWithAggregatesFilter<"ProductCategory"> | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"ProductCategory"> | Date | string | null
  }

  export type VoucherStoreWhereInput = {
    AND?: VoucherStoreWhereInput | VoucherStoreWhereInput[]
    OR?: VoucherStoreWhereInput[]
    NOT?: VoucherStoreWhereInput | VoucherStoreWhereInput[]
    voucher_store_id?: IntFilter<"VoucherStore"> | number
    voucher_store_code?: StringFilter<"VoucherStore"> | string
    voucher_store_amount_percentage?: IntFilter<"VoucherStore"> | number
    voucher_store_exact_nominal?: IntFilter<"VoucherStore"> | number
    voucher_store_minimum_buy?: IntFilter<"VoucherStore"> | number
    voucher_store_maximum_nominal?: IntFilter<"VoucherStore"> | number
    voucher_store_startdate?: DateTimeFilter<"VoucherStore"> | Date | string
    voucher_store_enddate?: DateTimeFilter<"VoucherStore"> | Date | string
    created_at?: DateTimeFilter<"VoucherStore"> | Date | string
    admin_responsible?: IntFilter<"VoucherStore"> | number
    store_id?: IntFilter<"VoucherStore"> | number
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    store?: XOR<StoreScalarRelationFilter, StoreWhereInput>
    profiles?: ProfileListRelationFilter
  }

  export type VoucherStoreOrderByWithRelationInput = {
    voucher_store_id?: SortOrder
    voucher_store_code?: SortOrder
    voucher_store_amount_percentage?: SortOrder
    voucher_store_exact_nominal?: SortOrder
    voucher_store_minimum_buy?: SortOrder
    voucher_store_maximum_nominal?: SortOrder
    voucher_store_startdate?: SortOrder
    voucher_store_enddate?: SortOrder
    created_at?: SortOrder
    admin_responsible?: SortOrder
    store_id?: SortOrder
    admin?: AdminOrderByWithRelationInput
    store?: StoreOrderByWithRelationInput
    profiles?: ProfileOrderByRelationAggregateInput
  }

  export type VoucherStoreWhereUniqueInput = Prisma.AtLeast<{
    voucher_store_id?: number
    voucher_store_code?: string
    AND?: VoucherStoreWhereInput | VoucherStoreWhereInput[]
    OR?: VoucherStoreWhereInput[]
    NOT?: VoucherStoreWhereInput | VoucherStoreWhereInput[]
    voucher_store_amount_percentage?: IntFilter<"VoucherStore"> | number
    voucher_store_exact_nominal?: IntFilter<"VoucherStore"> | number
    voucher_store_minimum_buy?: IntFilter<"VoucherStore"> | number
    voucher_store_maximum_nominal?: IntFilter<"VoucherStore"> | number
    voucher_store_startdate?: DateTimeFilter<"VoucherStore"> | Date | string
    voucher_store_enddate?: DateTimeFilter<"VoucherStore"> | Date | string
    created_at?: DateTimeFilter<"VoucherStore"> | Date | string
    admin_responsible?: IntFilter<"VoucherStore"> | number
    store_id?: IntFilter<"VoucherStore"> | number
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    store?: XOR<StoreScalarRelationFilter, StoreWhereInput>
    profiles?: ProfileListRelationFilter
  }, "voucher_store_id" | "voucher_store_code">

  export type VoucherStoreOrderByWithAggregationInput = {
    voucher_store_id?: SortOrder
    voucher_store_code?: SortOrder
    voucher_store_amount_percentage?: SortOrder
    voucher_store_exact_nominal?: SortOrder
    voucher_store_minimum_buy?: SortOrder
    voucher_store_maximum_nominal?: SortOrder
    voucher_store_startdate?: SortOrder
    voucher_store_enddate?: SortOrder
    created_at?: SortOrder
    admin_responsible?: SortOrder
    store_id?: SortOrder
    _count?: VoucherStoreCountOrderByAggregateInput
    _avg?: VoucherStoreAvgOrderByAggregateInput
    _max?: VoucherStoreMaxOrderByAggregateInput
    _min?: VoucherStoreMinOrderByAggregateInput
    _sum?: VoucherStoreSumOrderByAggregateInput
  }

  export type VoucherStoreScalarWhereWithAggregatesInput = {
    AND?: VoucherStoreScalarWhereWithAggregatesInput | VoucherStoreScalarWhereWithAggregatesInput[]
    OR?: VoucherStoreScalarWhereWithAggregatesInput[]
    NOT?: VoucherStoreScalarWhereWithAggregatesInput | VoucherStoreScalarWhereWithAggregatesInput[]
    voucher_store_id?: IntWithAggregatesFilter<"VoucherStore"> | number
    voucher_store_code?: StringWithAggregatesFilter<"VoucherStore"> | string
    voucher_store_amount_percentage?: IntWithAggregatesFilter<"VoucherStore"> | number
    voucher_store_exact_nominal?: IntWithAggregatesFilter<"VoucherStore"> | number
    voucher_store_minimum_buy?: IntWithAggregatesFilter<"VoucherStore"> | number
    voucher_store_maximum_nominal?: IntWithAggregatesFilter<"VoucherStore"> | number
    voucher_store_startdate?: DateTimeWithAggregatesFilter<"VoucherStore"> | Date | string
    voucher_store_enddate?: DateTimeWithAggregatesFilter<"VoucherStore"> | Date | string
    created_at?: DateTimeWithAggregatesFilter<"VoucherStore"> | Date | string
    admin_responsible?: IntWithAggregatesFilter<"VoucherStore"> | number
    store_id?: IntWithAggregatesFilter<"VoucherStore"> | number
  }

  export type VoucherOngkirWhereInput = {
    AND?: VoucherOngkirWhereInput | VoucherOngkirWhereInput[]
    OR?: VoucherOngkirWhereInput[]
    NOT?: VoucherOngkirWhereInput | VoucherOngkirWhereInput[]
    voucher_ongkir_id?: IntFilter<"VoucherOngkir"> | number
    voucher_ongkir_code?: StringFilter<"VoucherOngkir"> | string
    voucher_ongkir_nominal?: IntFilter<"VoucherOngkir"> | number
    voucher_ongkir_startdate?: DateTimeFilter<"VoucherOngkir"> | Date | string
    voucher_ongkir_enddate?: DateTimeFilter<"VoucherOngkir"> | Date | string
    created_at?: DateTimeFilter<"VoucherOngkir"> | Date | string
    admin_responsible?: IntFilter<"VoucherOngkir"> | number
    store_id?: IntFilter<"VoucherOngkir"> | number
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    store?: XOR<StoreScalarRelationFilter, StoreWhereInput>
  }

  export type VoucherOngkirOrderByWithRelationInput = {
    voucher_ongkir_id?: SortOrder
    voucher_ongkir_code?: SortOrder
    voucher_ongkir_nominal?: SortOrder
    voucher_ongkir_startdate?: SortOrder
    voucher_ongkir_enddate?: SortOrder
    created_at?: SortOrder
    admin_responsible?: SortOrder
    store_id?: SortOrder
    admin?: AdminOrderByWithRelationInput
    store?: StoreOrderByWithRelationInput
  }

  export type VoucherOngkirWhereUniqueInput = Prisma.AtLeast<{
    voucher_ongkir_id?: number
    voucher_ongkir_code?: string
    store_id?: number
    AND?: VoucherOngkirWhereInput | VoucherOngkirWhereInput[]
    OR?: VoucherOngkirWhereInput[]
    NOT?: VoucherOngkirWhereInput | VoucherOngkirWhereInput[]
    voucher_ongkir_nominal?: IntFilter<"VoucherOngkir"> | number
    voucher_ongkir_startdate?: DateTimeFilter<"VoucherOngkir"> | Date | string
    voucher_ongkir_enddate?: DateTimeFilter<"VoucherOngkir"> | Date | string
    created_at?: DateTimeFilter<"VoucherOngkir"> | Date | string
    admin_responsible?: IntFilter<"VoucherOngkir"> | number
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    store?: XOR<StoreScalarRelationFilter, StoreWhereInput>
  }, "voucher_ongkir_id" | "voucher_ongkir_code" | "store_id">

  export type VoucherOngkirOrderByWithAggregationInput = {
    voucher_ongkir_id?: SortOrder
    voucher_ongkir_code?: SortOrder
    voucher_ongkir_nominal?: SortOrder
    voucher_ongkir_startdate?: SortOrder
    voucher_ongkir_enddate?: SortOrder
    created_at?: SortOrder
    admin_responsible?: SortOrder
    store_id?: SortOrder
    _count?: VoucherOngkirCountOrderByAggregateInput
    _avg?: VoucherOngkirAvgOrderByAggregateInput
    _max?: VoucherOngkirMaxOrderByAggregateInput
    _min?: VoucherOngkirMinOrderByAggregateInput
    _sum?: VoucherOngkirSumOrderByAggregateInput
  }

  export type VoucherOngkirScalarWhereWithAggregatesInput = {
    AND?: VoucherOngkirScalarWhereWithAggregatesInput | VoucherOngkirScalarWhereWithAggregatesInput[]
    OR?: VoucherOngkirScalarWhereWithAggregatesInput[]
    NOT?: VoucherOngkirScalarWhereWithAggregatesInput | VoucherOngkirScalarWhereWithAggregatesInput[]
    voucher_ongkir_id?: IntWithAggregatesFilter<"VoucherOngkir"> | number
    voucher_ongkir_code?: StringWithAggregatesFilter<"VoucherOngkir"> | string
    voucher_ongkir_nominal?: IntWithAggregatesFilter<"VoucherOngkir"> | number
    voucher_ongkir_startdate?: DateTimeWithAggregatesFilter<"VoucherOngkir"> | Date | string
    voucher_ongkir_enddate?: DateTimeWithAggregatesFilter<"VoucherOngkir"> | Date | string
    created_at?: DateTimeWithAggregatesFilter<"VoucherOngkir"> | Date | string
    admin_responsible?: IntWithAggregatesFilter<"VoucherOngkir"> | number
    store_id?: IntWithAggregatesFilter<"VoucherOngkir"> | number
  }

  export type VoucherProductWhereInput = {
    AND?: VoucherProductWhereInput | VoucherProductWhereInput[]
    OR?: VoucherProductWhereInput[]
    NOT?: VoucherProductWhereInput | VoucherProductWhereInput[]
    voucher_product_id?: IntFilter<"VoucherProduct"> | number
    voucher_product_code?: StringFilter<"VoucherProduct"> | string
    voucher_product_nominal?: IntFilter<"VoucherProduct"> | number
    voucher_product_startdate?: DateTimeFilter<"VoucherProduct"> | Date | string
    voucher_product_enddate?: DateTimeFilter<"VoucherProduct"> | Date | string
    created_at?: DateTimeFilter<"VoucherProduct"> | Date | string
    admin_responsible?: IntFilter<"VoucherProduct"> | number
    product_id?: IntFilter<"VoucherProduct"> | number
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type VoucherProductOrderByWithRelationInput = {
    voucher_product_id?: SortOrder
    voucher_product_code?: SortOrder
    voucher_product_nominal?: SortOrder
    voucher_product_startdate?: SortOrder
    voucher_product_enddate?: SortOrder
    created_at?: SortOrder
    admin_responsible?: SortOrder
    product_id?: SortOrder
    admin?: AdminOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type VoucherProductWhereUniqueInput = Prisma.AtLeast<{
    voucher_product_id?: number
    voucher_product_code?: string
    AND?: VoucherProductWhereInput | VoucherProductWhereInput[]
    OR?: VoucherProductWhereInput[]
    NOT?: VoucherProductWhereInput | VoucherProductWhereInput[]
    voucher_product_nominal?: IntFilter<"VoucherProduct"> | number
    voucher_product_startdate?: DateTimeFilter<"VoucherProduct"> | Date | string
    voucher_product_enddate?: DateTimeFilter<"VoucherProduct"> | Date | string
    created_at?: DateTimeFilter<"VoucherProduct"> | Date | string
    admin_responsible?: IntFilter<"VoucherProduct"> | number
    product_id?: IntFilter<"VoucherProduct"> | number
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "voucher_product_id" | "voucher_product_code">

  export type VoucherProductOrderByWithAggregationInput = {
    voucher_product_id?: SortOrder
    voucher_product_code?: SortOrder
    voucher_product_nominal?: SortOrder
    voucher_product_startdate?: SortOrder
    voucher_product_enddate?: SortOrder
    created_at?: SortOrder
    admin_responsible?: SortOrder
    product_id?: SortOrder
    _count?: VoucherProductCountOrderByAggregateInput
    _avg?: VoucherProductAvgOrderByAggregateInput
    _max?: VoucherProductMaxOrderByAggregateInput
    _min?: VoucherProductMinOrderByAggregateInput
    _sum?: VoucherProductSumOrderByAggregateInput
  }

  export type VoucherProductScalarWhereWithAggregatesInput = {
    AND?: VoucherProductScalarWhereWithAggregatesInput | VoucherProductScalarWhereWithAggregatesInput[]
    OR?: VoucherProductScalarWhereWithAggregatesInput[]
    NOT?: VoucherProductScalarWhereWithAggregatesInput | VoucherProductScalarWhereWithAggregatesInput[]
    voucher_product_id?: IntWithAggregatesFilter<"VoucherProduct"> | number
    voucher_product_code?: StringWithAggregatesFilter<"VoucherProduct"> | string
    voucher_product_nominal?: IntWithAggregatesFilter<"VoucherProduct"> | number
    voucher_product_startdate?: DateTimeWithAggregatesFilter<"VoucherProduct"> | Date | string
    voucher_product_enddate?: DateTimeWithAggregatesFilter<"VoucherProduct"> | Date | string
    created_at?: DateTimeWithAggregatesFilter<"VoucherProduct"> | Date | string
    admin_responsible?: IntWithAggregatesFilter<"VoucherProduct"> | number
    product_id?: IntWithAggregatesFilter<"VoucherProduct"> | number
  }

  export type DiscountWhereInput = {
    AND?: DiscountWhereInput | DiscountWhereInput[]
    OR?: DiscountWhereInput[]
    NOT?: DiscountWhereInput | DiscountWhereInput[]
    discount_id?: IntFilter<"Discount"> | number
    discount_product?: StringFilter<"Discount"> | string
    discount_amount?: IntFilter<"Discount"> | number
    created_at?: DateTimeFilter<"Discount"> | Date | string
    discount_startdate?: DateTimeFilter<"Discount"> | Date | string
    discount_enddate?: DateTimeFilter<"Discount"> | Date | string
    isActive?: BoolFilter<"Discount"> | boolean
    orders?: OrderListRelationFilter
  }

  export type DiscountOrderByWithRelationInput = {
    discount_id?: SortOrder
    discount_product?: SortOrder
    discount_amount?: SortOrder
    created_at?: SortOrder
    discount_startdate?: SortOrder
    discount_enddate?: SortOrder
    isActive?: SortOrder
    orders?: OrderOrderByRelationAggregateInput
  }

  export type DiscountWhereUniqueInput = Prisma.AtLeast<{
    discount_id?: number
    AND?: DiscountWhereInput | DiscountWhereInput[]
    OR?: DiscountWhereInput[]
    NOT?: DiscountWhereInput | DiscountWhereInput[]
    discount_product?: StringFilter<"Discount"> | string
    discount_amount?: IntFilter<"Discount"> | number
    created_at?: DateTimeFilter<"Discount"> | Date | string
    discount_startdate?: DateTimeFilter<"Discount"> | Date | string
    discount_enddate?: DateTimeFilter<"Discount"> | Date | string
    isActive?: BoolFilter<"Discount"> | boolean
    orders?: OrderListRelationFilter
  }, "discount_id">

  export type DiscountOrderByWithAggregationInput = {
    discount_id?: SortOrder
    discount_product?: SortOrder
    discount_amount?: SortOrder
    created_at?: SortOrder
    discount_startdate?: SortOrder
    discount_enddate?: SortOrder
    isActive?: SortOrder
    _count?: DiscountCountOrderByAggregateInput
    _avg?: DiscountAvgOrderByAggregateInput
    _max?: DiscountMaxOrderByAggregateInput
    _min?: DiscountMinOrderByAggregateInput
    _sum?: DiscountSumOrderByAggregateInput
  }

  export type DiscountScalarWhereWithAggregatesInput = {
    AND?: DiscountScalarWhereWithAggregatesInput | DiscountScalarWhereWithAggregatesInput[]
    OR?: DiscountScalarWhereWithAggregatesInput[]
    NOT?: DiscountScalarWhereWithAggregatesInput | DiscountScalarWhereWithAggregatesInput[]
    discount_id?: IntWithAggregatesFilter<"Discount"> | number
    discount_product?: StringWithAggregatesFilter<"Discount"> | string
    discount_amount?: IntWithAggregatesFilter<"Discount"> | number
    created_at?: DateTimeWithAggregatesFilter<"Discount"> | Date | string
    discount_startdate?: DateTimeWithAggregatesFilter<"Discount"> | Date | string
    discount_enddate?: DateTimeWithAggregatesFilter<"Discount"> | Date | string
    isActive?: BoolWithAggregatesFilter<"Discount"> | boolean
  }

  export type CartWhereInput = {
    AND?: CartWhereInput | CartWhereInput[]
    OR?: CartWhereInput[]
    NOT?: CartWhereInput | CartWhereInput[]
    cart_id?: IntFilter<"Cart"> | number
    created_at?: DateTimeFilter<"Cart"> | Date | string
    profile_id?: IntFilter<"Cart"> | number
    cart_items?: CartItemListRelationFilter
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
  }

  export type CartOrderByWithRelationInput = {
    cart_id?: SortOrder
    created_at?: SortOrder
    profile_id?: SortOrder
    cart_items?: CartItemOrderByRelationAggregateInput
    profile?: ProfileOrderByWithRelationInput
  }

  export type CartWhereUniqueInput = Prisma.AtLeast<{
    cart_id?: number
    AND?: CartWhereInput | CartWhereInput[]
    OR?: CartWhereInput[]
    NOT?: CartWhereInput | CartWhereInput[]
    created_at?: DateTimeFilter<"Cart"> | Date | string
    profile_id?: IntFilter<"Cart"> | number
    cart_items?: CartItemListRelationFilter
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
  }, "cart_id">

  export type CartOrderByWithAggregationInput = {
    cart_id?: SortOrder
    created_at?: SortOrder
    profile_id?: SortOrder
    _count?: CartCountOrderByAggregateInput
    _avg?: CartAvgOrderByAggregateInput
    _max?: CartMaxOrderByAggregateInput
    _min?: CartMinOrderByAggregateInput
    _sum?: CartSumOrderByAggregateInput
  }

  export type CartScalarWhereWithAggregatesInput = {
    AND?: CartScalarWhereWithAggregatesInput | CartScalarWhereWithAggregatesInput[]
    OR?: CartScalarWhereWithAggregatesInput[]
    NOT?: CartScalarWhereWithAggregatesInput | CartScalarWhereWithAggregatesInput[]
    cart_id?: IntWithAggregatesFilter<"Cart"> | number
    created_at?: DateTimeWithAggregatesFilter<"Cart"> | Date | string
    profile_id?: IntWithAggregatesFilter<"Cart"> | number
  }

  export type CartItemWhereInput = {
    AND?: CartItemWhereInput | CartItemWhereInput[]
    OR?: CartItemWhereInput[]
    NOT?: CartItemWhereInput | CartItemWhereInput[]
    cart_item_id?: IntFilter<"CartItem"> | number
    cart_id?: IntFilter<"CartItem"> | number
    product_id?: IntFilter<"CartItem"> | number
    quantity?: IntFilter<"CartItem"> | number
    cart?: XOR<CartScalarRelationFilter, CartWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type CartItemOrderByWithRelationInput = {
    cart_item_id?: SortOrder
    cart_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    cart?: CartOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type CartItemWhereUniqueInput = Prisma.AtLeast<{
    cart_item_id?: number
    AND?: CartItemWhereInput | CartItemWhereInput[]
    OR?: CartItemWhereInput[]
    NOT?: CartItemWhereInput | CartItemWhereInput[]
    cart_id?: IntFilter<"CartItem"> | number
    product_id?: IntFilter<"CartItem"> | number
    quantity?: IntFilter<"CartItem"> | number
    cart?: XOR<CartScalarRelationFilter, CartWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "cart_item_id">

  export type CartItemOrderByWithAggregationInput = {
    cart_item_id?: SortOrder
    cart_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    _count?: CartItemCountOrderByAggregateInput
    _avg?: CartItemAvgOrderByAggregateInput
    _max?: CartItemMaxOrderByAggregateInput
    _min?: CartItemMinOrderByAggregateInput
    _sum?: CartItemSumOrderByAggregateInput
  }

  export type CartItemScalarWhereWithAggregatesInput = {
    AND?: CartItemScalarWhereWithAggregatesInput | CartItemScalarWhereWithAggregatesInput[]
    OR?: CartItemScalarWhereWithAggregatesInput[]
    NOT?: CartItemScalarWhereWithAggregatesInput | CartItemScalarWhereWithAggregatesInput[]
    cart_item_id?: IntWithAggregatesFilter<"CartItem"> | number
    cart_id?: IntWithAggregatesFilter<"CartItem"> | number
    product_id?: IntWithAggregatesFilter<"CartItem"> | number
    quantity?: IntWithAggregatesFilter<"CartItem"> | number
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    order_id?: IntFilter<"Order"> | number
    order_number?: StringNullableFilter<"Order"> | string | null
    store_id?: IntFilter<"Order"> | number
    address_id?: IntFilter<"Order"> | number
    total_price?: IntFilter<"Order"> | number
    shipping_price?: IntNullableFilter<"Order"> | number | null
    total_payment?: IntNullableFilter<"Order"> | number | null
    tracking_number?: StringNullableFilter<"Order"> | string | null
    discount_id?: IntNullableFilter<"Order"> | number | null
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    order_date?: DateTimeFilter<"Order"> | Date | string
    profile_id?: IntFilter<"Order"> | number
    createdAt?: DateTimeNullableFilter<"Order"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Order"> | Date | string | null
    address?: XOR<AddressScalarRelationFilter, AddressWhereInput>
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    store?: XOR<StoreScalarRelationFilter, StoreWhereInput>
    discount?: XOR<DiscountNullableScalarRelationFilter, DiscountWhereInput> | null
    order_cancel?: XOR<OrderCancelNullableScalarRelationFilter, OrderCancelWhereInput> | null
    admin_orders?: AdminOrderListRelationFilter
    order_items?: OrderItemListRelationFilter
    payment_proof?: XOR<PaymentProofNullableScalarRelationFilter, PaymentProofWhereInput> | null
  }

  export type OrderOrderByWithRelationInput = {
    order_id?: SortOrder
    order_number?: SortOrderInput | SortOrder
    store_id?: SortOrder
    address_id?: SortOrder
    total_price?: SortOrder
    shipping_price?: SortOrderInput | SortOrder
    total_payment?: SortOrderInput | SortOrder
    tracking_number?: SortOrderInput | SortOrder
    discount_id?: SortOrderInput | SortOrder
    status?: SortOrder
    order_date?: SortOrder
    profile_id?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    address?: AddressOrderByWithRelationInput
    profile?: ProfileOrderByWithRelationInput
    store?: StoreOrderByWithRelationInput
    discount?: DiscountOrderByWithRelationInput
    order_cancel?: OrderCancelOrderByWithRelationInput
    admin_orders?: AdminOrderOrderByRelationAggregateInput
    order_items?: OrderItemOrderByRelationAggregateInput
    payment_proof?: PaymentProofOrderByWithRelationInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    order_id?: number
    order_number?: string
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    store_id?: IntFilter<"Order"> | number
    address_id?: IntFilter<"Order"> | number
    total_price?: IntFilter<"Order"> | number
    shipping_price?: IntNullableFilter<"Order"> | number | null
    total_payment?: IntNullableFilter<"Order"> | number | null
    tracking_number?: StringNullableFilter<"Order"> | string | null
    discount_id?: IntNullableFilter<"Order"> | number | null
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    order_date?: DateTimeFilter<"Order"> | Date | string
    profile_id?: IntFilter<"Order"> | number
    createdAt?: DateTimeNullableFilter<"Order"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Order"> | Date | string | null
    address?: XOR<AddressScalarRelationFilter, AddressWhereInput>
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    store?: XOR<StoreScalarRelationFilter, StoreWhereInput>
    discount?: XOR<DiscountNullableScalarRelationFilter, DiscountWhereInput> | null
    order_cancel?: XOR<OrderCancelNullableScalarRelationFilter, OrderCancelWhereInput> | null
    admin_orders?: AdminOrderListRelationFilter
    order_items?: OrderItemListRelationFilter
    payment_proof?: XOR<PaymentProofNullableScalarRelationFilter, PaymentProofWhereInput> | null
  }, "order_id" | "order_number">

  export type OrderOrderByWithAggregationInput = {
    order_id?: SortOrder
    order_number?: SortOrderInput | SortOrder
    store_id?: SortOrder
    address_id?: SortOrder
    total_price?: SortOrder
    shipping_price?: SortOrderInput | SortOrder
    total_payment?: SortOrderInput | SortOrder
    tracking_number?: SortOrderInput | SortOrder
    discount_id?: SortOrderInput | SortOrder
    status?: SortOrder
    order_date?: SortOrder
    profile_id?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    order_id?: IntWithAggregatesFilter<"Order"> | number
    order_number?: StringNullableWithAggregatesFilter<"Order"> | string | null
    store_id?: IntWithAggregatesFilter<"Order"> | number
    address_id?: IntWithAggregatesFilter<"Order"> | number
    total_price?: IntWithAggregatesFilter<"Order"> | number
    shipping_price?: IntNullableWithAggregatesFilter<"Order"> | number | null
    total_payment?: IntNullableWithAggregatesFilter<"Order"> | number | null
    tracking_number?: StringNullableWithAggregatesFilter<"Order"> | string | null
    discount_id?: IntNullableWithAggregatesFilter<"Order"> | number | null
    status?: EnumOrderStatusWithAggregatesFilter<"Order"> | $Enums.OrderStatus
    order_date?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    profile_id?: IntWithAggregatesFilter<"Order"> | number
    createdAt?: DateTimeNullableWithAggregatesFilter<"Order"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Order"> | Date | string | null
  }

  export type OrderItemWhereInput = {
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    order_item_id?: IntFilter<"OrderItem"> | number
    order_id?: IntFilter<"OrderItem"> | number
    product_id?: IntFilter<"OrderItem"> | number
    quantity?: IntFilter<"OrderItem"> | number
    price?: IntFilter<"OrderItem"> | number
    subtotal?: IntFilter<"OrderItem"> | number
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type OrderItemOrderByWithRelationInput = {
    order_item_id?: SortOrder
    order_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    subtotal?: SortOrder
    order?: OrderOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type OrderItemWhereUniqueInput = Prisma.AtLeast<{
    order_item_id?: number
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    order_id?: IntFilter<"OrderItem"> | number
    product_id?: IntFilter<"OrderItem"> | number
    quantity?: IntFilter<"OrderItem"> | number
    price?: IntFilter<"OrderItem"> | number
    subtotal?: IntFilter<"OrderItem"> | number
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "order_item_id">

  export type OrderItemOrderByWithAggregationInput = {
    order_item_id?: SortOrder
    order_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    subtotal?: SortOrder
    _count?: OrderItemCountOrderByAggregateInput
    _avg?: OrderItemAvgOrderByAggregateInput
    _max?: OrderItemMaxOrderByAggregateInput
    _min?: OrderItemMinOrderByAggregateInput
    _sum?: OrderItemSumOrderByAggregateInput
  }

  export type OrderItemScalarWhereWithAggregatesInput = {
    AND?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    OR?: OrderItemScalarWhereWithAggregatesInput[]
    NOT?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    order_item_id?: IntWithAggregatesFilter<"OrderItem"> | number
    order_id?: IntWithAggregatesFilter<"OrderItem"> | number
    product_id?: IntWithAggregatesFilter<"OrderItem"> | number
    quantity?: IntWithAggregatesFilter<"OrderItem"> | number
    price?: IntWithAggregatesFilter<"OrderItem"> | number
    subtotal?: IntWithAggregatesFilter<"OrderItem"> | number
  }

  export type PaymentProofWhereInput = {
    AND?: PaymentProofWhereInput | PaymentProofWhereInput[]
    OR?: PaymentProofWhereInput[]
    NOT?: PaymentProofWhereInput | PaymentProofWhereInput[]
    payment_proof_id?: IntFilter<"PaymentProof"> | number
    order_id?: IntFilter<"PaymentProof"> | number
    image_url?: StringFilter<"PaymentProof"> | string
    uploaded_at?: DateTimeFilter<"PaymentProof"> | Date | string
    status?: EnumPaymentStatusFilter<"PaymentProof"> | $Enums.PaymentStatus
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }

  export type PaymentProofOrderByWithRelationInput = {
    payment_proof_id?: SortOrder
    order_id?: SortOrder
    image_url?: SortOrder
    uploaded_at?: SortOrder
    status?: SortOrder
    order?: OrderOrderByWithRelationInput
  }

  export type PaymentProofWhereUniqueInput = Prisma.AtLeast<{
    payment_proof_id?: number
    order_id?: number
    AND?: PaymentProofWhereInput | PaymentProofWhereInput[]
    OR?: PaymentProofWhereInput[]
    NOT?: PaymentProofWhereInput | PaymentProofWhereInput[]
    image_url?: StringFilter<"PaymentProof"> | string
    uploaded_at?: DateTimeFilter<"PaymentProof"> | Date | string
    status?: EnumPaymentStatusFilter<"PaymentProof"> | $Enums.PaymentStatus
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }, "payment_proof_id" | "order_id">

  export type PaymentProofOrderByWithAggregationInput = {
    payment_proof_id?: SortOrder
    order_id?: SortOrder
    image_url?: SortOrder
    uploaded_at?: SortOrder
    status?: SortOrder
    _count?: PaymentProofCountOrderByAggregateInput
    _avg?: PaymentProofAvgOrderByAggregateInput
    _max?: PaymentProofMaxOrderByAggregateInput
    _min?: PaymentProofMinOrderByAggregateInput
    _sum?: PaymentProofSumOrderByAggregateInput
  }

  export type PaymentProofScalarWhereWithAggregatesInput = {
    AND?: PaymentProofScalarWhereWithAggregatesInput | PaymentProofScalarWhereWithAggregatesInput[]
    OR?: PaymentProofScalarWhereWithAggregatesInput[]
    NOT?: PaymentProofScalarWhereWithAggregatesInput | PaymentProofScalarWhereWithAggregatesInput[]
    payment_proof_id?: IntWithAggregatesFilter<"PaymentProof"> | number
    order_id?: IntWithAggregatesFilter<"PaymentProof"> | number
    image_url?: StringWithAggregatesFilter<"PaymentProof"> | string
    uploaded_at?: DateTimeWithAggregatesFilter<"PaymentProof"> | Date | string
    status?: EnumPaymentStatusWithAggregatesFilter<"PaymentProof"> | $Enums.PaymentStatus
  }

  export type OrderCancelWhereInput = {
    AND?: OrderCancelWhereInput | OrderCancelWhereInput[]
    OR?: OrderCancelWhereInput[]
    NOT?: OrderCancelWhereInput | OrderCancelWhereInput[]
    order_cancel_id?: IntFilter<"OrderCancel"> | number
    order_id?: IntFilter<"OrderCancel"> | number
    reason?: StringFilter<"OrderCancel"> | string
    canceled_at?: DateTimeFilter<"OrderCancel"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }

  export type OrderCancelOrderByWithRelationInput = {
    order_cancel_id?: SortOrder
    order_id?: SortOrder
    reason?: SortOrder
    canceled_at?: SortOrder
    order?: OrderOrderByWithRelationInput
  }

  export type OrderCancelWhereUniqueInput = Prisma.AtLeast<{
    order_cancel_id?: number
    order_id?: number
    AND?: OrderCancelWhereInput | OrderCancelWhereInput[]
    OR?: OrderCancelWhereInput[]
    NOT?: OrderCancelWhereInput | OrderCancelWhereInput[]
    reason?: StringFilter<"OrderCancel"> | string
    canceled_at?: DateTimeFilter<"OrderCancel"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }, "order_cancel_id" | "order_id">

  export type OrderCancelOrderByWithAggregationInput = {
    order_cancel_id?: SortOrder
    order_id?: SortOrder
    reason?: SortOrder
    canceled_at?: SortOrder
    _count?: OrderCancelCountOrderByAggregateInput
    _avg?: OrderCancelAvgOrderByAggregateInput
    _max?: OrderCancelMaxOrderByAggregateInput
    _min?: OrderCancelMinOrderByAggregateInput
    _sum?: OrderCancelSumOrderByAggregateInput
  }

  export type OrderCancelScalarWhereWithAggregatesInput = {
    AND?: OrderCancelScalarWhereWithAggregatesInput | OrderCancelScalarWhereWithAggregatesInput[]
    OR?: OrderCancelScalarWhereWithAggregatesInput[]
    NOT?: OrderCancelScalarWhereWithAggregatesInput | OrderCancelScalarWhereWithAggregatesInput[]
    order_cancel_id?: IntWithAggregatesFilter<"OrderCancel"> | number
    order_id?: IntWithAggregatesFilter<"OrderCancel"> | number
    reason?: StringWithAggregatesFilter<"OrderCancel"> | string
    canceled_at?: DateTimeWithAggregatesFilter<"OrderCancel"> | Date | string
  }

  export type AdminOrderWhereInput = {
    AND?: AdminOrderWhereInput | AdminOrderWhereInput[]
    OR?: AdminOrderWhereInput[]
    NOT?: AdminOrderWhereInput | AdminOrderWhereInput[]
    admin_order_id?: IntFilter<"AdminOrder"> | number
    admin_id?: IntFilter<"AdminOrder"> | number
    order_id?: IntFilter<"AdminOrder"> | number
    action?: EnumActionEnumFilter<"AdminOrder"> | $Enums.ActionEnum
    action_time?: DateTimeFilter<"AdminOrder"> | Date | string
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }

  export type AdminOrderOrderByWithRelationInput = {
    admin_order_id?: SortOrder
    admin_id?: SortOrder
    order_id?: SortOrder
    action?: SortOrder
    action_time?: SortOrder
    admin?: AdminOrderByWithRelationInput
    order?: OrderOrderByWithRelationInput
  }

  export type AdminOrderWhereUniqueInput = Prisma.AtLeast<{
    admin_order_id?: number
    AND?: AdminOrderWhereInput | AdminOrderWhereInput[]
    OR?: AdminOrderWhereInput[]
    NOT?: AdminOrderWhereInput | AdminOrderWhereInput[]
    admin_id?: IntFilter<"AdminOrder"> | number
    order_id?: IntFilter<"AdminOrder"> | number
    action?: EnumActionEnumFilter<"AdminOrder"> | $Enums.ActionEnum
    action_time?: DateTimeFilter<"AdminOrder"> | Date | string
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
  }, "admin_order_id">

  export type AdminOrderOrderByWithAggregationInput = {
    admin_order_id?: SortOrder
    admin_id?: SortOrder
    order_id?: SortOrder
    action?: SortOrder
    action_time?: SortOrder
    _count?: AdminOrderCountOrderByAggregateInput
    _avg?: AdminOrderAvgOrderByAggregateInput
    _max?: AdminOrderMaxOrderByAggregateInput
    _min?: AdminOrderMinOrderByAggregateInput
    _sum?: AdminOrderSumOrderByAggregateInput
  }

  export type AdminOrderScalarWhereWithAggregatesInput = {
    AND?: AdminOrderScalarWhereWithAggregatesInput | AdminOrderScalarWhereWithAggregatesInput[]
    OR?: AdminOrderScalarWhereWithAggregatesInput[]
    NOT?: AdminOrderScalarWhereWithAggregatesInput | AdminOrderScalarWhereWithAggregatesInput[]
    admin_order_id?: IntWithAggregatesFilter<"AdminOrder"> | number
    admin_id?: IntWithAggregatesFilter<"AdminOrder"> | number
    order_id?: IntWithAggregatesFilter<"AdminOrder"> | number
    action?: EnumActionEnumWithAggregatesFilter<"AdminOrder"> | $Enums.ActionEnum
    action_time?: DateTimeWithAggregatesFilter<"AdminOrder"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.Role
    updateAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.Role
    updateAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.Role
    updateAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    userId: string
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateManyInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    userId: string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileCreateInput = {
    phone?: string | null
    pfp_url?: string | null
    user: UserCreateNestedOneWithoutProfileInput
    cart?: CartCreateNestedManyWithoutProfileInput
    orders?: OrderCreateNestedManyWithoutProfileInput
    voucher_store?: VoucherStoreCreateNestedManyWithoutProfilesInput
    Address?: AddressCreateNestedManyWithoutProfileInput
    referral?: ReferralCreateNestedOneWithoutProfileInput
    referred?: ReferralCreateNestedOneWithoutReferredInput
  }

  export type ProfileUncheckedCreateInput = {
    profile_id?: number
    user_id: string
    phone?: string | null
    pfp_url?: string | null
    referred_id?: number | null
    cart?: CartUncheckedCreateNestedManyWithoutProfileInput
    orders?: OrderUncheckedCreateNestedManyWithoutProfileInput
    voucher_store?: VoucherStoreUncheckedCreateNestedManyWithoutProfilesInput
    Address?: AddressUncheckedCreateNestedManyWithoutProfileInput
    referral?: ReferralUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileUpdateInput = {
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    cart?: CartUpdateManyWithoutProfileNestedInput
    orders?: OrderUpdateManyWithoutProfileNestedInput
    voucher_store?: VoucherStoreUpdateManyWithoutProfilesNestedInput
    Address?: AddressUpdateManyWithoutProfileNestedInput
    referral?: ReferralUpdateOneWithoutProfileNestedInput
    referred?: ReferralUpdateOneWithoutReferredNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    profile_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
    referred_id?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: CartUncheckedUpdateManyWithoutProfileNestedInput
    orders?: OrderUncheckedUpdateManyWithoutProfileNestedInput
    voucher_store?: VoucherStoreUncheckedUpdateManyWithoutProfilesNestedInput
    Address?: AddressUncheckedUpdateManyWithoutProfileNestedInput
    referral?: ReferralUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type ProfileCreateManyInput = {
    profile_id?: number
    user_id: string
    phone?: string | null
    pfp_url?: string | null
    referred_id?: number | null
  }

  export type ProfileUpdateManyMutationInput = {
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUncheckedUpdateManyInput = {
    profile_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
    referred_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ReferralCreateInput = {
    referral_code: string
    profile?: ProfileCreateNestedOneWithoutReferralInput
    referred?: ProfileCreateNestedManyWithoutReferredInput
  }

  export type ReferralUncheckedCreateInput = {
    referral_id?: number
    referral_code: string
    profile_id?: number | null
    referred?: ProfileUncheckedCreateNestedManyWithoutReferredInput
  }

  export type ReferralUpdateInput = {
    referral_code?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneWithoutReferralNestedInput
    referred?: ProfileUpdateManyWithoutReferredNestedInput
  }

  export type ReferralUncheckedUpdateInput = {
    referral_id?: IntFieldUpdateOperationsInput | number
    referral_code?: StringFieldUpdateOperationsInput | string
    profile_id?: NullableIntFieldUpdateOperationsInput | number | null
    referred?: ProfileUncheckedUpdateManyWithoutReferredNestedInput
  }

  export type ReferralCreateManyInput = {
    referral_id?: number
    referral_code: string
    profile_id?: number | null
  }

  export type ReferralUpdateManyMutationInput = {
    referral_code?: StringFieldUpdateOperationsInput | string
  }

  export type ReferralUncheckedUpdateManyInput = {
    referral_id?: IntFieldUpdateOperationsInput | number
    referral_code?: StringFieldUpdateOperationsInput | string
    profile_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AddressCreateInput = {
    street: string
    city: string
    country: string
    lat: string
    lng: string
    post_code: string
    address_name: string
    address_contact: string
    deleted_at?: Date | string | null
    orders?: OrderCreateNestedManyWithoutAddressInput
    profile: ProfileCreateNestedOneWithoutAddressInput
  }

  export type AddressUncheckedCreateInput = {
    address_id?: number
    street: string
    city: string
    country: string
    lat: string
    lng: string
    post_code: string
    address_name: string
    address_contact: string
    profile_id: number
    deleted_at?: Date | string | null
    orders?: OrderUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressUpdateInput = {
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    post_code?: StringFieldUpdateOperationsInput | string
    address_name?: StringFieldUpdateOperationsInput | string
    address_contact?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: OrderUpdateManyWithoutAddressNestedInput
    profile?: ProfileUpdateOneRequiredWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateInput = {
    address_id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    post_code?: StringFieldUpdateOperationsInput | string
    address_name?: StringFieldUpdateOperationsInput | string
    address_contact?: StringFieldUpdateOperationsInput | string
    profile_id?: IntFieldUpdateOperationsInput | number
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: OrderUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type AddressCreateManyInput = {
    address_id?: number
    street: string
    city: string
    country: string
    lat: string
    lng: string
    post_code: string
    address_name: string
    address_contact: string
    profile_id: number
    deleted_at?: Date | string | null
  }

  export type AddressUpdateManyMutationInput = {
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    post_code?: StringFieldUpdateOperationsInput | string
    address_name?: StringFieldUpdateOperationsInput | string
    address_contact?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AddressUncheckedUpdateManyInput = {
    address_id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    post_code?: StringFieldUpdateOperationsInput | string
    address_name?: StringFieldUpdateOperationsInput | string
    address_contact?: StringFieldUpdateOperationsInput | string
    profile_id?: IntFieldUpdateOperationsInput | number
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AdminCreateInput = {
    phone: string
    position: string
    deleted_at?: Date | string | null
    user: UserCreateNestedOneWithoutAdminInput
    store: StoreCreateNestedOneWithoutAdminInput
    admin_orders?: AdminOrderCreateNestedManyWithoutAdminInput
    voucher_ongkir?: VoucherOngkirCreateNestedManyWithoutAdminInput
    voucher_product?: VoucherProductCreateNestedManyWithoutAdminInput
    voucher_store?: VoucherStoreCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateInput = {
    admin_id?: number
    user_id: string
    store_id: number
    phone: string
    position: string
    deleted_at?: Date | string | null
    admin_orders?: AdminOrderUncheckedCreateNestedManyWithoutAdminInput
    voucher_ongkir?: VoucherOngkirUncheckedCreateNestedManyWithoutAdminInput
    voucher_product?: VoucherProductUncheckedCreateNestedManyWithoutAdminInput
    voucher_store?: VoucherStoreUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminUpdateInput = {
    phone?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutAdminNestedInput
    store?: StoreUpdateOneRequiredWithoutAdminNestedInput
    admin_orders?: AdminOrderUpdateManyWithoutAdminNestedInput
    voucher_ongkir?: VoucherOngkirUpdateManyWithoutAdminNestedInput
    voucher_product?: VoucherProductUpdateManyWithoutAdminNestedInput
    voucher_store?: VoucherStoreUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    admin_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    store_id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    admin_orders?: AdminOrderUncheckedUpdateManyWithoutAdminNestedInput
    voucher_ongkir?: VoucherOngkirUncheckedUpdateManyWithoutAdminNestedInput
    voucher_product?: VoucherProductUncheckedUpdateManyWithoutAdminNestedInput
    voucher_store?: VoucherStoreUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type AdminCreateManyInput = {
    admin_id?: number
    user_id: string
    store_id: number
    phone: string
    position: string
    deleted_at?: Date | string | null
  }

  export type AdminUpdateManyMutationInput = {
    phone?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AdminUncheckedUpdateManyInput = {
    admin_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    store_id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StoreCreateInput = {
    store_name: string
    store_address: string
    country: string
    city: string
    lat: string
    lng: string
    isActive?: boolean
    orders?: OrderCreateNestedManyWithoutStoreInput
    admin?: AdminCreateNestedManyWithoutStoreInput
    stock?: StockCreateNestedManyWithoutStoreInput
    stock_journal?: StockJournalCreateNestedManyWithoutStoreInput
    voucher_ongkir?: VoucherOngkirCreateNestedOneWithoutStoreInput
    voucher_stores?: VoucherStoreCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateInput = {
    store_id?: number
    store_name: string
    store_address: string
    country: string
    city: string
    lat: string
    lng: string
    isActive?: boolean
    orders?: OrderUncheckedCreateNestedManyWithoutStoreInput
    admin?: AdminUncheckedCreateNestedManyWithoutStoreInput
    stock?: StockUncheckedCreateNestedManyWithoutStoreInput
    stock_journal?: StockJournalUncheckedCreateNestedManyWithoutStoreInput
    voucher_ongkir?: VoucherOngkirUncheckedCreateNestedOneWithoutStoreInput
    voucher_stores?: VoucherStoreUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreUpdateInput = {
    store_name?: StringFieldUpdateOperationsInput | string
    store_address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUpdateManyWithoutStoreNestedInput
    admin?: AdminUpdateManyWithoutStoreNestedInput
    stock?: StockUpdateManyWithoutStoreNestedInput
    stock_journal?: StockJournalUpdateManyWithoutStoreNestedInput
    voucher_ongkir?: VoucherOngkirUpdateOneWithoutStoreNestedInput
    voucher_stores?: VoucherStoreUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateInput = {
    store_id?: IntFieldUpdateOperationsInput | number
    store_name?: StringFieldUpdateOperationsInput | string
    store_address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUncheckedUpdateManyWithoutStoreNestedInput
    admin?: AdminUncheckedUpdateManyWithoutStoreNestedInput
    stock?: StockUncheckedUpdateManyWithoutStoreNestedInput
    stock_journal?: StockJournalUncheckedUpdateManyWithoutStoreNestedInput
    voucher_ongkir?: VoucherOngkirUncheckedUpdateOneWithoutStoreNestedInput
    voucher_stores?: VoucherStoreUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type StoreCreateManyInput = {
    store_id?: number
    store_name: string
    store_address: string
    country: string
    city: string
    lat: string
    lng: string
    isActive?: boolean
  }

  export type StoreUpdateManyMutationInput = {
    store_name?: StringFieldUpdateOperationsInput | string
    store_address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StoreUncheckedUpdateManyInput = {
    store_id?: IntFieldUpdateOperationsInput | number
    store_name?: StringFieldUpdateOperationsInput | string
    store_address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StockCreateInput = {
    quantity: number
    product: ProductCreateNestedOneWithoutStockInput
    store: StoreCreateNestedOneWithoutStockInput
    stock_journal?: StockJournalCreateNestedManyWithoutStockInput
  }

  export type StockUncheckedCreateInput = {
    stock_id?: number
    store_id: number
    product_id: number
    quantity: number
    stock_journal?: StockJournalUncheckedCreateNestedManyWithoutStockInput
  }

  export type StockUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutStockNestedInput
    store?: StoreUpdateOneRequiredWithoutStockNestedInput
    stock_journal?: StockJournalUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateInput = {
    stock_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    stock_journal?: StockJournalUncheckedUpdateManyWithoutStockNestedInput
  }

  export type StockCreateManyInput = {
    stock_id?: number
    store_id: number
    product_id: number
    quantity: number
  }

  export type StockUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type StockUncheckedUpdateManyInput = {
    stock_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type StockJournalCreateInput = {
    product_id: string
    quantity: number
    type: string
    notes: string
    created_at: Date | string
    stock: StockCreateNestedOneWithoutStock_journalInput
    store: StoreCreateNestedOneWithoutStock_journalInput
  }

  export type StockJournalUncheckedCreateInput = {
    stock_journal_id?: number
    store_id: number
    stock_id: number
    product_id: string
    quantity: number
    type: string
    notes: string
    created_at: Date | string
  }

  export type StockJournalUpdateInput = {
    product_id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    stock?: StockUpdateOneRequiredWithoutStock_journalNestedInput
    store?: StoreUpdateOneRequiredWithoutStock_journalNestedInput
  }

  export type StockJournalUncheckedUpdateInput = {
    stock_journal_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    stock_id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockJournalCreateManyInput = {
    stock_journal_id?: number
    store_id: number
    stock_id: number
    product_id: string
    quantity: number
    type: string
    notes: string
    created_at: Date | string
  }

  export type StockJournalUpdateManyMutationInput = {
    product_id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockJournalUncheckedUpdateManyInput = {
    stock_journal_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    stock_id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    product_name: string
    product_price: number
    product_description?: string | null
    deletedAt?: Date | string | null
    cart_items?: CartItemCreateNestedManyWithoutProductInput
    order_items?: OrderItemCreateNestedManyWithoutProductInput
    product_category: ProductCategoryCreateNestedOneWithoutProductInput
    product_img?: ProductImgCreateNestedManyWithoutProductInput
    stock?: StockCreateNestedOneWithoutProductInput
    voucher?: VoucherProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    product_id?: number
    product_name: string
    product_price: number
    product_category_id: number
    product_description?: string | null
    deletedAt?: Date | string | null
    cart_items?: CartItemUncheckedCreateNestedManyWithoutProductInput
    order_items?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    product_img?: ProductImgUncheckedCreateNestedManyWithoutProductInput
    stock?: StockUncheckedCreateNestedOneWithoutProductInput
    voucher?: VoucherProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    product_description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cart_items?: CartItemUpdateManyWithoutProductNestedInput
    order_items?: OrderItemUpdateManyWithoutProductNestedInput
    product_category?: ProductCategoryUpdateOneRequiredWithoutProductNestedInput
    product_img?: ProductImgUpdateManyWithoutProductNestedInput
    stock?: StockUpdateOneWithoutProductNestedInput
    voucher?: VoucherProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    product_category_id?: IntFieldUpdateOperationsInput | number
    product_description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cart_items?: CartItemUncheckedUpdateManyWithoutProductNestedInput
    order_items?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    product_img?: ProductImgUncheckedUpdateManyWithoutProductNestedInput
    stock?: StockUncheckedUpdateOneWithoutProductNestedInput
    voucher?: VoucherProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    product_id?: number
    product_name: string
    product_price: number
    product_category_id: number
    product_description?: string | null
    deletedAt?: Date | string | null
  }

  export type ProductUpdateManyMutationInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    product_description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductUncheckedUpdateManyInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    product_category_id?: IntFieldUpdateOperationsInput | number
    product_description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductImgCreateInput = {
    image_url: string
    product: ProductCreateNestedOneWithoutProduct_imgInput
  }

  export type ProductImgUncheckedCreateInput = {
    image_id?: number
    image_url: string
    product_id: number
  }

  export type ProductImgUpdateInput = {
    image_url?: StringFieldUpdateOperationsInput | string
    product?: ProductUpdateOneRequiredWithoutProduct_imgNestedInput
  }

  export type ProductImgUncheckedUpdateInput = {
    image_id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    product_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProductImgCreateManyInput = {
    image_id?: number
    image_url: string
    product_id: number
  }

  export type ProductImgUpdateManyMutationInput = {
    image_url?: StringFieldUpdateOperationsInput | string
  }

  export type ProductImgUncheckedUpdateManyInput = {
    image_id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    product_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProductCategoryCreateInput = {
    product_category_name: string
    deletedAt?: Date | string | null
    product?: ProductCreateNestedManyWithoutProduct_categoryInput
  }

  export type ProductCategoryUncheckedCreateInput = {
    product_category_id?: number
    product_category_name: string
    deletedAt?: Date | string | null
    product?: ProductUncheckedCreateNestedManyWithoutProduct_categoryInput
  }

  export type ProductCategoryUpdateInput = {
    product_category_name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    product?: ProductUpdateManyWithoutProduct_categoryNestedInput
  }

  export type ProductCategoryUncheckedUpdateInput = {
    product_category_id?: IntFieldUpdateOperationsInput | number
    product_category_name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    product?: ProductUncheckedUpdateManyWithoutProduct_categoryNestedInput
  }

  export type ProductCategoryCreateManyInput = {
    product_category_id?: number
    product_category_name: string
    deletedAt?: Date | string | null
  }

  export type ProductCategoryUpdateManyMutationInput = {
    product_category_name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductCategoryUncheckedUpdateManyInput = {
    product_category_id?: IntFieldUpdateOperationsInput | number
    product_category_name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VoucherStoreCreateInput = {
    voucher_store_code: string
    voucher_store_amount_percentage: number
    voucher_store_exact_nominal: number
    voucher_store_minimum_buy: number
    voucher_store_maximum_nominal: number
    voucher_store_startdate: Date | string
    voucher_store_enddate: Date | string
    created_at: Date | string
    admin: AdminCreateNestedOneWithoutVoucher_storeInput
    store: StoreCreateNestedOneWithoutVoucher_storesInput
    profiles?: ProfileCreateNestedManyWithoutVoucher_storeInput
  }

  export type VoucherStoreUncheckedCreateInput = {
    voucher_store_id?: number
    voucher_store_code: string
    voucher_store_amount_percentage: number
    voucher_store_exact_nominal: number
    voucher_store_minimum_buy: number
    voucher_store_maximum_nominal: number
    voucher_store_startdate: Date | string
    voucher_store_enddate: Date | string
    created_at: Date | string
    admin_responsible: number
    store_id: number
    profiles?: ProfileUncheckedCreateNestedManyWithoutVoucher_storeInput
  }

  export type VoucherStoreUpdateInput = {
    voucher_store_code?: StringFieldUpdateOperationsInput | string
    voucher_store_amount_percentage?: IntFieldUpdateOperationsInput | number
    voucher_store_exact_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_minimum_buy?: IntFieldUpdateOperationsInput | number
    voucher_store_maximum_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_store_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUpdateOneRequiredWithoutVoucher_storeNestedInput
    store?: StoreUpdateOneRequiredWithoutVoucher_storesNestedInput
    profiles?: ProfileUpdateManyWithoutVoucher_storeNestedInput
  }

  export type VoucherStoreUncheckedUpdateInput = {
    voucher_store_id?: IntFieldUpdateOperationsInput | number
    voucher_store_code?: StringFieldUpdateOperationsInput | string
    voucher_store_amount_percentage?: IntFieldUpdateOperationsInput | number
    voucher_store_exact_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_minimum_buy?: IntFieldUpdateOperationsInput | number
    voucher_store_maximum_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_store_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin_responsible?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    profiles?: ProfileUncheckedUpdateManyWithoutVoucher_storeNestedInput
  }

  export type VoucherStoreCreateManyInput = {
    voucher_store_id?: number
    voucher_store_code: string
    voucher_store_amount_percentage: number
    voucher_store_exact_nominal: number
    voucher_store_minimum_buy: number
    voucher_store_maximum_nominal: number
    voucher_store_startdate: Date | string
    voucher_store_enddate: Date | string
    created_at: Date | string
    admin_responsible: number
    store_id: number
  }

  export type VoucherStoreUpdateManyMutationInput = {
    voucher_store_code?: StringFieldUpdateOperationsInput | string
    voucher_store_amount_percentage?: IntFieldUpdateOperationsInput | number
    voucher_store_exact_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_minimum_buy?: IntFieldUpdateOperationsInput | number
    voucher_store_maximum_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_store_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoucherStoreUncheckedUpdateManyInput = {
    voucher_store_id?: IntFieldUpdateOperationsInput | number
    voucher_store_code?: StringFieldUpdateOperationsInput | string
    voucher_store_amount_percentage?: IntFieldUpdateOperationsInput | number
    voucher_store_exact_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_minimum_buy?: IntFieldUpdateOperationsInput | number
    voucher_store_maximum_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_store_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin_responsible?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
  }

  export type VoucherOngkirCreateInput = {
    voucher_ongkir_code: string
    voucher_ongkir_nominal: number
    voucher_ongkir_startdate: Date | string
    voucher_ongkir_enddate: Date | string
    created_at: Date | string
    admin: AdminCreateNestedOneWithoutVoucher_ongkirInput
    store: StoreCreateNestedOneWithoutVoucher_ongkirInput
  }

  export type VoucherOngkirUncheckedCreateInput = {
    voucher_ongkir_id?: number
    voucher_ongkir_code: string
    voucher_ongkir_nominal: number
    voucher_ongkir_startdate: Date | string
    voucher_ongkir_enddate: Date | string
    created_at: Date | string
    admin_responsible: number
    store_id: number
  }

  export type VoucherOngkirUpdateInput = {
    voucher_ongkir_code?: StringFieldUpdateOperationsInput | string
    voucher_ongkir_nominal?: IntFieldUpdateOperationsInput | number
    voucher_ongkir_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_ongkir_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUpdateOneRequiredWithoutVoucher_ongkirNestedInput
    store?: StoreUpdateOneRequiredWithoutVoucher_ongkirNestedInput
  }

  export type VoucherOngkirUncheckedUpdateInput = {
    voucher_ongkir_id?: IntFieldUpdateOperationsInput | number
    voucher_ongkir_code?: StringFieldUpdateOperationsInput | string
    voucher_ongkir_nominal?: IntFieldUpdateOperationsInput | number
    voucher_ongkir_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_ongkir_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin_responsible?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
  }

  export type VoucherOngkirCreateManyInput = {
    voucher_ongkir_id?: number
    voucher_ongkir_code: string
    voucher_ongkir_nominal: number
    voucher_ongkir_startdate: Date | string
    voucher_ongkir_enddate: Date | string
    created_at: Date | string
    admin_responsible: number
    store_id: number
  }

  export type VoucherOngkirUpdateManyMutationInput = {
    voucher_ongkir_code?: StringFieldUpdateOperationsInput | string
    voucher_ongkir_nominal?: IntFieldUpdateOperationsInput | number
    voucher_ongkir_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_ongkir_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoucherOngkirUncheckedUpdateManyInput = {
    voucher_ongkir_id?: IntFieldUpdateOperationsInput | number
    voucher_ongkir_code?: StringFieldUpdateOperationsInput | string
    voucher_ongkir_nominal?: IntFieldUpdateOperationsInput | number
    voucher_ongkir_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_ongkir_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin_responsible?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
  }

  export type VoucherProductCreateInput = {
    voucher_product_code: string
    voucher_product_nominal: number
    voucher_product_startdate: Date | string
    voucher_product_enddate: Date | string
    created_at: Date | string
    admin: AdminCreateNestedOneWithoutVoucher_productInput
    product: ProductCreateNestedOneWithoutVoucherInput
  }

  export type VoucherProductUncheckedCreateInput = {
    voucher_product_id?: number
    voucher_product_code: string
    voucher_product_nominal: number
    voucher_product_startdate: Date | string
    voucher_product_enddate: Date | string
    created_at: Date | string
    admin_responsible: number
    product_id: number
  }

  export type VoucherProductUpdateInput = {
    voucher_product_code?: StringFieldUpdateOperationsInput | string
    voucher_product_nominal?: IntFieldUpdateOperationsInput | number
    voucher_product_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_product_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUpdateOneRequiredWithoutVoucher_productNestedInput
    product?: ProductUpdateOneRequiredWithoutVoucherNestedInput
  }

  export type VoucherProductUncheckedUpdateInput = {
    voucher_product_id?: IntFieldUpdateOperationsInput | number
    voucher_product_code?: StringFieldUpdateOperationsInput | string
    voucher_product_nominal?: IntFieldUpdateOperationsInput | number
    voucher_product_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_product_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin_responsible?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
  }

  export type VoucherProductCreateManyInput = {
    voucher_product_id?: number
    voucher_product_code: string
    voucher_product_nominal: number
    voucher_product_startdate: Date | string
    voucher_product_enddate: Date | string
    created_at: Date | string
    admin_responsible: number
    product_id: number
  }

  export type VoucherProductUpdateManyMutationInput = {
    voucher_product_code?: StringFieldUpdateOperationsInput | string
    voucher_product_nominal?: IntFieldUpdateOperationsInput | number
    voucher_product_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_product_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoucherProductUncheckedUpdateManyInput = {
    voucher_product_id?: IntFieldUpdateOperationsInput | number
    voucher_product_code?: StringFieldUpdateOperationsInput | string
    voucher_product_nominal?: IntFieldUpdateOperationsInput | number
    voucher_product_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_product_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin_responsible?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
  }

  export type DiscountCreateInput = {
    discount_product: string
    discount_amount: number
    created_at: Date | string
    discount_startdate: Date | string
    discount_enddate: Date | string
    isActive: boolean
    orders?: OrderCreateNestedManyWithoutDiscountInput
  }

  export type DiscountUncheckedCreateInput = {
    discount_id?: number
    discount_product: string
    discount_amount: number
    created_at: Date | string
    discount_startdate: Date | string
    discount_enddate: Date | string
    isActive: boolean
    orders?: OrderUncheckedCreateNestedManyWithoutDiscountInput
  }

  export type DiscountUpdateInput = {
    discount_product?: StringFieldUpdateOperationsInput | string
    discount_amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    discount_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    discount_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUpdateManyWithoutDiscountNestedInput
  }

  export type DiscountUncheckedUpdateInput = {
    discount_id?: IntFieldUpdateOperationsInput | number
    discount_product?: StringFieldUpdateOperationsInput | string
    discount_amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    discount_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    discount_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUncheckedUpdateManyWithoutDiscountNestedInput
  }

  export type DiscountCreateManyInput = {
    discount_id?: number
    discount_product: string
    discount_amount: number
    created_at: Date | string
    discount_startdate: Date | string
    discount_enddate: Date | string
    isActive: boolean
  }

  export type DiscountUpdateManyMutationInput = {
    discount_product?: StringFieldUpdateOperationsInput | string
    discount_amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    discount_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    discount_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DiscountUncheckedUpdateManyInput = {
    discount_id?: IntFieldUpdateOperationsInput | number
    discount_product?: StringFieldUpdateOperationsInput | string
    discount_amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    discount_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    discount_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CartCreateInput = {
    created_at: Date | string
    cart_items?: CartItemCreateNestedManyWithoutCartInput
    profile: ProfileCreateNestedOneWithoutCartInput
  }

  export type CartUncheckedCreateInput = {
    cart_id?: number
    created_at: Date | string
    profile_id: number
    cart_items?: CartItemUncheckedCreateNestedManyWithoutCartInput
  }

  export type CartUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cart_items?: CartItemUpdateManyWithoutCartNestedInput
    profile?: ProfileUpdateOneRequiredWithoutCartNestedInput
  }

  export type CartUncheckedUpdateInput = {
    cart_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_id?: IntFieldUpdateOperationsInput | number
    cart_items?: CartItemUncheckedUpdateManyWithoutCartNestedInput
  }

  export type CartCreateManyInput = {
    cart_id?: number
    created_at: Date | string
    profile_id: number
  }

  export type CartUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartUncheckedUpdateManyInput = {
    cart_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_id?: IntFieldUpdateOperationsInput | number
  }

  export type CartItemCreateInput = {
    quantity: number
    cart: CartCreateNestedOneWithoutCart_itemsInput
    product: ProductCreateNestedOneWithoutCart_itemsInput
  }

  export type CartItemUncheckedCreateInput = {
    cart_item_id?: number
    cart_id: number
    product_id: number
    quantity: number
  }

  export type CartItemUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    cart?: CartUpdateOneRequiredWithoutCart_itemsNestedInput
    product?: ProductUpdateOneRequiredWithoutCart_itemsNestedInput
  }

  export type CartItemUncheckedUpdateInput = {
    cart_item_id?: IntFieldUpdateOperationsInput | number
    cart_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type CartItemCreateManyInput = {
    cart_item_id?: number
    cart_id: number
    product_id: number
    quantity: number
  }

  export type CartItemUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type CartItemUncheckedUpdateManyInput = {
    cart_item_id?: IntFieldUpdateOperationsInput | number
    cart_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type OrderCreateInput = {
    order_number?: string | null
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    status: $Enums.OrderStatus
    order_date: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    address: AddressCreateNestedOneWithoutOrdersInput
    profile: ProfileCreateNestedOneWithoutOrdersInput
    store: StoreCreateNestedOneWithoutOrdersInput
    discount?: DiscountCreateNestedOneWithoutOrdersInput
    order_cancel?: OrderCancelCreateNestedOneWithoutOrderInput
    admin_orders?: AdminOrderCreateNestedManyWithoutOrderInput
    order_items?: OrderItemCreateNestedManyWithoutOrderInput
    payment_proof?: PaymentProofCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    order_id?: number
    order_number?: string | null
    store_id: number
    address_id: number
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    discount_id?: number | null
    status: $Enums.OrderStatus
    order_date: Date | string
    profile_id: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    order_cancel?: OrderCancelUncheckedCreateNestedOneWithoutOrderInput
    admin_orders?: AdminOrderUncheckedCreateNestedManyWithoutOrderInput
    order_items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    payment_proof?: PaymentProofUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderUpdateInput = {
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: AddressUpdateOneRequiredWithoutOrdersNestedInput
    profile?: ProfileUpdateOneRequiredWithoutOrdersNestedInput
    store?: StoreUpdateOneRequiredWithoutOrdersNestedInput
    discount?: DiscountUpdateOneWithoutOrdersNestedInput
    order_cancel?: OrderCancelUpdateOneWithoutOrderNestedInput
    admin_orders?: AdminOrderUpdateManyWithoutOrderNestedInput
    order_items?: OrderItemUpdateManyWithoutOrderNestedInput
    payment_proof?: PaymentProofUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    store_id?: IntFieldUpdateOperationsInput | number
    address_id?: IntFieldUpdateOperationsInput | number
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    discount_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_id?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_cancel?: OrderCancelUncheckedUpdateOneWithoutOrderNestedInput
    admin_orders?: AdminOrderUncheckedUpdateManyWithoutOrderNestedInput
    order_items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    payment_proof?: PaymentProofUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    order_id?: number
    order_number?: string | null
    store_id: number
    address_id: number
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    discount_id?: number | null
    status: $Enums.OrderStatus
    order_date: Date | string
    profile_id: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type OrderUpdateManyMutationInput = {
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderUncheckedUpdateManyInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    store_id?: IntFieldUpdateOperationsInput | number
    address_id?: IntFieldUpdateOperationsInput | number
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    discount_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_id?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderItemCreateInput = {
    quantity: number
    price: number
    subtotal: number
    order: OrderCreateNestedOneWithoutOrder_itemsInput
    product: ProductCreateNestedOneWithoutOrder_itemsInput
  }

  export type OrderItemUncheckedCreateInput = {
    order_item_id?: number
    order_id: number
    product_id: number
    quantity: number
    price: number
    subtotal: number
  }

  export type OrderItemUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    subtotal?: IntFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutOrder_itemsNestedInput
    product?: ProductUpdateOneRequiredWithoutOrder_itemsNestedInput
  }

  export type OrderItemUncheckedUpdateInput = {
    order_item_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    subtotal?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemCreateManyInput = {
    order_item_id?: number
    order_id: number
    product_id: number
    quantity: number
    price: number
    subtotal: number
  }

  export type OrderItemUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    subtotal?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemUncheckedUpdateManyInput = {
    order_item_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    subtotal?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentProofCreateInput = {
    image_url: string
    uploaded_at: Date | string
    status: $Enums.PaymentStatus
    order: OrderCreateNestedOneWithoutPayment_proofInput
  }

  export type PaymentProofUncheckedCreateInput = {
    payment_proof_id?: number
    order_id: number
    image_url: string
    uploaded_at: Date | string
    status: $Enums.PaymentStatus
  }

  export type PaymentProofUpdateInput = {
    image_url?: StringFieldUpdateOperationsInput | string
    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    order?: OrderUpdateOneRequiredWithoutPayment_proofNestedInput
  }

  export type PaymentProofUncheckedUpdateInput = {
    payment_proof_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type PaymentProofCreateManyInput = {
    payment_proof_id?: number
    order_id: number
    image_url: string
    uploaded_at: Date | string
    status: $Enums.PaymentStatus
  }

  export type PaymentProofUpdateManyMutationInput = {
    image_url?: StringFieldUpdateOperationsInput | string
    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type PaymentProofUncheckedUpdateManyInput = {
    payment_proof_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type OrderCancelCreateInput = {
    reason: string
    canceled_at: Date | string
    order: OrderCreateNestedOneWithoutOrder_cancelInput
  }

  export type OrderCancelUncheckedCreateInput = {
    order_cancel_id?: number
    order_id: number
    reason: string
    canceled_at: Date | string
  }

  export type OrderCancelUpdateInput = {
    reason?: StringFieldUpdateOperationsInput | string
    canceled_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutOrder_cancelNestedInput
  }

  export type OrderCancelUncheckedUpdateInput = {
    order_cancel_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    canceled_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCancelCreateManyInput = {
    order_cancel_id?: number
    order_id: number
    reason: string
    canceled_at: Date | string
  }

  export type OrderCancelUpdateManyMutationInput = {
    reason?: StringFieldUpdateOperationsInput | string
    canceled_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCancelUncheckedUpdateManyInput = {
    order_cancel_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    canceled_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminOrderCreateInput = {
    action: $Enums.ActionEnum
    action_time: Date | string
    admin: AdminCreateNestedOneWithoutAdmin_ordersInput
    order: OrderCreateNestedOneWithoutAdmin_ordersInput
  }

  export type AdminOrderUncheckedCreateInput = {
    admin_order_id?: number
    admin_id: number
    order_id: number
    action: $Enums.ActionEnum
    action_time: Date | string
  }

  export type AdminOrderUpdateInput = {
    action?: EnumActionEnumFieldUpdateOperationsInput | $Enums.ActionEnum
    action_time?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUpdateOneRequiredWithoutAdmin_ordersNestedInput
    order?: OrderUpdateOneRequiredWithoutAdmin_ordersNestedInput
  }

  export type AdminOrderUncheckedUpdateInput = {
    admin_order_id?: IntFieldUpdateOperationsInput | number
    admin_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    action?: EnumActionEnumFieldUpdateOperationsInput | $Enums.ActionEnum
    action_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminOrderCreateManyInput = {
    admin_order_id?: number
    admin_id: number
    order_id: number
    action: $Enums.ActionEnum
    action_time: Date | string
  }

  export type AdminOrderUpdateManyMutationInput = {
    action?: EnumActionEnumFieldUpdateOperationsInput | $Enums.ActionEnum
    action_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminOrderUncheckedUpdateManyInput = {
    admin_order_id?: IntFieldUpdateOperationsInput | number
    admin_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    action?: EnumActionEnumFieldUpdateOperationsInput | $Enums.ActionEnum
    action_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type ProfileNullableScalarRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type AdminNullableScalarRelationFilter = {
    is?: AdminWhereInput | null
    isNot?: AdminWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    role?: SortOrder
    updateAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    role?: SortOrder
    updateAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    role?: SortOrder
    updateAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    userId?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    userId?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    userId?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type CartListRelationFilter = {
    every?: CartWhereInput
    some?: CartWhereInput
    none?: CartWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type VoucherStoreListRelationFilter = {
    every?: VoucherStoreWhereInput
    some?: VoucherStoreWhereInput
    none?: VoucherStoreWhereInput
  }

  export type AddressListRelationFilter = {
    every?: AddressWhereInput
    some?: AddressWhereInput
    none?: AddressWhereInput
  }

  export type ReferralNullableScalarRelationFilter = {
    is?: ReferralWhereInput | null
    isNot?: ReferralWhereInput | null
  }

  export type CartOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VoucherStoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AddressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfileCountOrderByAggregateInput = {
    profile_id?: SortOrder
    user_id?: SortOrder
    phone?: SortOrder
    pfp_url?: SortOrder
    referred_id?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    profile_id?: SortOrder
    referred_id?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    profile_id?: SortOrder
    user_id?: SortOrder
    phone?: SortOrder
    pfp_url?: SortOrder
    referred_id?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    profile_id?: SortOrder
    user_id?: SortOrder
    phone?: SortOrder
    pfp_url?: SortOrder
    referred_id?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    profile_id?: SortOrder
    referred_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ProfileListRelationFilter = {
    every?: ProfileWhereInput
    some?: ProfileWhereInput
    none?: ProfileWhereInput
  }

  export type ProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReferralCountOrderByAggregateInput = {
    referral_id?: SortOrder
    referral_code?: SortOrder
    profile_id?: SortOrder
  }

  export type ReferralAvgOrderByAggregateInput = {
    referral_id?: SortOrder
    profile_id?: SortOrder
  }

  export type ReferralMaxOrderByAggregateInput = {
    referral_id?: SortOrder
    referral_code?: SortOrder
    profile_id?: SortOrder
  }

  export type ReferralMinOrderByAggregateInput = {
    referral_id?: SortOrder
    referral_code?: SortOrder
    profile_id?: SortOrder
  }

  export type ReferralSumOrderByAggregateInput = {
    referral_id?: SortOrder
    profile_id?: SortOrder
  }

  export type ProfileScalarRelationFilter = {
    is?: ProfileWhereInput
    isNot?: ProfileWhereInput
  }

  export type AddressCountOrderByAggregateInput = {
    address_id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    country?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    post_code?: SortOrder
    address_name?: SortOrder
    address_contact?: SortOrder
    profile_id?: SortOrder
    deleted_at?: SortOrder
  }

  export type AddressAvgOrderByAggregateInput = {
    address_id?: SortOrder
    profile_id?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    address_id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    country?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    post_code?: SortOrder
    address_name?: SortOrder
    address_contact?: SortOrder
    profile_id?: SortOrder
    deleted_at?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    address_id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    country?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    post_code?: SortOrder
    address_name?: SortOrder
    address_contact?: SortOrder
    profile_id?: SortOrder
    deleted_at?: SortOrder
  }

  export type AddressSumOrderByAggregateInput = {
    address_id?: SortOrder
    profile_id?: SortOrder
  }

  export type StoreScalarRelationFilter = {
    is?: StoreWhereInput
    isNot?: StoreWhereInput
  }

  export type AdminOrderListRelationFilter = {
    every?: AdminOrderWhereInput
    some?: AdminOrderWhereInput
    none?: AdminOrderWhereInput
  }

  export type VoucherOngkirListRelationFilter = {
    every?: VoucherOngkirWhereInput
    some?: VoucherOngkirWhereInput
    none?: VoucherOngkirWhereInput
  }

  export type VoucherProductListRelationFilter = {
    every?: VoucherProductWhereInput
    some?: VoucherProductWhereInput
    none?: VoucherProductWhereInput
  }

  export type AdminOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VoucherOngkirOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VoucherProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminCountOrderByAggregateInput = {
    admin_id?: SortOrder
    user_id?: SortOrder
    store_id?: SortOrder
    phone?: SortOrder
    position?: SortOrder
    deleted_at?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    admin_id?: SortOrder
    store_id?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    admin_id?: SortOrder
    user_id?: SortOrder
    store_id?: SortOrder
    phone?: SortOrder
    position?: SortOrder
    deleted_at?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    admin_id?: SortOrder
    user_id?: SortOrder
    store_id?: SortOrder
    phone?: SortOrder
    position?: SortOrder
    deleted_at?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    admin_id?: SortOrder
    store_id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AdminListRelationFilter = {
    every?: AdminWhereInput
    some?: AdminWhereInput
    none?: AdminWhereInput
  }

  export type StockListRelationFilter = {
    every?: StockWhereInput
    some?: StockWhereInput
    none?: StockWhereInput
  }

  export type StockJournalListRelationFilter = {
    every?: StockJournalWhereInput
    some?: StockJournalWhereInput
    none?: StockJournalWhereInput
  }

  export type VoucherOngkirNullableScalarRelationFilter = {
    is?: VoucherOngkirWhereInput | null
    isNot?: VoucherOngkirWhereInput | null
  }

  export type AdminOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StockOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StockJournalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StoreCountOrderByAggregateInput = {
    store_id?: SortOrder
    store_name?: SortOrder
    store_address?: SortOrder
    country?: SortOrder
    city?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    isActive?: SortOrder
  }

  export type StoreAvgOrderByAggregateInput = {
    store_id?: SortOrder
  }

  export type StoreMaxOrderByAggregateInput = {
    store_id?: SortOrder
    store_name?: SortOrder
    store_address?: SortOrder
    country?: SortOrder
    city?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    isActive?: SortOrder
  }

  export type StoreMinOrderByAggregateInput = {
    store_id?: SortOrder
    store_name?: SortOrder
    store_address?: SortOrder
    country?: SortOrder
    city?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    isActive?: SortOrder
  }

  export type StoreSumOrderByAggregateInput = {
    store_id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ProductScalarRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type StockCountOrderByAggregateInput = {
    stock_id?: SortOrder
    store_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
  }

  export type StockAvgOrderByAggregateInput = {
    stock_id?: SortOrder
    store_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
  }

  export type StockMaxOrderByAggregateInput = {
    stock_id?: SortOrder
    store_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
  }

  export type StockMinOrderByAggregateInput = {
    stock_id?: SortOrder
    store_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
  }

  export type StockSumOrderByAggregateInput = {
    stock_id?: SortOrder
    store_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
  }

  export type StockScalarRelationFilter = {
    is?: StockWhereInput
    isNot?: StockWhereInput
  }

  export type StockJournalCountOrderByAggregateInput = {
    stock_journal_id?: SortOrder
    store_id?: SortOrder
    stock_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
  }

  export type StockJournalAvgOrderByAggregateInput = {
    stock_journal_id?: SortOrder
    store_id?: SortOrder
    stock_id?: SortOrder
    quantity?: SortOrder
  }

  export type StockJournalMaxOrderByAggregateInput = {
    stock_journal_id?: SortOrder
    store_id?: SortOrder
    stock_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
  }

  export type StockJournalMinOrderByAggregateInput = {
    stock_journal_id?: SortOrder
    store_id?: SortOrder
    stock_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    created_at?: SortOrder
  }

  export type StockJournalSumOrderByAggregateInput = {
    stock_journal_id?: SortOrder
    store_id?: SortOrder
    stock_id?: SortOrder
    quantity?: SortOrder
  }

  export type CartItemListRelationFilter = {
    every?: CartItemWhereInput
    some?: CartItemWhereInput
    none?: CartItemWhereInput
  }

  export type OrderItemListRelationFilter = {
    every?: OrderItemWhereInput
    some?: OrderItemWhereInput
    none?: OrderItemWhereInput
  }

  export type ProductCategoryScalarRelationFilter = {
    is?: ProductCategoryWhereInput
    isNot?: ProductCategoryWhereInput
  }

  export type ProductImgListRelationFilter = {
    every?: ProductImgWhereInput
    some?: ProductImgWhereInput
    none?: ProductImgWhereInput
  }

  export type StockNullableScalarRelationFilter = {
    is?: StockWhereInput | null
    isNot?: StockWhereInput | null
  }

  export type CartItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductImgOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    product_id?: SortOrder
    product_name?: SortOrder
    product_price?: SortOrder
    product_category_id?: SortOrder
    product_description?: SortOrder
    deletedAt?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    product_id?: SortOrder
    product_price?: SortOrder
    product_category_id?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    product_id?: SortOrder
    product_name?: SortOrder
    product_price?: SortOrder
    product_category_id?: SortOrder
    product_description?: SortOrder
    deletedAt?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    product_id?: SortOrder
    product_name?: SortOrder
    product_price?: SortOrder
    product_category_id?: SortOrder
    product_description?: SortOrder
    deletedAt?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    product_id?: SortOrder
    product_price?: SortOrder
    product_category_id?: SortOrder
  }

  export type ProductImgCountOrderByAggregateInput = {
    image_id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
  }

  export type ProductImgAvgOrderByAggregateInput = {
    image_id?: SortOrder
    product_id?: SortOrder
  }

  export type ProductImgMaxOrderByAggregateInput = {
    image_id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
  }

  export type ProductImgMinOrderByAggregateInput = {
    image_id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
  }

  export type ProductImgSumOrderByAggregateInput = {
    image_id?: SortOrder
    product_id?: SortOrder
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCategoryCountOrderByAggregateInput = {
    product_category_id?: SortOrder
    product_category_name?: SortOrder
    deletedAt?: SortOrder
  }

  export type ProductCategoryAvgOrderByAggregateInput = {
    product_category_id?: SortOrder
  }

  export type ProductCategoryMaxOrderByAggregateInput = {
    product_category_id?: SortOrder
    product_category_name?: SortOrder
    deletedAt?: SortOrder
  }

  export type ProductCategoryMinOrderByAggregateInput = {
    product_category_id?: SortOrder
    product_category_name?: SortOrder
    deletedAt?: SortOrder
  }

  export type ProductCategorySumOrderByAggregateInput = {
    product_category_id?: SortOrder
  }

  export type AdminScalarRelationFilter = {
    is?: AdminWhereInput
    isNot?: AdminWhereInput
  }

  export type VoucherStoreCountOrderByAggregateInput = {
    voucher_store_id?: SortOrder
    voucher_store_code?: SortOrder
    voucher_store_amount_percentage?: SortOrder
    voucher_store_exact_nominal?: SortOrder
    voucher_store_minimum_buy?: SortOrder
    voucher_store_maximum_nominal?: SortOrder
    voucher_store_startdate?: SortOrder
    voucher_store_enddate?: SortOrder
    created_at?: SortOrder
    admin_responsible?: SortOrder
    store_id?: SortOrder
  }

  export type VoucherStoreAvgOrderByAggregateInput = {
    voucher_store_id?: SortOrder
    voucher_store_amount_percentage?: SortOrder
    voucher_store_exact_nominal?: SortOrder
    voucher_store_minimum_buy?: SortOrder
    voucher_store_maximum_nominal?: SortOrder
    admin_responsible?: SortOrder
    store_id?: SortOrder
  }

  export type VoucherStoreMaxOrderByAggregateInput = {
    voucher_store_id?: SortOrder
    voucher_store_code?: SortOrder
    voucher_store_amount_percentage?: SortOrder
    voucher_store_exact_nominal?: SortOrder
    voucher_store_minimum_buy?: SortOrder
    voucher_store_maximum_nominal?: SortOrder
    voucher_store_startdate?: SortOrder
    voucher_store_enddate?: SortOrder
    created_at?: SortOrder
    admin_responsible?: SortOrder
    store_id?: SortOrder
  }

  export type VoucherStoreMinOrderByAggregateInput = {
    voucher_store_id?: SortOrder
    voucher_store_code?: SortOrder
    voucher_store_amount_percentage?: SortOrder
    voucher_store_exact_nominal?: SortOrder
    voucher_store_minimum_buy?: SortOrder
    voucher_store_maximum_nominal?: SortOrder
    voucher_store_startdate?: SortOrder
    voucher_store_enddate?: SortOrder
    created_at?: SortOrder
    admin_responsible?: SortOrder
    store_id?: SortOrder
  }

  export type VoucherStoreSumOrderByAggregateInput = {
    voucher_store_id?: SortOrder
    voucher_store_amount_percentage?: SortOrder
    voucher_store_exact_nominal?: SortOrder
    voucher_store_minimum_buy?: SortOrder
    voucher_store_maximum_nominal?: SortOrder
    admin_responsible?: SortOrder
    store_id?: SortOrder
  }

  export type VoucherOngkirCountOrderByAggregateInput = {
    voucher_ongkir_id?: SortOrder
    voucher_ongkir_code?: SortOrder
    voucher_ongkir_nominal?: SortOrder
    voucher_ongkir_startdate?: SortOrder
    voucher_ongkir_enddate?: SortOrder
    created_at?: SortOrder
    admin_responsible?: SortOrder
    store_id?: SortOrder
  }

  export type VoucherOngkirAvgOrderByAggregateInput = {
    voucher_ongkir_id?: SortOrder
    voucher_ongkir_nominal?: SortOrder
    admin_responsible?: SortOrder
    store_id?: SortOrder
  }

  export type VoucherOngkirMaxOrderByAggregateInput = {
    voucher_ongkir_id?: SortOrder
    voucher_ongkir_code?: SortOrder
    voucher_ongkir_nominal?: SortOrder
    voucher_ongkir_startdate?: SortOrder
    voucher_ongkir_enddate?: SortOrder
    created_at?: SortOrder
    admin_responsible?: SortOrder
    store_id?: SortOrder
  }

  export type VoucherOngkirMinOrderByAggregateInput = {
    voucher_ongkir_id?: SortOrder
    voucher_ongkir_code?: SortOrder
    voucher_ongkir_nominal?: SortOrder
    voucher_ongkir_startdate?: SortOrder
    voucher_ongkir_enddate?: SortOrder
    created_at?: SortOrder
    admin_responsible?: SortOrder
    store_id?: SortOrder
  }

  export type VoucherOngkirSumOrderByAggregateInput = {
    voucher_ongkir_id?: SortOrder
    voucher_ongkir_nominal?: SortOrder
    admin_responsible?: SortOrder
    store_id?: SortOrder
  }

  export type VoucherProductCountOrderByAggregateInput = {
    voucher_product_id?: SortOrder
    voucher_product_code?: SortOrder
    voucher_product_nominal?: SortOrder
    voucher_product_startdate?: SortOrder
    voucher_product_enddate?: SortOrder
    created_at?: SortOrder
    admin_responsible?: SortOrder
    product_id?: SortOrder
  }

  export type VoucherProductAvgOrderByAggregateInput = {
    voucher_product_id?: SortOrder
    voucher_product_nominal?: SortOrder
    admin_responsible?: SortOrder
    product_id?: SortOrder
  }

  export type VoucherProductMaxOrderByAggregateInput = {
    voucher_product_id?: SortOrder
    voucher_product_code?: SortOrder
    voucher_product_nominal?: SortOrder
    voucher_product_startdate?: SortOrder
    voucher_product_enddate?: SortOrder
    created_at?: SortOrder
    admin_responsible?: SortOrder
    product_id?: SortOrder
  }

  export type VoucherProductMinOrderByAggregateInput = {
    voucher_product_id?: SortOrder
    voucher_product_code?: SortOrder
    voucher_product_nominal?: SortOrder
    voucher_product_startdate?: SortOrder
    voucher_product_enddate?: SortOrder
    created_at?: SortOrder
    admin_responsible?: SortOrder
    product_id?: SortOrder
  }

  export type VoucherProductSumOrderByAggregateInput = {
    voucher_product_id?: SortOrder
    voucher_product_nominal?: SortOrder
    admin_responsible?: SortOrder
    product_id?: SortOrder
  }

  export type DiscountCountOrderByAggregateInput = {
    discount_id?: SortOrder
    discount_product?: SortOrder
    discount_amount?: SortOrder
    created_at?: SortOrder
    discount_startdate?: SortOrder
    discount_enddate?: SortOrder
    isActive?: SortOrder
  }

  export type DiscountAvgOrderByAggregateInput = {
    discount_id?: SortOrder
    discount_amount?: SortOrder
  }

  export type DiscountMaxOrderByAggregateInput = {
    discount_id?: SortOrder
    discount_product?: SortOrder
    discount_amount?: SortOrder
    created_at?: SortOrder
    discount_startdate?: SortOrder
    discount_enddate?: SortOrder
    isActive?: SortOrder
  }

  export type DiscountMinOrderByAggregateInput = {
    discount_id?: SortOrder
    discount_product?: SortOrder
    discount_amount?: SortOrder
    created_at?: SortOrder
    discount_startdate?: SortOrder
    discount_enddate?: SortOrder
    isActive?: SortOrder
  }

  export type DiscountSumOrderByAggregateInput = {
    discount_id?: SortOrder
    discount_amount?: SortOrder
  }

  export type CartCountOrderByAggregateInput = {
    cart_id?: SortOrder
    created_at?: SortOrder
    profile_id?: SortOrder
  }

  export type CartAvgOrderByAggregateInput = {
    cart_id?: SortOrder
    profile_id?: SortOrder
  }

  export type CartMaxOrderByAggregateInput = {
    cart_id?: SortOrder
    created_at?: SortOrder
    profile_id?: SortOrder
  }

  export type CartMinOrderByAggregateInput = {
    cart_id?: SortOrder
    created_at?: SortOrder
    profile_id?: SortOrder
  }

  export type CartSumOrderByAggregateInput = {
    cart_id?: SortOrder
    profile_id?: SortOrder
  }

  export type CartScalarRelationFilter = {
    is?: CartWhereInput
    isNot?: CartWhereInput
  }

  export type CartItemCountOrderByAggregateInput = {
    cart_item_id?: SortOrder
    cart_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
  }

  export type CartItemAvgOrderByAggregateInput = {
    cart_item_id?: SortOrder
    cart_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
  }

  export type CartItemMaxOrderByAggregateInput = {
    cart_item_id?: SortOrder
    cart_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
  }

  export type CartItemMinOrderByAggregateInput = {
    cart_item_id?: SortOrder
    cart_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
  }

  export type CartItemSumOrderByAggregateInput = {
    cart_item_id?: SortOrder
    cart_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
  }

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type AddressScalarRelationFilter = {
    is?: AddressWhereInput
    isNot?: AddressWhereInput
  }

  export type DiscountNullableScalarRelationFilter = {
    is?: DiscountWhereInput | null
    isNot?: DiscountWhereInput | null
  }

  export type OrderCancelNullableScalarRelationFilter = {
    is?: OrderCancelWhereInput | null
    isNot?: OrderCancelWhereInput | null
  }

  export type PaymentProofNullableScalarRelationFilter = {
    is?: PaymentProofWhereInput | null
    isNot?: PaymentProofWhereInput | null
  }

  export type OrderCountOrderByAggregateInput = {
    order_id?: SortOrder
    order_number?: SortOrder
    store_id?: SortOrder
    address_id?: SortOrder
    total_price?: SortOrder
    shipping_price?: SortOrder
    total_payment?: SortOrder
    tracking_number?: SortOrder
    discount_id?: SortOrder
    status?: SortOrder
    order_date?: SortOrder
    profile_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    order_id?: SortOrder
    store_id?: SortOrder
    address_id?: SortOrder
    total_price?: SortOrder
    shipping_price?: SortOrder
    total_payment?: SortOrder
    discount_id?: SortOrder
    profile_id?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    order_id?: SortOrder
    order_number?: SortOrder
    store_id?: SortOrder
    address_id?: SortOrder
    total_price?: SortOrder
    shipping_price?: SortOrder
    total_payment?: SortOrder
    tracking_number?: SortOrder
    discount_id?: SortOrder
    status?: SortOrder
    order_date?: SortOrder
    profile_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    order_id?: SortOrder
    order_number?: SortOrder
    store_id?: SortOrder
    address_id?: SortOrder
    total_price?: SortOrder
    shipping_price?: SortOrder
    total_payment?: SortOrder
    tracking_number?: SortOrder
    discount_id?: SortOrder
    status?: SortOrder
    order_date?: SortOrder
    profile_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    order_id?: SortOrder
    store_id?: SortOrder
    address_id?: SortOrder
    total_price?: SortOrder
    shipping_price?: SortOrder
    total_payment?: SortOrder
    discount_id?: SortOrder
    profile_id?: SortOrder
  }

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type OrderScalarRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type OrderItemCountOrderByAggregateInput = {
    order_item_id?: SortOrder
    order_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    subtotal?: SortOrder
  }

  export type OrderItemAvgOrderByAggregateInput = {
    order_item_id?: SortOrder
    order_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    subtotal?: SortOrder
  }

  export type OrderItemMaxOrderByAggregateInput = {
    order_item_id?: SortOrder
    order_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    subtotal?: SortOrder
  }

  export type OrderItemMinOrderByAggregateInput = {
    order_item_id?: SortOrder
    order_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    subtotal?: SortOrder
  }

  export type OrderItemSumOrderByAggregateInput = {
    order_item_id?: SortOrder
    order_id?: SortOrder
    product_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    subtotal?: SortOrder
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type PaymentProofCountOrderByAggregateInput = {
    payment_proof_id?: SortOrder
    order_id?: SortOrder
    image_url?: SortOrder
    uploaded_at?: SortOrder
    status?: SortOrder
  }

  export type PaymentProofAvgOrderByAggregateInput = {
    payment_proof_id?: SortOrder
    order_id?: SortOrder
  }

  export type PaymentProofMaxOrderByAggregateInput = {
    payment_proof_id?: SortOrder
    order_id?: SortOrder
    image_url?: SortOrder
    uploaded_at?: SortOrder
    status?: SortOrder
  }

  export type PaymentProofMinOrderByAggregateInput = {
    payment_proof_id?: SortOrder
    order_id?: SortOrder
    image_url?: SortOrder
    uploaded_at?: SortOrder
    status?: SortOrder
  }

  export type PaymentProofSumOrderByAggregateInput = {
    payment_proof_id?: SortOrder
    order_id?: SortOrder
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type OrderCancelCountOrderByAggregateInput = {
    order_cancel_id?: SortOrder
    order_id?: SortOrder
    reason?: SortOrder
    canceled_at?: SortOrder
  }

  export type OrderCancelAvgOrderByAggregateInput = {
    order_cancel_id?: SortOrder
    order_id?: SortOrder
  }

  export type OrderCancelMaxOrderByAggregateInput = {
    order_cancel_id?: SortOrder
    order_id?: SortOrder
    reason?: SortOrder
    canceled_at?: SortOrder
  }

  export type OrderCancelMinOrderByAggregateInput = {
    order_cancel_id?: SortOrder
    order_id?: SortOrder
    reason?: SortOrder
    canceled_at?: SortOrder
  }

  export type OrderCancelSumOrderByAggregateInput = {
    order_cancel_id?: SortOrder
    order_id?: SortOrder
  }

  export type EnumActionEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionEnum | EnumActionEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ActionEnum[] | ListEnumActionEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActionEnum[] | ListEnumActionEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumActionEnumFilter<$PrismaModel> | $Enums.ActionEnum
  }

  export type AdminOrderCountOrderByAggregateInput = {
    admin_order_id?: SortOrder
    admin_id?: SortOrder
    order_id?: SortOrder
    action?: SortOrder
    action_time?: SortOrder
  }

  export type AdminOrderAvgOrderByAggregateInput = {
    admin_order_id?: SortOrder
    admin_id?: SortOrder
    order_id?: SortOrder
  }

  export type AdminOrderMaxOrderByAggregateInput = {
    admin_order_id?: SortOrder
    admin_id?: SortOrder
    order_id?: SortOrder
    action?: SortOrder
    action_time?: SortOrder
  }

  export type AdminOrderMinOrderByAggregateInput = {
    admin_order_id?: SortOrder
    admin_id?: SortOrder
    order_id?: SortOrder
    action?: SortOrder
    action_time?: SortOrder
  }

  export type AdminOrderSumOrderByAggregateInput = {
    admin_order_id?: SortOrder
    admin_id?: SortOrder
    order_id?: SortOrder
  }

  export type EnumActionEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionEnum | EnumActionEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ActionEnum[] | ListEnumActionEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActionEnum[] | ListEnumActionEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumActionEnumWithAggregatesFilter<$PrismaModel> | $Enums.ActionEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActionEnumFilter<$PrismaModel>
    _max?: NestedEnumActionEnumFilter<$PrismaModel>
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type ProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type AdminCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    connect?: AdminWhereUniqueInput
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type AdminUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    connect?: AdminWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type ProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type AdminUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    upsert?: AdminUpsertWithoutUserInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutUserInput, AdminUpdateWithoutUserInput>, AdminUncheckedUpdateWithoutUserInput>
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type AdminUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    upsert?: AdminUpsertWithoutUserInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutUserInput, AdminUpdateWithoutUserInput>, AdminUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type CartCreateNestedManyWithoutProfileInput = {
    create?: XOR<CartCreateWithoutProfileInput, CartUncheckedCreateWithoutProfileInput> | CartCreateWithoutProfileInput[] | CartUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: CartCreateOrConnectWithoutProfileInput | CartCreateOrConnectWithoutProfileInput[]
    createMany?: CartCreateManyProfileInputEnvelope
    connect?: CartWhereUniqueInput | CartWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutProfileInput = {
    create?: XOR<OrderCreateWithoutProfileInput, OrderUncheckedCreateWithoutProfileInput> | OrderCreateWithoutProfileInput[] | OrderUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutProfileInput | OrderCreateOrConnectWithoutProfileInput[]
    createMany?: OrderCreateManyProfileInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type VoucherStoreCreateNestedManyWithoutProfilesInput = {
    create?: XOR<VoucherStoreCreateWithoutProfilesInput, VoucherStoreUncheckedCreateWithoutProfilesInput> | VoucherStoreCreateWithoutProfilesInput[] | VoucherStoreUncheckedCreateWithoutProfilesInput[]
    connectOrCreate?: VoucherStoreCreateOrConnectWithoutProfilesInput | VoucherStoreCreateOrConnectWithoutProfilesInput[]
    connect?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
  }

  export type AddressCreateNestedManyWithoutProfileInput = {
    create?: XOR<AddressCreateWithoutProfileInput, AddressUncheckedCreateWithoutProfileInput> | AddressCreateWithoutProfileInput[] | AddressUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutProfileInput | AddressCreateOrConnectWithoutProfileInput[]
    createMany?: AddressCreateManyProfileInputEnvelope
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
  }

  export type ReferralCreateNestedOneWithoutProfileInput = {
    create?: XOR<ReferralCreateWithoutProfileInput, ReferralUncheckedCreateWithoutProfileInput>
    connectOrCreate?: ReferralCreateOrConnectWithoutProfileInput
    connect?: ReferralWhereUniqueInput
  }

  export type ReferralCreateNestedOneWithoutReferredInput = {
    create?: XOR<ReferralCreateWithoutReferredInput, ReferralUncheckedCreateWithoutReferredInput>
    connectOrCreate?: ReferralCreateOrConnectWithoutReferredInput
    connect?: ReferralWhereUniqueInput
  }

  export type CartUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<CartCreateWithoutProfileInput, CartUncheckedCreateWithoutProfileInput> | CartCreateWithoutProfileInput[] | CartUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: CartCreateOrConnectWithoutProfileInput | CartCreateOrConnectWithoutProfileInput[]
    createMany?: CartCreateManyProfileInputEnvelope
    connect?: CartWhereUniqueInput | CartWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<OrderCreateWithoutProfileInput, OrderUncheckedCreateWithoutProfileInput> | OrderCreateWithoutProfileInput[] | OrderUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutProfileInput | OrderCreateOrConnectWithoutProfileInput[]
    createMany?: OrderCreateManyProfileInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type VoucherStoreUncheckedCreateNestedManyWithoutProfilesInput = {
    create?: XOR<VoucherStoreCreateWithoutProfilesInput, VoucherStoreUncheckedCreateWithoutProfilesInput> | VoucherStoreCreateWithoutProfilesInput[] | VoucherStoreUncheckedCreateWithoutProfilesInput[]
    connectOrCreate?: VoucherStoreCreateOrConnectWithoutProfilesInput | VoucherStoreCreateOrConnectWithoutProfilesInput[]
    connect?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
  }

  export type AddressUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<AddressCreateWithoutProfileInput, AddressUncheckedCreateWithoutProfileInput> | AddressCreateWithoutProfileInput[] | AddressUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutProfileInput | AddressCreateOrConnectWithoutProfileInput[]
    createMany?: AddressCreateManyProfileInputEnvelope
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
  }

  export type ReferralUncheckedCreateNestedOneWithoutProfileInput = {
    create?: XOR<ReferralCreateWithoutProfileInput, ReferralUncheckedCreateWithoutProfileInput>
    connectOrCreate?: ReferralCreateOrConnectWithoutProfileInput
    connect?: ReferralWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type CartUpdateManyWithoutProfileNestedInput = {
    create?: XOR<CartCreateWithoutProfileInput, CartUncheckedCreateWithoutProfileInput> | CartCreateWithoutProfileInput[] | CartUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: CartCreateOrConnectWithoutProfileInput | CartCreateOrConnectWithoutProfileInput[]
    upsert?: CartUpsertWithWhereUniqueWithoutProfileInput | CartUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: CartCreateManyProfileInputEnvelope
    set?: CartWhereUniqueInput | CartWhereUniqueInput[]
    disconnect?: CartWhereUniqueInput | CartWhereUniqueInput[]
    delete?: CartWhereUniqueInput | CartWhereUniqueInput[]
    connect?: CartWhereUniqueInput | CartWhereUniqueInput[]
    update?: CartUpdateWithWhereUniqueWithoutProfileInput | CartUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: CartUpdateManyWithWhereWithoutProfileInput | CartUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: CartScalarWhereInput | CartScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutProfileNestedInput = {
    create?: XOR<OrderCreateWithoutProfileInput, OrderUncheckedCreateWithoutProfileInput> | OrderCreateWithoutProfileInput[] | OrderUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutProfileInput | OrderCreateOrConnectWithoutProfileInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutProfileInput | OrderUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: OrderCreateManyProfileInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutProfileInput | OrderUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutProfileInput | OrderUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type VoucherStoreUpdateManyWithoutProfilesNestedInput = {
    create?: XOR<VoucherStoreCreateWithoutProfilesInput, VoucherStoreUncheckedCreateWithoutProfilesInput> | VoucherStoreCreateWithoutProfilesInput[] | VoucherStoreUncheckedCreateWithoutProfilesInput[]
    connectOrCreate?: VoucherStoreCreateOrConnectWithoutProfilesInput | VoucherStoreCreateOrConnectWithoutProfilesInput[]
    upsert?: VoucherStoreUpsertWithWhereUniqueWithoutProfilesInput | VoucherStoreUpsertWithWhereUniqueWithoutProfilesInput[]
    set?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    disconnect?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    delete?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    connect?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    update?: VoucherStoreUpdateWithWhereUniqueWithoutProfilesInput | VoucherStoreUpdateWithWhereUniqueWithoutProfilesInput[]
    updateMany?: VoucherStoreUpdateManyWithWhereWithoutProfilesInput | VoucherStoreUpdateManyWithWhereWithoutProfilesInput[]
    deleteMany?: VoucherStoreScalarWhereInput | VoucherStoreScalarWhereInput[]
  }

  export type AddressUpdateManyWithoutProfileNestedInput = {
    create?: XOR<AddressCreateWithoutProfileInput, AddressUncheckedCreateWithoutProfileInput> | AddressCreateWithoutProfileInput[] | AddressUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutProfileInput | AddressCreateOrConnectWithoutProfileInput[]
    upsert?: AddressUpsertWithWhereUniqueWithoutProfileInput | AddressUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: AddressCreateManyProfileInputEnvelope
    set?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    disconnect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    delete?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    update?: AddressUpdateWithWhereUniqueWithoutProfileInput | AddressUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: AddressUpdateManyWithWhereWithoutProfileInput | AddressUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: AddressScalarWhereInput | AddressScalarWhereInput[]
  }

  export type ReferralUpdateOneWithoutProfileNestedInput = {
    create?: XOR<ReferralCreateWithoutProfileInput, ReferralUncheckedCreateWithoutProfileInput>
    connectOrCreate?: ReferralCreateOrConnectWithoutProfileInput
    upsert?: ReferralUpsertWithoutProfileInput
    disconnect?: ReferralWhereInput | boolean
    delete?: ReferralWhereInput | boolean
    connect?: ReferralWhereUniqueInput
    update?: XOR<XOR<ReferralUpdateToOneWithWhereWithoutProfileInput, ReferralUpdateWithoutProfileInput>, ReferralUncheckedUpdateWithoutProfileInput>
  }

  export type ReferralUpdateOneWithoutReferredNestedInput = {
    create?: XOR<ReferralCreateWithoutReferredInput, ReferralUncheckedCreateWithoutReferredInput>
    connectOrCreate?: ReferralCreateOrConnectWithoutReferredInput
    upsert?: ReferralUpsertWithoutReferredInput
    disconnect?: ReferralWhereInput | boolean
    delete?: ReferralWhereInput | boolean
    connect?: ReferralWhereUniqueInput
    update?: XOR<XOR<ReferralUpdateToOneWithWhereWithoutReferredInput, ReferralUpdateWithoutReferredInput>, ReferralUncheckedUpdateWithoutReferredInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CartUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<CartCreateWithoutProfileInput, CartUncheckedCreateWithoutProfileInput> | CartCreateWithoutProfileInput[] | CartUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: CartCreateOrConnectWithoutProfileInput | CartCreateOrConnectWithoutProfileInput[]
    upsert?: CartUpsertWithWhereUniqueWithoutProfileInput | CartUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: CartCreateManyProfileInputEnvelope
    set?: CartWhereUniqueInput | CartWhereUniqueInput[]
    disconnect?: CartWhereUniqueInput | CartWhereUniqueInput[]
    delete?: CartWhereUniqueInput | CartWhereUniqueInput[]
    connect?: CartWhereUniqueInput | CartWhereUniqueInput[]
    update?: CartUpdateWithWhereUniqueWithoutProfileInput | CartUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: CartUpdateManyWithWhereWithoutProfileInput | CartUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: CartScalarWhereInput | CartScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<OrderCreateWithoutProfileInput, OrderUncheckedCreateWithoutProfileInput> | OrderCreateWithoutProfileInput[] | OrderUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutProfileInput | OrderCreateOrConnectWithoutProfileInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutProfileInput | OrderUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: OrderCreateManyProfileInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutProfileInput | OrderUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutProfileInput | OrderUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type VoucherStoreUncheckedUpdateManyWithoutProfilesNestedInput = {
    create?: XOR<VoucherStoreCreateWithoutProfilesInput, VoucherStoreUncheckedCreateWithoutProfilesInput> | VoucherStoreCreateWithoutProfilesInput[] | VoucherStoreUncheckedCreateWithoutProfilesInput[]
    connectOrCreate?: VoucherStoreCreateOrConnectWithoutProfilesInput | VoucherStoreCreateOrConnectWithoutProfilesInput[]
    upsert?: VoucherStoreUpsertWithWhereUniqueWithoutProfilesInput | VoucherStoreUpsertWithWhereUniqueWithoutProfilesInput[]
    set?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    disconnect?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    delete?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    connect?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    update?: VoucherStoreUpdateWithWhereUniqueWithoutProfilesInput | VoucherStoreUpdateWithWhereUniqueWithoutProfilesInput[]
    updateMany?: VoucherStoreUpdateManyWithWhereWithoutProfilesInput | VoucherStoreUpdateManyWithWhereWithoutProfilesInput[]
    deleteMany?: VoucherStoreScalarWhereInput | VoucherStoreScalarWhereInput[]
  }

  export type AddressUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<AddressCreateWithoutProfileInput, AddressUncheckedCreateWithoutProfileInput> | AddressCreateWithoutProfileInput[] | AddressUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutProfileInput | AddressCreateOrConnectWithoutProfileInput[]
    upsert?: AddressUpsertWithWhereUniqueWithoutProfileInput | AddressUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: AddressCreateManyProfileInputEnvelope
    set?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    disconnect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    delete?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    update?: AddressUpdateWithWhereUniqueWithoutProfileInput | AddressUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: AddressUpdateManyWithWhereWithoutProfileInput | AddressUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: AddressScalarWhereInput | AddressScalarWhereInput[]
  }

  export type ReferralUncheckedUpdateOneWithoutProfileNestedInput = {
    create?: XOR<ReferralCreateWithoutProfileInput, ReferralUncheckedCreateWithoutProfileInput>
    connectOrCreate?: ReferralCreateOrConnectWithoutProfileInput
    upsert?: ReferralUpsertWithoutProfileInput
    disconnect?: ReferralWhereInput | boolean
    delete?: ReferralWhereInput | boolean
    connect?: ReferralWhereUniqueInput
    update?: XOR<XOR<ReferralUpdateToOneWithWhereWithoutProfileInput, ReferralUpdateWithoutProfileInput>, ReferralUncheckedUpdateWithoutProfileInput>
  }

  export type ProfileCreateNestedOneWithoutReferralInput = {
    create?: XOR<ProfileCreateWithoutReferralInput, ProfileUncheckedCreateWithoutReferralInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutReferralInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileCreateNestedManyWithoutReferredInput = {
    create?: XOR<ProfileCreateWithoutReferredInput, ProfileUncheckedCreateWithoutReferredInput> | ProfileCreateWithoutReferredInput[] | ProfileUncheckedCreateWithoutReferredInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutReferredInput | ProfileCreateOrConnectWithoutReferredInput[]
    createMany?: ProfileCreateManyReferredInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedManyWithoutReferredInput = {
    create?: XOR<ProfileCreateWithoutReferredInput, ProfileUncheckedCreateWithoutReferredInput> | ProfileCreateWithoutReferredInput[] | ProfileUncheckedCreateWithoutReferredInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutReferredInput | ProfileCreateOrConnectWithoutReferredInput[]
    createMany?: ProfileCreateManyReferredInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type ProfileUpdateOneWithoutReferralNestedInput = {
    create?: XOR<ProfileCreateWithoutReferralInput, ProfileUncheckedCreateWithoutReferralInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutReferralInput
    upsert?: ProfileUpsertWithoutReferralInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutReferralInput, ProfileUpdateWithoutReferralInput>, ProfileUncheckedUpdateWithoutReferralInput>
  }

  export type ProfileUpdateManyWithoutReferredNestedInput = {
    create?: XOR<ProfileCreateWithoutReferredInput, ProfileUncheckedCreateWithoutReferredInput> | ProfileCreateWithoutReferredInput[] | ProfileUncheckedCreateWithoutReferredInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutReferredInput | ProfileCreateOrConnectWithoutReferredInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutReferredInput | ProfileUpsertWithWhereUniqueWithoutReferredInput[]
    createMany?: ProfileCreateManyReferredInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutReferredInput | ProfileUpdateWithWhereUniqueWithoutReferredInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutReferredInput | ProfileUpdateManyWithWhereWithoutReferredInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateManyWithoutReferredNestedInput = {
    create?: XOR<ProfileCreateWithoutReferredInput, ProfileUncheckedCreateWithoutReferredInput> | ProfileCreateWithoutReferredInput[] | ProfileUncheckedCreateWithoutReferredInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutReferredInput | ProfileCreateOrConnectWithoutReferredInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutReferredInput | ProfileUpsertWithWhereUniqueWithoutReferredInput[]
    createMany?: ProfileCreateManyReferredInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutReferredInput | ProfileUpdateWithWhereUniqueWithoutReferredInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutReferredInput | ProfileUpdateManyWithWhereWithoutReferredInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type OrderCreateNestedManyWithoutAddressInput = {
    create?: XOR<OrderCreateWithoutAddressInput, OrderUncheckedCreateWithoutAddressInput> | OrderCreateWithoutAddressInput[] | OrderUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutAddressInput | OrderCreateOrConnectWithoutAddressInput[]
    createMany?: OrderCreateManyAddressInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ProfileCreateNestedOneWithoutAddressInput = {
    create?: XOR<ProfileCreateWithoutAddressInput, ProfileUncheckedCreateWithoutAddressInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutAddressInput
    connect?: ProfileWhereUniqueInput
  }

  export type OrderUncheckedCreateNestedManyWithoutAddressInput = {
    create?: XOR<OrderCreateWithoutAddressInput, OrderUncheckedCreateWithoutAddressInput> | OrderCreateWithoutAddressInput[] | OrderUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutAddressInput | OrderCreateOrConnectWithoutAddressInput[]
    createMany?: OrderCreateManyAddressInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUpdateManyWithoutAddressNestedInput = {
    create?: XOR<OrderCreateWithoutAddressInput, OrderUncheckedCreateWithoutAddressInput> | OrderCreateWithoutAddressInput[] | OrderUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutAddressInput | OrderCreateOrConnectWithoutAddressInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutAddressInput | OrderUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: OrderCreateManyAddressInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutAddressInput | OrderUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutAddressInput | OrderUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ProfileUpdateOneRequiredWithoutAddressNestedInput = {
    create?: XOR<ProfileCreateWithoutAddressInput, ProfileUncheckedCreateWithoutAddressInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutAddressInput
    upsert?: ProfileUpsertWithoutAddressInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutAddressInput, ProfileUpdateWithoutAddressInput>, ProfileUncheckedUpdateWithoutAddressInput>
  }

  export type OrderUncheckedUpdateManyWithoutAddressNestedInput = {
    create?: XOR<OrderCreateWithoutAddressInput, OrderUncheckedCreateWithoutAddressInput> | OrderCreateWithoutAddressInput[] | OrderUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutAddressInput | OrderCreateOrConnectWithoutAddressInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutAddressInput | OrderUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: OrderCreateManyAddressInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutAddressInput | OrderUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutAddressInput | OrderUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAdminInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput
    connect?: UserWhereUniqueInput
  }

  export type StoreCreateNestedOneWithoutAdminInput = {
    create?: XOR<StoreCreateWithoutAdminInput, StoreUncheckedCreateWithoutAdminInput>
    connectOrCreate?: StoreCreateOrConnectWithoutAdminInput
    connect?: StoreWhereUniqueInput
  }

  export type AdminOrderCreateNestedManyWithoutAdminInput = {
    create?: XOR<AdminOrderCreateWithoutAdminInput, AdminOrderUncheckedCreateWithoutAdminInput> | AdminOrderCreateWithoutAdminInput[] | AdminOrderUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AdminOrderCreateOrConnectWithoutAdminInput | AdminOrderCreateOrConnectWithoutAdminInput[]
    createMany?: AdminOrderCreateManyAdminInputEnvelope
    connect?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
  }

  export type VoucherOngkirCreateNestedManyWithoutAdminInput = {
    create?: XOR<VoucherOngkirCreateWithoutAdminInput, VoucherOngkirUncheckedCreateWithoutAdminInput> | VoucherOngkirCreateWithoutAdminInput[] | VoucherOngkirUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: VoucherOngkirCreateOrConnectWithoutAdminInput | VoucherOngkirCreateOrConnectWithoutAdminInput[]
    createMany?: VoucherOngkirCreateManyAdminInputEnvelope
    connect?: VoucherOngkirWhereUniqueInput | VoucherOngkirWhereUniqueInput[]
  }

  export type VoucherProductCreateNestedManyWithoutAdminInput = {
    create?: XOR<VoucherProductCreateWithoutAdminInput, VoucherProductUncheckedCreateWithoutAdminInput> | VoucherProductCreateWithoutAdminInput[] | VoucherProductUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: VoucherProductCreateOrConnectWithoutAdminInput | VoucherProductCreateOrConnectWithoutAdminInput[]
    createMany?: VoucherProductCreateManyAdminInputEnvelope
    connect?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
  }

  export type VoucherStoreCreateNestedManyWithoutAdminInput = {
    create?: XOR<VoucherStoreCreateWithoutAdminInput, VoucherStoreUncheckedCreateWithoutAdminInput> | VoucherStoreCreateWithoutAdminInput[] | VoucherStoreUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: VoucherStoreCreateOrConnectWithoutAdminInput | VoucherStoreCreateOrConnectWithoutAdminInput[]
    createMany?: VoucherStoreCreateManyAdminInputEnvelope
    connect?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
  }

  export type AdminOrderUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<AdminOrderCreateWithoutAdminInput, AdminOrderUncheckedCreateWithoutAdminInput> | AdminOrderCreateWithoutAdminInput[] | AdminOrderUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AdminOrderCreateOrConnectWithoutAdminInput | AdminOrderCreateOrConnectWithoutAdminInput[]
    createMany?: AdminOrderCreateManyAdminInputEnvelope
    connect?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
  }

  export type VoucherOngkirUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<VoucherOngkirCreateWithoutAdminInput, VoucherOngkirUncheckedCreateWithoutAdminInput> | VoucherOngkirCreateWithoutAdminInput[] | VoucherOngkirUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: VoucherOngkirCreateOrConnectWithoutAdminInput | VoucherOngkirCreateOrConnectWithoutAdminInput[]
    createMany?: VoucherOngkirCreateManyAdminInputEnvelope
    connect?: VoucherOngkirWhereUniqueInput | VoucherOngkirWhereUniqueInput[]
  }

  export type VoucherProductUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<VoucherProductCreateWithoutAdminInput, VoucherProductUncheckedCreateWithoutAdminInput> | VoucherProductCreateWithoutAdminInput[] | VoucherProductUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: VoucherProductCreateOrConnectWithoutAdminInput | VoucherProductCreateOrConnectWithoutAdminInput[]
    createMany?: VoucherProductCreateManyAdminInputEnvelope
    connect?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
  }

  export type VoucherStoreUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<VoucherStoreCreateWithoutAdminInput, VoucherStoreUncheckedCreateWithoutAdminInput> | VoucherStoreCreateWithoutAdminInput[] | VoucherStoreUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: VoucherStoreCreateOrConnectWithoutAdminInput | VoucherStoreCreateOrConnectWithoutAdminInput[]
    createMany?: VoucherStoreCreateManyAdminInputEnvelope
    connect?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutAdminNestedInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput
    upsert?: UserUpsertWithoutAdminInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminInput, UserUpdateWithoutAdminInput>, UserUncheckedUpdateWithoutAdminInput>
  }

  export type StoreUpdateOneRequiredWithoutAdminNestedInput = {
    create?: XOR<StoreCreateWithoutAdminInput, StoreUncheckedCreateWithoutAdminInput>
    connectOrCreate?: StoreCreateOrConnectWithoutAdminInput
    upsert?: StoreUpsertWithoutAdminInput
    connect?: StoreWhereUniqueInput
    update?: XOR<XOR<StoreUpdateToOneWithWhereWithoutAdminInput, StoreUpdateWithoutAdminInput>, StoreUncheckedUpdateWithoutAdminInput>
  }

  export type AdminOrderUpdateManyWithoutAdminNestedInput = {
    create?: XOR<AdminOrderCreateWithoutAdminInput, AdminOrderUncheckedCreateWithoutAdminInput> | AdminOrderCreateWithoutAdminInput[] | AdminOrderUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AdminOrderCreateOrConnectWithoutAdminInput | AdminOrderCreateOrConnectWithoutAdminInput[]
    upsert?: AdminOrderUpsertWithWhereUniqueWithoutAdminInput | AdminOrderUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: AdminOrderCreateManyAdminInputEnvelope
    set?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
    disconnect?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
    delete?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
    connect?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
    update?: AdminOrderUpdateWithWhereUniqueWithoutAdminInput | AdminOrderUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: AdminOrderUpdateManyWithWhereWithoutAdminInput | AdminOrderUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: AdminOrderScalarWhereInput | AdminOrderScalarWhereInput[]
  }

  export type VoucherOngkirUpdateManyWithoutAdminNestedInput = {
    create?: XOR<VoucherOngkirCreateWithoutAdminInput, VoucherOngkirUncheckedCreateWithoutAdminInput> | VoucherOngkirCreateWithoutAdminInput[] | VoucherOngkirUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: VoucherOngkirCreateOrConnectWithoutAdminInput | VoucherOngkirCreateOrConnectWithoutAdminInput[]
    upsert?: VoucherOngkirUpsertWithWhereUniqueWithoutAdminInput | VoucherOngkirUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: VoucherOngkirCreateManyAdminInputEnvelope
    set?: VoucherOngkirWhereUniqueInput | VoucherOngkirWhereUniqueInput[]
    disconnect?: VoucherOngkirWhereUniqueInput | VoucherOngkirWhereUniqueInput[]
    delete?: VoucherOngkirWhereUniqueInput | VoucherOngkirWhereUniqueInput[]
    connect?: VoucherOngkirWhereUniqueInput | VoucherOngkirWhereUniqueInput[]
    update?: VoucherOngkirUpdateWithWhereUniqueWithoutAdminInput | VoucherOngkirUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: VoucherOngkirUpdateManyWithWhereWithoutAdminInput | VoucherOngkirUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: VoucherOngkirScalarWhereInput | VoucherOngkirScalarWhereInput[]
  }

  export type VoucherProductUpdateManyWithoutAdminNestedInput = {
    create?: XOR<VoucherProductCreateWithoutAdminInput, VoucherProductUncheckedCreateWithoutAdminInput> | VoucherProductCreateWithoutAdminInput[] | VoucherProductUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: VoucherProductCreateOrConnectWithoutAdminInput | VoucherProductCreateOrConnectWithoutAdminInput[]
    upsert?: VoucherProductUpsertWithWhereUniqueWithoutAdminInput | VoucherProductUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: VoucherProductCreateManyAdminInputEnvelope
    set?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
    disconnect?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
    delete?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
    connect?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
    update?: VoucherProductUpdateWithWhereUniqueWithoutAdminInput | VoucherProductUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: VoucherProductUpdateManyWithWhereWithoutAdminInput | VoucherProductUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: VoucherProductScalarWhereInput | VoucherProductScalarWhereInput[]
  }

  export type VoucherStoreUpdateManyWithoutAdminNestedInput = {
    create?: XOR<VoucherStoreCreateWithoutAdminInput, VoucherStoreUncheckedCreateWithoutAdminInput> | VoucherStoreCreateWithoutAdminInput[] | VoucherStoreUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: VoucherStoreCreateOrConnectWithoutAdminInput | VoucherStoreCreateOrConnectWithoutAdminInput[]
    upsert?: VoucherStoreUpsertWithWhereUniqueWithoutAdminInput | VoucherStoreUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: VoucherStoreCreateManyAdminInputEnvelope
    set?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    disconnect?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    delete?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    connect?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    update?: VoucherStoreUpdateWithWhereUniqueWithoutAdminInput | VoucherStoreUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: VoucherStoreUpdateManyWithWhereWithoutAdminInput | VoucherStoreUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: VoucherStoreScalarWhereInput | VoucherStoreScalarWhereInput[]
  }

  export type AdminOrderUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<AdminOrderCreateWithoutAdminInput, AdminOrderUncheckedCreateWithoutAdminInput> | AdminOrderCreateWithoutAdminInput[] | AdminOrderUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AdminOrderCreateOrConnectWithoutAdminInput | AdminOrderCreateOrConnectWithoutAdminInput[]
    upsert?: AdminOrderUpsertWithWhereUniqueWithoutAdminInput | AdminOrderUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: AdminOrderCreateManyAdminInputEnvelope
    set?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
    disconnect?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
    delete?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
    connect?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
    update?: AdminOrderUpdateWithWhereUniqueWithoutAdminInput | AdminOrderUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: AdminOrderUpdateManyWithWhereWithoutAdminInput | AdminOrderUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: AdminOrderScalarWhereInput | AdminOrderScalarWhereInput[]
  }

  export type VoucherOngkirUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<VoucherOngkirCreateWithoutAdminInput, VoucherOngkirUncheckedCreateWithoutAdminInput> | VoucherOngkirCreateWithoutAdminInput[] | VoucherOngkirUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: VoucherOngkirCreateOrConnectWithoutAdminInput | VoucherOngkirCreateOrConnectWithoutAdminInput[]
    upsert?: VoucherOngkirUpsertWithWhereUniqueWithoutAdminInput | VoucherOngkirUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: VoucherOngkirCreateManyAdminInputEnvelope
    set?: VoucherOngkirWhereUniqueInput | VoucherOngkirWhereUniqueInput[]
    disconnect?: VoucherOngkirWhereUniqueInput | VoucherOngkirWhereUniqueInput[]
    delete?: VoucherOngkirWhereUniqueInput | VoucherOngkirWhereUniqueInput[]
    connect?: VoucherOngkirWhereUniqueInput | VoucherOngkirWhereUniqueInput[]
    update?: VoucherOngkirUpdateWithWhereUniqueWithoutAdminInput | VoucherOngkirUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: VoucherOngkirUpdateManyWithWhereWithoutAdminInput | VoucherOngkirUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: VoucherOngkirScalarWhereInput | VoucherOngkirScalarWhereInput[]
  }

  export type VoucherProductUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<VoucherProductCreateWithoutAdminInput, VoucherProductUncheckedCreateWithoutAdminInput> | VoucherProductCreateWithoutAdminInput[] | VoucherProductUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: VoucherProductCreateOrConnectWithoutAdminInput | VoucherProductCreateOrConnectWithoutAdminInput[]
    upsert?: VoucherProductUpsertWithWhereUniqueWithoutAdminInput | VoucherProductUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: VoucherProductCreateManyAdminInputEnvelope
    set?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
    disconnect?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
    delete?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
    connect?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
    update?: VoucherProductUpdateWithWhereUniqueWithoutAdminInput | VoucherProductUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: VoucherProductUpdateManyWithWhereWithoutAdminInput | VoucherProductUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: VoucherProductScalarWhereInput | VoucherProductScalarWhereInput[]
  }

  export type VoucherStoreUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<VoucherStoreCreateWithoutAdminInput, VoucherStoreUncheckedCreateWithoutAdminInput> | VoucherStoreCreateWithoutAdminInput[] | VoucherStoreUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: VoucherStoreCreateOrConnectWithoutAdminInput | VoucherStoreCreateOrConnectWithoutAdminInput[]
    upsert?: VoucherStoreUpsertWithWhereUniqueWithoutAdminInput | VoucherStoreUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: VoucherStoreCreateManyAdminInputEnvelope
    set?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    disconnect?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    delete?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    connect?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    update?: VoucherStoreUpdateWithWhereUniqueWithoutAdminInput | VoucherStoreUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: VoucherStoreUpdateManyWithWhereWithoutAdminInput | VoucherStoreUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: VoucherStoreScalarWhereInput | VoucherStoreScalarWhereInput[]
  }

  export type OrderCreateNestedManyWithoutStoreInput = {
    create?: XOR<OrderCreateWithoutStoreInput, OrderUncheckedCreateWithoutStoreInput> | OrderCreateWithoutStoreInput[] | OrderUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutStoreInput | OrderCreateOrConnectWithoutStoreInput[]
    createMany?: OrderCreateManyStoreInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type AdminCreateNestedManyWithoutStoreInput = {
    create?: XOR<AdminCreateWithoutStoreInput, AdminUncheckedCreateWithoutStoreInput> | AdminCreateWithoutStoreInput[] | AdminUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutStoreInput | AdminCreateOrConnectWithoutStoreInput[]
    createMany?: AdminCreateManyStoreInputEnvelope
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
  }

  export type StockCreateNestedManyWithoutStoreInput = {
    create?: XOR<StockCreateWithoutStoreInput, StockUncheckedCreateWithoutStoreInput> | StockCreateWithoutStoreInput[] | StockUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: StockCreateOrConnectWithoutStoreInput | StockCreateOrConnectWithoutStoreInput[]
    createMany?: StockCreateManyStoreInputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type StockJournalCreateNestedManyWithoutStoreInput = {
    create?: XOR<StockJournalCreateWithoutStoreInput, StockJournalUncheckedCreateWithoutStoreInput> | StockJournalCreateWithoutStoreInput[] | StockJournalUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: StockJournalCreateOrConnectWithoutStoreInput | StockJournalCreateOrConnectWithoutStoreInput[]
    createMany?: StockJournalCreateManyStoreInputEnvelope
    connect?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
  }

  export type VoucherOngkirCreateNestedOneWithoutStoreInput = {
    create?: XOR<VoucherOngkirCreateWithoutStoreInput, VoucherOngkirUncheckedCreateWithoutStoreInput>
    connectOrCreate?: VoucherOngkirCreateOrConnectWithoutStoreInput
    connect?: VoucherOngkirWhereUniqueInput
  }

  export type VoucherStoreCreateNestedManyWithoutStoreInput = {
    create?: XOR<VoucherStoreCreateWithoutStoreInput, VoucherStoreUncheckedCreateWithoutStoreInput> | VoucherStoreCreateWithoutStoreInput[] | VoucherStoreUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: VoucherStoreCreateOrConnectWithoutStoreInput | VoucherStoreCreateOrConnectWithoutStoreInput[]
    createMany?: VoucherStoreCreateManyStoreInputEnvelope
    connect?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<OrderCreateWithoutStoreInput, OrderUncheckedCreateWithoutStoreInput> | OrderCreateWithoutStoreInput[] | OrderUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutStoreInput | OrderCreateOrConnectWithoutStoreInput[]
    createMany?: OrderCreateManyStoreInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type AdminUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<AdminCreateWithoutStoreInput, AdminUncheckedCreateWithoutStoreInput> | AdminCreateWithoutStoreInput[] | AdminUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutStoreInput | AdminCreateOrConnectWithoutStoreInput[]
    createMany?: AdminCreateManyStoreInputEnvelope
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
  }

  export type StockUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<StockCreateWithoutStoreInput, StockUncheckedCreateWithoutStoreInput> | StockCreateWithoutStoreInput[] | StockUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: StockCreateOrConnectWithoutStoreInput | StockCreateOrConnectWithoutStoreInput[]
    createMany?: StockCreateManyStoreInputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type StockJournalUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<StockJournalCreateWithoutStoreInput, StockJournalUncheckedCreateWithoutStoreInput> | StockJournalCreateWithoutStoreInput[] | StockJournalUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: StockJournalCreateOrConnectWithoutStoreInput | StockJournalCreateOrConnectWithoutStoreInput[]
    createMany?: StockJournalCreateManyStoreInputEnvelope
    connect?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
  }

  export type VoucherOngkirUncheckedCreateNestedOneWithoutStoreInput = {
    create?: XOR<VoucherOngkirCreateWithoutStoreInput, VoucherOngkirUncheckedCreateWithoutStoreInput>
    connectOrCreate?: VoucherOngkirCreateOrConnectWithoutStoreInput
    connect?: VoucherOngkirWhereUniqueInput
  }

  export type VoucherStoreUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<VoucherStoreCreateWithoutStoreInput, VoucherStoreUncheckedCreateWithoutStoreInput> | VoucherStoreCreateWithoutStoreInput[] | VoucherStoreUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: VoucherStoreCreateOrConnectWithoutStoreInput | VoucherStoreCreateOrConnectWithoutStoreInput[]
    createMany?: VoucherStoreCreateManyStoreInputEnvelope
    connect?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type OrderUpdateManyWithoutStoreNestedInput = {
    create?: XOR<OrderCreateWithoutStoreInput, OrderUncheckedCreateWithoutStoreInput> | OrderCreateWithoutStoreInput[] | OrderUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutStoreInput | OrderCreateOrConnectWithoutStoreInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutStoreInput | OrderUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: OrderCreateManyStoreInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutStoreInput | OrderUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutStoreInput | OrderUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type AdminUpdateManyWithoutStoreNestedInput = {
    create?: XOR<AdminCreateWithoutStoreInput, AdminUncheckedCreateWithoutStoreInput> | AdminCreateWithoutStoreInput[] | AdminUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutStoreInput | AdminCreateOrConnectWithoutStoreInput[]
    upsert?: AdminUpsertWithWhereUniqueWithoutStoreInput | AdminUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: AdminCreateManyStoreInputEnvelope
    set?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    disconnect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    delete?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    update?: AdminUpdateWithWhereUniqueWithoutStoreInput | AdminUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: AdminUpdateManyWithWhereWithoutStoreInput | AdminUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: AdminScalarWhereInput | AdminScalarWhereInput[]
  }

  export type StockUpdateManyWithoutStoreNestedInput = {
    create?: XOR<StockCreateWithoutStoreInput, StockUncheckedCreateWithoutStoreInput> | StockCreateWithoutStoreInput[] | StockUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: StockCreateOrConnectWithoutStoreInput | StockCreateOrConnectWithoutStoreInput[]
    upsert?: StockUpsertWithWhereUniqueWithoutStoreInput | StockUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: StockCreateManyStoreInputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutStoreInput | StockUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: StockUpdateManyWithWhereWithoutStoreInput | StockUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type StockJournalUpdateManyWithoutStoreNestedInput = {
    create?: XOR<StockJournalCreateWithoutStoreInput, StockJournalUncheckedCreateWithoutStoreInput> | StockJournalCreateWithoutStoreInput[] | StockJournalUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: StockJournalCreateOrConnectWithoutStoreInput | StockJournalCreateOrConnectWithoutStoreInput[]
    upsert?: StockJournalUpsertWithWhereUniqueWithoutStoreInput | StockJournalUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: StockJournalCreateManyStoreInputEnvelope
    set?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
    disconnect?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
    delete?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
    connect?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
    update?: StockJournalUpdateWithWhereUniqueWithoutStoreInput | StockJournalUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: StockJournalUpdateManyWithWhereWithoutStoreInput | StockJournalUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: StockJournalScalarWhereInput | StockJournalScalarWhereInput[]
  }

  export type VoucherOngkirUpdateOneWithoutStoreNestedInput = {
    create?: XOR<VoucherOngkirCreateWithoutStoreInput, VoucherOngkirUncheckedCreateWithoutStoreInput>
    connectOrCreate?: VoucherOngkirCreateOrConnectWithoutStoreInput
    upsert?: VoucherOngkirUpsertWithoutStoreInput
    disconnect?: VoucherOngkirWhereInput | boolean
    delete?: VoucherOngkirWhereInput | boolean
    connect?: VoucherOngkirWhereUniqueInput
    update?: XOR<XOR<VoucherOngkirUpdateToOneWithWhereWithoutStoreInput, VoucherOngkirUpdateWithoutStoreInput>, VoucherOngkirUncheckedUpdateWithoutStoreInput>
  }

  export type VoucherStoreUpdateManyWithoutStoreNestedInput = {
    create?: XOR<VoucherStoreCreateWithoutStoreInput, VoucherStoreUncheckedCreateWithoutStoreInput> | VoucherStoreCreateWithoutStoreInput[] | VoucherStoreUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: VoucherStoreCreateOrConnectWithoutStoreInput | VoucherStoreCreateOrConnectWithoutStoreInput[]
    upsert?: VoucherStoreUpsertWithWhereUniqueWithoutStoreInput | VoucherStoreUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: VoucherStoreCreateManyStoreInputEnvelope
    set?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    disconnect?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    delete?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    connect?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    update?: VoucherStoreUpdateWithWhereUniqueWithoutStoreInput | VoucherStoreUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: VoucherStoreUpdateManyWithWhereWithoutStoreInput | VoucherStoreUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: VoucherStoreScalarWhereInput | VoucherStoreScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<OrderCreateWithoutStoreInput, OrderUncheckedCreateWithoutStoreInput> | OrderCreateWithoutStoreInput[] | OrderUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutStoreInput | OrderCreateOrConnectWithoutStoreInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutStoreInput | OrderUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: OrderCreateManyStoreInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutStoreInput | OrderUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutStoreInput | OrderUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type AdminUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<AdminCreateWithoutStoreInput, AdminUncheckedCreateWithoutStoreInput> | AdminCreateWithoutStoreInput[] | AdminUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutStoreInput | AdminCreateOrConnectWithoutStoreInput[]
    upsert?: AdminUpsertWithWhereUniqueWithoutStoreInput | AdminUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: AdminCreateManyStoreInputEnvelope
    set?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    disconnect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    delete?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    update?: AdminUpdateWithWhereUniqueWithoutStoreInput | AdminUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: AdminUpdateManyWithWhereWithoutStoreInput | AdminUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: AdminScalarWhereInput | AdminScalarWhereInput[]
  }

  export type StockUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<StockCreateWithoutStoreInput, StockUncheckedCreateWithoutStoreInput> | StockCreateWithoutStoreInput[] | StockUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: StockCreateOrConnectWithoutStoreInput | StockCreateOrConnectWithoutStoreInput[]
    upsert?: StockUpsertWithWhereUniqueWithoutStoreInput | StockUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: StockCreateManyStoreInputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutStoreInput | StockUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: StockUpdateManyWithWhereWithoutStoreInput | StockUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type StockJournalUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<StockJournalCreateWithoutStoreInput, StockJournalUncheckedCreateWithoutStoreInput> | StockJournalCreateWithoutStoreInput[] | StockJournalUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: StockJournalCreateOrConnectWithoutStoreInput | StockJournalCreateOrConnectWithoutStoreInput[]
    upsert?: StockJournalUpsertWithWhereUniqueWithoutStoreInput | StockJournalUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: StockJournalCreateManyStoreInputEnvelope
    set?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
    disconnect?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
    delete?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
    connect?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
    update?: StockJournalUpdateWithWhereUniqueWithoutStoreInput | StockJournalUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: StockJournalUpdateManyWithWhereWithoutStoreInput | StockJournalUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: StockJournalScalarWhereInput | StockJournalScalarWhereInput[]
  }

  export type VoucherOngkirUncheckedUpdateOneWithoutStoreNestedInput = {
    create?: XOR<VoucherOngkirCreateWithoutStoreInput, VoucherOngkirUncheckedCreateWithoutStoreInput>
    connectOrCreate?: VoucherOngkirCreateOrConnectWithoutStoreInput
    upsert?: VoucherOngkirUpsertWithoutStoreInput
    disconnect?: VoucherOngkirWhereInput | boolean
    delete?: VoucherOngkirWhereInput | boolean
    connect?: VoucherOngkirWhereUniqueInput
    update?: XOR<XOR<VoucherOngkirUpdateToOneWithWhereWithoutStoreInput, VoucherOngkirUpdateWithoutStoreInput>, VoucherOngkirUncheckedUpdateWithoutStoreInput>
  }

  export type VoucherStoreUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<VoucherStoreCreateWithoutStoreInput, VoucherStoreUncheckedCreateWithoutStoreInput> | VoucherStoreCreateWithoutStoreInput[] | VoucherStoreUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: VoucherStoreCreateOrConnectWithoutStoreInput | VoucherStoreCreateOrConnectWithoutStoreInput[]
    upsert?: VoucherStoreUpsertWithWhereUniqueWithoutStoreInput | VoucherStoreUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: VoucherStoreCreateManyStoreInputEnvelope
    set?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    disconnect?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    delete?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    connect?: VoucherStoreWhereUniqueInput | VoucherStoreWhereUniqueInput[]
    update?: VoucherStoreUpdateWithWhereUniqueWithoutStoreInput | VoucherStoreUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: VoucherStoreUpdateManyWithWhereWithoutStoreInput | VoucherStoreUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: VoucherStoreScalarWhereInput | VoucherStoreScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutStockInput = {
    create?: XOR<ProductCreateWithoutStockInput, ProductUncheckedCreateWithoutStockInput>
    connectOrCreate?: ProductCreateOrConnectWithoutStockInput
    connect?: ProductWhereUniqueInput
  }

  export type StoreCreateNestedOneWithoutStockInput = {
    create?: XOR<StoreCreateWithoutStockInput, StoreUncheckedCreateWithoutStockInput>
    connectOrCreate?: StoreCreateOrConnectWithoutStockInput
    connect?: StoreWhereUniqueInput
  }

  export type StockJournalCreateNestedManyWithoutStockInput = {
    create?: XOR<StockJournalCreateWithoutStockInput, StockJournalUncheckedCreateWithoutStockInput> | StockJournalCreateWithoutStockInput[] | StockJournalUncheckedCreateWithoutStockInput[]
    connectOrCreate?: StockJournalCreateOrConnectWithoutStockInput | StockJournalCreateOrConnectWithoutStockInput[]
    createMany?: StockJournalCreateManyStockInputEnvelope
    connect?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
  }

  export type StockJournalUncheckedCreateNestedManyWithoutStockInput = {
    create?: XOR<StockJournalCreateWithoutStockInput, StockJournalUncheckedCreateWithoutStockInput> | StockJournalCreateWithoutStockInput[] | StockJournalUncheckedCreateWithoutStockInput[]
    connectOrCreate?: StockJournalCreateOrConnectWithoutStockInput | StockJournalCreateOrConnectWithoutStockInput[]
    createMany?: StockJournalCreateManyStockInputEnvelope
    connect?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
  }

  export type ProductUpdateOneRequiredWithoutStockNestedInput = {
    create?: XOR<ProductCreateWithoutStockInput, ProductUncheckedCreateWithoutStockInput>
    connectOrCreate?: ProductCreateOrConnectWithoutStockInput
    upsert?: ProductUpsertWithoutStockInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutStockInput, ProductUpdateWithoutStockInput>, ProductUncheckedUpdateWithoutStockInput>
  }

  export type StoreUpdateOneRequiredWithoutStockNestedInput = {
    create?: XOR<StoreCreateWithoutStockInput, StoreUncheckedCreateWithoutStockInput>
    connectOrCreate?: StoreCreateOrConnectWithoutStockInput
    upsert?: StoreUpsertWithoutStockInput
    connect?: StoreWhereUniqueInput
    update?: XOR<XOR<StoreUpdateToOneWithWhereWithoutStockInput, StoreUpdateWithoutStockInput>, StoreUncheckedUpdateWithoutStockInput>
  }

  export type StockJournalUpdateManyWithoutStockNestedInput = {
    create?: XOR<StockJournalCreateWithoutStockInput, StockJournalUncheckedCreateWithoutStockInput> | StockJournalCreateWithoutStockInput[] | StockJournalUncheckedCreateWithoutStockInput[]
    connectOrCreate?: StockJournalCreateOrConnectWithoutStockInput | StockJournalCreateOrConnectWithoutStockInput[]
    upsert?: StockJournalUpsertWithWhereUniqueWithoutStockInput | StockJournalUpsertWithWhereUniqueWithoutStockInput[]
    createMany?: StockJournalCreateManyStockInputEnvelope
    set?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
    disconnect?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
    delete?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
    connect?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
    update?: StockJournalUpdateWithWhereUniqueWithoutStockInput | StockJournalUpdateWithWhereUniqueWithoutStockInput[]
    updateMany?: StockJournalUpdateManyWithWhereWithoutStockInput | StockJournalUpdateManyWithWhereWithoutStockInput[]
    deleteMany?: StockJournalScalarWhereInput | StockJournalScalarWhereInput[]
  }

  export type StockJournalUncheckedUpdateManyWithoutStockNestedInput = {
    create?: XOR<StockJournalCreateWithoutStockInput, StockJournalUncheckedCreateWithoutStockInput> | StockJournalCreateWithoutStockInput[] | StockJournalUncheckedCreateWithoutStockInput[]
    connectOrCreate?: StockJournalCreateOrConnectWithoutStockInput | StockJournalCreateOrConnectWithoutStockInput[]
    upsert?: StockJournalUpsertWithWhereUniqueWithoutStockInput | StockJournalUpsertWithWhereUniqueWithoutStockInput[]
    createMany?: StockJournalCreateManyStockInputEnvelope
    set?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
    disconnect?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
    delete?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
    connect?: StockJournalWhereUniqueInput | StockJournalWhereUniqueInput[]
    update?: StockJournalUpdateWithWhereUniqueWithoutStockInput | StockJournalUpdateWithWhereUniqueWithoutStockInput[]
    updateMany?: StockJournalUpdateManyWithWhereWithoutStockInput | StockJournalUpdateManyWithWhereWithoutStockInput[]
    deleteMany?: StockJournalScalarWhereInput | StockJournalScalarWhereInput[]
  }

  export type StockCreateNestedOneWithoutStock_journalInput = {
    create?: XOR<StockCreateWithoutStock_journalInput, StockUncheckedCreateWithoutStock_journalInput>
    connectOrCreate?: StockCreateOrConnectWithoutStock_journalInput
    connect?: StockWhereUniqueInput
  }

  export type StoreCreateNestedOneWithoutStock_journalInput = {
    create?: XOR<StoreCreateWithoutStock_journalInput, StoreUncheckedCreateWithoutStock_journalInput>
    connectOrCreate?: StoreCreateOrConnectWithoutStock_journalInput
    connect?: StoreWhereUniqueInput
  }

  export type StockUpdateOneRequiredWithoutStock_journalNestedInput = {
    create?: XOR<StockCreateWithoutStock_journalInput, StockUncheckedCreateWithoutStock_journalInput>
    connectOrCreate?: StockCreateOrConnectWithoutStock_journalInput
    upsert?: StockUpsertWithoutStock_journalInput
    connect?: StockWhereUniqueInput
    update?: XOR<XOR<StockUpdateToOneWithWhereWithoutStock_journalInput, StockUpdateWithoutStock_journalInput>, StockUncheckedUpdateWithoutStock_journalInput>
  }

  export type StoreUpdateOneRequiredWithoutStock_journalNestedInput = {
    create?: XOR<StoreCreateWithoutStock_journalInput, StoreUncheckedCreateWithoutStock_journalInput>
    connectOrCreate?: StoreCreateOrConnectWithoutStock_journalInput
    upsert?: StoreUpsertWithoutStock_journalInput
    connect?: StoreWhereUniqueInput
    update?: XOR<XOR<StoreUpdateToOneWithWhereWithoutStock_journalInput, StoreUpdateWithoutStock_journalInput>, StoreUncheckedUpdateWithoutStock_journalInput>
  }

  export type CartItemCreateNestedManyWithoutProductInput = {
    create?: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput> | CartItemCreateWithoutProductInput[] | CartItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductInput | CartItemCreateOrConnectWithoutProductInput[]
    createMany?: CartItemCreateManyProductInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type OrderItemCreateNestedManyWithoutProductInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type ProductCategoryCreateNestedOneWithoutProductInput = {
    create?: XOR<ProductCategoryCreateWithoutProductInput, ProductCategoryUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductCategoryCreateOrConnectWithoutProductInput
    connect?: ProductCategoryWhereUniqueInput
  }

  export type ProductImgCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductImgCreateWithoutProductInput, ProductImgUncheckedCreateWithoutProductInput> | ProductImgCreateWithoutProductInput[] | ProductImgUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductImgCreateOrConnectWithoutProductInput | ProductImgCreateOrConnectWithoutProductInput[]
    createMany?: ProductImgCreateManyProductInputEnvelope
    connect?: ProductImgWhereUniqueInput | ProductImgWhereUniqueInput[]
  }

  export type StockCreateNestedOneWithoutProductInput = {
    create?: XOR<StockCreateWithoutProductInput, StockUncheckedCreateWithoutProductInput>
    connectOrCreate?: StockCreateOrConnectWithoutProductInput
    connect?: StockWhereUniqueInput
  }

  export type VoucherProductCreateNestedManyWithoutProductInput = {
    create?: XOR<VoucherProductCreateWithoutProductInput, VoucherProductUncheckedCreateWithoutProductInput> | VoucherProductCreateWithoutProductInput[] | VoucherProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: VoucherProductCreateOrConnectWithoutProductInput | VoucherProductCreateOrConnectWithoutProductInput[]
    createMany?: VoucherProductCreateManyProductInputEnvelope
    connect?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
  }

  export type CartItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput> | CartItemCreateWithoutProductInput[] | CartItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductInput | CartItemCreateOrConnectWithoutProductInput[]
    createMany?: CartItemCreateManyProductInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type ProductImgUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductImgCreateWithoutProductInput, ProductImgUncheckedCreateWithoutProductInput> | ProductImgCreateWithoutProductInput[] | ProductImgUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductImgCreateOrConnectWithoutProductInput | ProductImgCreateOrConnectWithoutProductInput[]
    createMany?: ProductImgCreateManyProductInputEnvelope
    connect?: ProductImgWhereUniqueInput | ProductImgWhereUniqueInput[]
  }

  export type StockUncheckedCreateNestedOneWithoutProductInput = {
    create?: XOR<StockCreateWithoutProductInput, StockUncheckedCreateWithoutProductInput>
    connectOrCreate?: StockCreateOrConnectWithoutProductInput
    connect?: StockWhereUniqueInput
  }

  export type VoucherProductUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<VoucherProductCreateWithoutProductInput, VoucherProductUncheckedCreateWithoutProductInput> | VoucherProductCreateWithoutProductInput[] | VoucherProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: VoucherProductCreateOrConnectWithoutProductInput | VoucherProductCreateOrConnectWithoutProductInput[]
    createMany?: VoucherProductCreateManyProductInputEnvelope
    connect?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
  }

  export type CartItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput> | CartItemCreateWithoutProductInput[] | CartItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductInput | CartItemCreateOrConnectWithoutProductInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutProductInput | CartItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: CartItemCreateManyProductInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutProductInput | CartItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutProductInput | CartItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type OrderItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutProductInput | OrderItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutProductInput | OrderItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutProductInput | OrderItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type ProductCategoryUpdateOneRequiredWithoutProductNestedInput = {
    create?: XOR<ProductCategoryCreateWithoutProductInput, ProductCategoryUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductCategoryCreateOrConnectWithoutProductInput
    upsert?: ProductCategoryUpsertWithoutProductInput
    connect?: ProductCategoryWhereUniqueInput
    update?: XOR<XOR<ProductCategoryUpdateToOneWithWhereWithoutProductInput, ProductCategoryUpdateWithoutProductInput>, ProductCategoryUncheckedUpdateWithoutProductInput>
  }

  export type ProductImgUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductImgCreateWithoutProductInput, ProductImgUncheckedCreateWithoutProductInput> | ProductImgCreateWithoutProductInput[] | ProductImgUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductImgCreateOrConnectWithoutProductInput | ProductImgCreateOrConnectWithoutProductInput[]
    upsert?: ProductImgUpsertWithWhereUniqueWithoutProductInput | ProductImgUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductImgCreateManyProductInputEnvelope
    set?: ProductImgWhereUniqueInput | ProductImgWhereUniqueInput[]
    disconnect?: ProductImgWhereUniqueInput | ProductImgWhereUniqueInput[]
    delete?: ProductImgWhereUniqueInput | ProductImgWhereUniqueInput[]
    connect?: ProductImgWhereUniqueInput | ProductImgWhereUniqueInput[]
    update?: ProductImgUpdateWithWhereUniqueWithoutProductInput | ProductImgUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductImgUpdateManyWithWhereWithoutProductInput | ProductImgUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductImgScalarWhereInput | ProductImgScalarWhereInput[]
  }

  export type StockUpdateOneWithoutProductNestedInput = {
    create?: XOR<StockCreateWithoutProductInput, StockUncheckedCreateWithoutProductInput>
    connectOrCreate?: StockCreateOrConnectWithoutProductInput
    upsert?: StockUpsertWithoutProductInput
    disconnect?: StockWhereInput | boolean
    delete?: StockWhereInput | boolean
    connect?: StockWhereUniqueInput
    update?: XOR<XOR<StockUpdateToOneWithWhereWithoutProductInput, StockUpdateWithoutProductInput>, StockUncheckedUpdateWithoutProductInput>
  }

  export type VoucherProductUpdateManyWithoutProductNestedInput = {
    create?: XOR<VoucherProductCreateWithoutProductInput, VoucherProductUncheckedCreateWithoutProductInput> | VoucherProductCreateWithoutProductInput[] | VoucherProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: VoucherProductCreateOrConnectWithoutProductInput | VoucherProductCreateOrConnectWithoutProductInput[]
    upsert?: VoucherProductUpsertWithWhereUniqueWithoutProductInput | VoucherProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: VoucherProductCreateManyProductInputEnvelope
    set?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
    disconnect?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
    delete?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
    connect?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
    update?: VoucherProductUpdateWithWhereUniqueWithoutProductInput | VoucherProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: VoucherProductUpdateManyWithWhereWithoutProductInput | VoucherProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: VoucherProductScalarWhereInput | VoucherProductScalarWhereInput[]
  }

  export type CartItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput> | CartItemCreateWithoutProductInput[] | CartItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductInput | CartItemCreateOrConnectWithoutProductInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutProductInput | CartItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: CartItemCreateManyProductInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutProductInput | CartItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutProductInput | CartItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutProductInput | OrderItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutProductInput | OrderItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutProductInput | OrderItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type ProductImgUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductImgCreateWithoutProductInput, ProductImgUncheckedCreateWithoutProductInput> | ProductImgCreateWithoutProductInput[] | ProductImgUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductImgCreateOrConnectWithoutProductInput | ProductImgCreateOrConnectWithoutProductInput[]
    upsert?: ProductImgUpsertWithWhereUniqueWithoutProductInput | ProductImgUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductImgCreateManyProductInputEnvelope
    set?: ProductImgWhereUniqueInput | ProductImgWhereUniqueInput[]
    disconnect?: ProductImgWhereUniqueInput | ProductImgWhereUniqueInput[]
    delete?: ProductImgWhereUniqueInput | ProductImgWhereUniqueInput[]
    connect?: ProductImgWhereUniqueInput | ProductImgWhereUniqueInput[]
    update?: ProductImgUpdateWithWhereUniqueWithoutProductInput | ProductImgUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductImgUpdateManyWithWhereWithoutProductInput | ProductImgUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductImgScalarWhereInput | ProductImgScalarWhereInput[]
  }

  export type StockUncheckedUpdateOneWithoutProductNestedInput = {
    create?: XOR<StockCreateWithoutProductInput, StockUncheckedCreateWithoutProductInput>
    connectOrCreate?: StockCreateOrConnectWithoutProductInput
    upsert?: StockUpsertWithoutProductInput
    disconnect?: StockWhereInput | boolean
    delete?: StockWhereInput | boolean
    connect?: StockWhereUniqueInput
    update?: XOR<XOR<StockUpdateToOneWithWhereWithoutProductInput, StockUpdateWithoutProductInput>, StockUncheckedUpdateWithoutProductInput>
  }

  export type VoucherProductUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<VoucherProductCreateWithoutProductInput, VoucherProductUncheckedCreateWithoutProductInput> | VoucherProductCreateWithoutProductInput[] | VoucherProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: VoucherProductCreateOrConnectWithoutProductInput | VoucherProductCreateOrConnectWithoutProductInput[]
    upsert?: VoucherProductUpsertWithWhereUniqueWithoutProductInput | VoucherProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: VoucherProductCreateManyProductInputEnvelope
    set?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
    disconnect?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
    delete?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
    connect?: VoucherProductWhereUniqueInput | VoucherProductWhereUniqueInput[]
    update?: VoucherProductUpdateWithWhereUniqueWithoutProductInput | VoucherProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: VoucherProductUpdateManyWithWhereWithoutProductInput | VoucherProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: VoucherProductScalarWhereInput | VoucherProductScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutProduct_imgInput = {
    create?: XOR<ProductCreateWithoutProduct_imgInput, ProductUncheckedCreateWithoutProduct_imgInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProduct_imgInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutProduct_imgNestedInput = {
    create?: XOR<ProductCreateWithoutProduct_imgInput, ProductUncheckedCreateWithoutProduct_imgInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProduct_imgInput
    upsert?: ProductUpsertWithoutProduct_imgInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutProduct_imgInput, ProductUpdateWithoutProduct_imgInput>, ProductUncheckedUpdateWithoutProduct_imgInput>
  }

  export type ProductCreateNestedManyWithoutProduct_categoryInput = {
    create?: XOR<ProductCreateWithoutProduct_categoryInput, ProductUncheckedCreateWithoutProduct_categoryInput> | ProductCreateWithoutProduct_categoryInput[] | ProductUncheckedCreateWithoutProduct_categoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutProduct_categoryInput | ProductCreateOrConnectWithoutProduct_categoryInput[]
    createMany?: ProductCreateManyProduct_categoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutProduct_categoryInput = {
    create?: XOR<ProductCreateWithoutProduct_categoryInput, ProductUncheckedCreateWithoutProduct_categoryInput> | ProductCreateWithoutProduct_categoryInput[] | ProductUncheckedCreateWithoutProduct_categoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutProduct_categoryInput | ProductCreateOrConnectWithoutProduct_categoryInput[]
    createMany?: ProductCreateManyProduct_categoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUpdateManyWithoutProduct_categoryNestedInput = {
    create?: XOR<ProductCreateWithoutProduct_categoryInput, ProductUncheckedCreateWithoutProduct_categoryInput> | ProductCreateWithoutProduct_categoryInput[] | ProductUncheckedCreateWithoutProduct_categoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutProduct_categoryInput | ProductCreateOrConnectWithoutProduct_categoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutProduct_categoryInput | ProductUpsertWithWhereUniqueWithoutProduct_categoryInput[]
    createMany?: ProductCreateManyProduct_categoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutProduct_categoryInput | ProductUpdateWithWhereUniqueWithoutProduct_categoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutProduct_categoryInput | ProductUpdateManyWithWhereWithoutProduct_categoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutProduct_categoryNestedInput = {
    create?: XOR<ProductCreateWithoutProduct_categoryInput, ProductUncheckedCreateWithoutProduct_categoryInput> | ProductCreateWithoutProduct_categoryInput[] | ProductUncheckedCreateWithoutProduct_categoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutProduct_categoryInput | ProductCreateOrConnectWithoutProduct_categoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutProduct_categoryInput | ProductUpsertWithWhereUniqueWithoutProduct_categoryInput[]
    createMany?: ProductCreateManyProduct_categoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutProduct_categoryInput | ProductUpdateWithWhereUniqueWithoutProduct_categoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutProduct_categoryInput | ProductUpdateManyWithWhereWithoutProduct_categoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type AdminCreateNestedOneWithoutVoucher_storeInput = {
    create?: XOR<AdminCreateWithoutVoucher_storeInput, AdminUncheckedCreateWithoutVoucher_storeInput>
    connectOrCreate?: AdminCreateOrConnectWithoutVoucher_storeInput
    connect?: AdminWhereUniqueInput
  }

  export type StoreCreateNestedOneWithoutVoucher_storesInput = {
    create?: XOR<StoreCreateWithoutVoucher_storesInput, StoreUncheckedCreateWithoutVoucher_storesInput>
    connectOrCreate?: StoreCreateOrConnectWithoutVoucher_storesInput
    connect?: StoreWhereUniqueInput
  }

  export type ProfileCreateNestedManyWithoutVoucher_storeInput = {
    create?: XOR<ProfileCreateWithoutVoucher_storeInput, ProfileUncheckedCreateWithoutVoucher_storeInput> | ProfileCreateWithoutVoucher_storeInput[] | ProfileUncheckedCreateWithoutVoucher_storeInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutVoucher_storeInput | ProfileCreateOrConnectWithoutVoucher_storeInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedManyWithoutVoucher_storeInput = {
    create?: XOR<ProfileCreateWithoutVoucher_storeInput, ProfileUncheckedCreateWithoutVoucher_storeInput> | ProfileCreateWithoutVoucher_storeInput[] | ProfileUncheckedCreateWithoutVoucher_storeInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutVoucher_storeInput | ProfileCreateOrConnectWithoutVoucher_storeInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type AdminUpdateOneRequiredWithoutVoucher_storeNestedInput = {
    create?: XOR<AdminCreateWithoutVoucher_storeInput, AdminUncheckedCreateWithoutVoucher_storeInput>
    connectOrCreate?: AdminCreateOrConnectWithoutVoucher_storeInput
    upsert?: AdminUpsertWithoutVoucher_storeInput
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutVoucher_storeInput, AdminUpdateWithoutVoucher_storeInput>, AdminUncheckedUpdateWithoutVoucher_storeInput>
  }

  export type StoreUpdateOneRequiredWithoutVoucher_storesNestedInput = {
    create?: XOR<StoreCreateWithoutVoucher_storesInput, StoreUncheckedCreateWithoutVoucher_storesInput>
    connectOrCreate?: StoreCreateOrConnectWithoutVoucher_storesInput
    upsert?: StoreUpsertWithoutVoucher_storesInput
    connect?: StoreWhereUniqueInput
    update?: XOR<XOR<StoreUpdateToOneWithWhereWithoutVoucher_storesInput, StoreUpdateWithoutVoucher_storesInput>, StoreUncheckedUpdateWithoutVoucher_storesInput>
  }

  export type ProfileUpdateManyWithoutVoucher_storeNestedInput = {
    create?: XOR<ProfileCreateWithoutVoucher_storeInput, ProfileUncheckedCreateWithoutVoucher_storeInput> | ProfileCreateWithoutVoucher_storeInput[] | ProfileUncheckedCreateWithoutVoucher_storeInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutVoucher_storeInput | ProfileCreateOrConnectWithoutVoucher_storeInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutVoucher_storeInput | ProfileUpsertWithWhereUniqueWithoutVoucher_storeInput[]
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutVoucher_storeInput | ProfileUpdateWithWhereUniqueWithoutVoucher_storeInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutVoucher_storeInput | ProfileUpdateManyWithWhereWithoutVoucher_storeInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateManyWithoutVoucher_storeNestedInput = {
    create?: XOR<ProfileCreateWithoutVoucher_storeInput, ProfileUncheckedCreateWithoutVoucher_storeInput> | ProfileCreateWithoutVoucher_storeInput[] | ProfileUncheckedCreateWithoutVoucher_storeInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutVoucher_storeInput | ProfileCreateOrConnectWithoutVoucher_storeInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutVoucher_storeInput | ProfileUpsertWithWhereUniqueWithoutVoucher_storeInput[]
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutVoucher_storeInput | ProfileUpdateWithWhereUniqueWithoutVoucher_storeInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutVoucher_storeInput | ProfileUpdateManyWithWhereWithoutVoucher_storeInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type AdminCreateNestedOneWithoutVoucher_ongkirInput = {
    create?: XOR<AdminCreateWithoutVoucher_ongkirInput, AdminUncheckedCreateWithoutVoucher_ongkirInput>
    connectOrCreate?: AdminCreateOrConnectWithoutVoucher_ongkirInput
    connect?: AdminWhereUniqueInput
  }

  export type StoreCreateNestedOneWithoutVoucher_ongkirInput = {
    create?: XOR<StoreCreateWithoutVoucher_ongkirInput, StoreUncheckedCreateWithoutVoucher_ongkirInput>
    connectOrCreate?: StoreCreateOrConnectWithoutVoucher_ongkirInput
    connect?: StoreWhereUniqueInput
  }

  export type AdminUpdateOneRequiredWithoutVoucher_ongkirNestedInput = {
    create?: XOR<AdminCreateWithoutVoucher_ongkirInput, AdminUncheckedCreateWithoutVoucher_ongkirInput>
    connectOrCreate?: AdminCreateOrConnectWithoutVoucher_ongkirInput
    upsert?: AdminUpsertWithoutVoucher_ongkirInput
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutVoucher_ongkirInput, AdminUpdateWithoutVoucher_ongkirInput>, AdminUncheckedUpdateWithoutVoucher_ongkirInput>
  }

  export type StoreUpdateOneRequiredWithoutVoucher_ongkirNestedInput = {
    create?: XOR<StoreCreateWithoutVoucher_ongkirInput, StoreUncheckedCreateWithoutVoucher_ongkirInput>
    connectOrCreate?: StoreCreateOrConnectWithoutVoucher_ongkirInput
    upsert?: StoreUpsertWithoutVoucher_ongkirInput
    connect?: StoreWhereUniqueInput
    update?: XOR<XOR<StoreUpdateToOneWithWhereWithoutVoucher_ongkirInput, StoreUpdateWithoutVoucher_ongkirInput>, StoreUncheckedUpdateWithoutVoucher_ongkirInput>
  }

  export type AdminCreateNestedOneWithoutVoucher_productInput = {
    create?: XOR<AdminCreateWithoutVoucher_productInput, AdminUncheckedCreateWithoutVoucher_productInput>
    connectOrCreate?: AdminCreateOrConnectWithoutVoucher_productInput
    connect?: AdminWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutVoucherInput = {
    create?: XOR<ProductCreateWithoutVoucherInput, ProductUncheckedCreateWithoutVoucherInput>
    connectOrCreate?: ProductCreateOrConnectWithoutVoucherInput
    connect?: ProductWhereUniqueInput
  }

  export type AdminUpdateOneRequiredWithoutVoucher_productNestedInput = {
    create?: XOR<AdminCreateWithoutVoucher_productInput, AdminUncheckedCreateWithoutVoucher_productInput>
    connectOrCreate?: AdminCreateOrConnectWithoutVoucher_productInput
    upsert?: AdminUpsertWithoutVoucher_productInput
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutVoucher_productInput, AdminUpdateWithoutVoucher_productInput>, AdminUncheckedUpdateWithoutVoucher_productInput>
  }

  export type ProductUpdateOneRequiredWithoutVoucherNestedInput = {
    create?: XOR<ProductCreateWithoutVoucherInput, ProductUncheckedCreateWithoutVoucherInput>
    connectOrCreate?: ProductCreateOrConnectWithoutVoucherInput
    upsert?: ProductUpsertWithoutVoucherInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutVoucherInput, ProductUpdateWithoutVoucherInput>, ProductUncheckedUpdateWithoutVoucherInput>
  }

  export type OrderCreateNestedManyWithoutDiscountInput = {
    create?: XOR<OrderCreateWithoutDiscountInput, OrderUncheckedCreateWithoutDiscountInput> | OrderCreateWithoutDiscountInput[] | OrderUncheckedCreateWithoutDiscountInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutDiscountInput | OrderCreateOrConnectWithoutDiscountInput[]
    createMany?: OrderCreateManyDiscountInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutDiscountInput = {
    create?: XOR<OrderCreateWithoutDiscountInput, OrderUncheckedCreateWithoutDiscountInput> | OrderCreateWithoutDiscountInput[] | OrderUncheckedCreateWithoutDiscountInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutDiscountInput | OrderCreateOrConnectWithoutDiscountInput[]
    createMany?: OrderCreateManyDiscountInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUpdateManyWithoutDiscountNestedInput = {
    create?: XOR<OrderCreateWithoutDiscountInput, OrderUncheckedCreateWithoutDiscountInput> | OrderCreateWithoutDiscountInput[] | OrderUncheckedCreateWithoutDiscountInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutDiscountInput | OrderCreateOrConnectWithoutDiscountInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutDiscountInput | OrderUpsertWithWhereUniqueWithoutDiscountInput[]
    createMany?: OrderCreateManyDiscountInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutDiscountInput | OrderUpdateWithWhereUniqueWithoutDiscountInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutDiscountInput | OrderUpdateManyWithWhereWithoutDiscountInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutDiscountNestedInput = {
    create?: XOR<OrderCreateWithoutDiscountInput, OrderUncheckedCreateWithoutDiscountInput> | OrderCreateWithoutDiscountInput[] | OrderUncheckedCreateWithoutDiscountInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutDiscountInput | OrderCreateOrConnectWithoutDiscountInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutDiscountInput | OrderUpsertWithWhereUniqueWithoutDiscountInput[]
    createMany?: OrderCreateManyDiscountInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutDiscountInput | OrderUpdateWithWhereUniqueWithoutDiscountInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutDiscountInput | OrderUpdateManyWithWhereWithoutDiscountInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type CartItemCreateNestedManyWithoutCartInput = {
    create?: XOR<CartItemCreateWithoutCartInput, CartItemUncheckedCreateWithoutCartInput> | CartItemCreateWithoutCartInput[] | CartItemUncheckedCreateWithoutCartInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutCartInput | CartItemCreateOrConnectWithoutCartInput[]
    createMany?: CartItemCreateManyCartInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type ProfileCreateNestedOneWithoutCartInput = {
    create?: XOR<ProfileCreateWithoutCartInput, ProfileUncheckedCreateWithoutCartInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutCartInput
    connect?: ProfileWhereUniqueInput
  }

  export type CartItemUncheckedCreateNestedManyWithoutCartInput = {
    create?: XOR<CartItemCreateWithoutCartInput, CartItemUncheckedCreateWithoutCartInput> | CartItemCreateWithoutCartInput[] | CartItemUncheckedCreateWithoutCartInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutCartInput | CartItemCreateOrConnectWithoutCartInput[]
    createMany?: CartItemCreateManyCartInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type CartItemUpdateManyWithoutCartNestedInput = {
    create?: XOR<CartItemCreateWithoutCartInput, CartItemUncheckedCreateWithoutCartInput> | CartItemCreateWithoutCartInput[] | CartItemUncheckedCreateWithoutCartInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutCartInput | CartItemCreateOrConnectWithoutCartInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutCartInput | CartItemUpsertWithWhereUniqueWithoutCartInput[]
    createMany?: CartItemCreateManyCartInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutCartInput | CartItemUpdateWithWhereUniqueWithoutCartInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutCartInput | CartItemUpdateManyWithWhereWithoutCartInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type ProfileUpdateOneRequiredWithoutCartNestedInput = {
    create?: XOR<ProfileCreateWithoutCartInput, ProfileUncheckedCreateWithoutCartInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutCartInput
    upsert?: ProfileUpsertWithoutCartInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutCartInput, ProfileUpdateWithoutCartInput>, ProfileUncheckedUpdateWithoutCartInput>
  }

  export type CartItemUncheckedUpdateManyWithoutCartNestedInput = {
    create?: XOR<CartItemCreateWithoutCartInput, CartItemUncheckedCreateWithoutCartInput> | CartItemCreateWithoutCartInput[] | CartItemUncheckedCreateWithoutCartInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutCartInput | CartItemCreateOrConnectWithoutCartInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutCartInput | CartItemUpsertWithWhereUniqueWithoutCartInput[]
    createMany?: CartItemCreateManyCartInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutCartInput | CartItemUpdateWithWhereUniqueWithoutCartInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutCartInput | CartItemUpdateManyWithWhereWithoutCartInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type CartCreateNestedOneWithoutCart_itemsInput = {
    create?: XOR<CartCreateWithoutCart_itemsInput, CartUncheckedCreateWithoutCart_itemsInput>
    connectOrCreate?: CartCreateOrConnectWithoutCart_itemsInput
    connect?: CartWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutCart_itemsInput = {
    create?: XOR<ProductCreateWithoutCart_itemsInput, ProductUncheckedCreateWithoutCart_itemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutCart_itemsInput
    connect?: ProductWhereUniqueInput
  }

  export type CartUpdateOneRequiredWithoutCart_itemsNestedInput = {
    create?: XOR<CartCreateWithoutCart_itemsInput, CartUncheckedCreateWithoutCart_itemsInput>
    connectOrCreate?: CartCreateOrConnectWithoutCart_itemsInput
    upsert?: CartUpsertWithoutCart_itemsInput
    connect?: CartWhereUniqueInput
    update?: XOR<XOR<CartUpdateToOneWithWhereWithoutCart_itemsInput, CartUpdateWithoutCart_itemsInput>, CartUncheckedUpdateWithoutCart_itemsInput>
  }

  export type ProductUpdateOneRequiredWithoutCart_itemsNestedInput = {
    create?: XOR<ProductCreateWithoutCart_itemsInput, ProductUncheckedCreateWithoutCart_itemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutCart_itemsInput
    upsert?: ProductUpsertWithoutCart_itemsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutCart_itemsInput, ProductUpdateWithoutCart_itemsInput>, ProductUncheckedUpdateWithoutCart_itemsInput>
  }

  export type AddressCreateNestedOneWithoutOrdersInput = {
    create?: XOR<AddressCreateWithoutOrdersInput, AddressUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: AddressCreateOrConnectWithoutOrdersInput
    connect?: AddressWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutOrdersInput = {
    create?: XOR<ProfileCreateWithoutOrdersInput, ProfileUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutOrdersInput
    connect?: ProfileWhereUniqueInput
  }

  export type StoreCreateNestedOneWithoutOrdersInput = {
    create?: XOR<StoreCreateWithoutOrdersInput, StoreUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: StoreCreateOrConnectWithoutOrdersInput
    connect?: StoreWhereUniqueInput
  }

  export type DiscountCreateNestedOneWithoutOrdersInput = {
    create?: XOR<DiscountCreateWithoutOrdersInput, DiscountUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: DiscountCreateOrConnectWithoutOrdersInput
    connect?: DiscountWhereUniqueInput
  }

  export type OrderCancelCreateNestedOneWithoutOrderInput = {
    create?: XOR<OrderCancelCreateWithoutOrderInput, OrderCancelUncheckedCreateWithoutOrderInput>
    connectOrCreate?: OrderCancelCreateOrConnectWithoutOrderInput
    connect?: OrderCancelWhereUniqueInput
  }

  export type AdminOrderCreateNestedManyWithoutOrderInput = {
    create?: XOR<AdminOrderCreateWithoutOrderInput, AdminOrderUncheckedCreateWithoutOrderInput> | AdminOrderCreateWithoutOrderInput[] | AdminOrderUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: AdminOrderCreateOrConnectWithoutOrderInput | AdminOrderCreateOrConnectWithoutOrderInput[]
    createMany?: AdminOrderCreateManyOrderInputEnvelope
    connect?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
  }

  export type OrderItemCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type PaymentProofCreateNestedOneWithoutOrderInput = {
    create?: XOR<PaymentProofCreateWithoutOrderInput, PaymentProofUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PaymentProofCreateOrConnectWithoutOrderInput
    connect?: PaymentProofWhereUniqueInput
  }

  export type OrderCancelUncheckedCreateNestedOneWithoutOrderInput = {
    create?: XOR<OrderCancelCreateWithoutOrderInput, OrderCancelUncheckedCreateWithoutOrderInput>
    connectOrCreate?: OrderCancelCreateOrConnectWithoutOrderInput
    connect?: OrderCancelWhereUniqueInput
  }

  export type AdminOrderUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<AdminOrderCreateWithoutOrderInput, AdminOrderUncheckedCreateWithoutOrderInput> | AdminOrderCreateWithoutOrderInput[] | AdminOrderUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: AdminOrderCreateOrConnectWithoutOrderInput | AdminOrderCreateOrConnectWithoutOrderInput[]
    createMany?: AdminOrderCreateManyOrderInputEnvelope
    connect?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type PaymentProofUncheckedCreateNestedOneWithoutOrderInput = {
    create?: XOR<PaymentProofCreateWithoutOrderInput, PaymentProofUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PaymentProofCreateOrConnectWithoutOrderInput
    connect?: PaymentProofWhereUniqueInput
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus
  }

  export type AddressUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<AddressCreateWithoutOrdersInput, AddressUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: AddressCreateOrConnectWithoutOrdersInput
    upsert?: AddressUpsertWithoutOrdersInput
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutOrdersInput, AddressUpdateWithoutOrdersInput>, AddressUncheckedUpdateWithoutOrdersInput>
  }

  export type ProfileUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<ProfileCreateWithoutOrdersInput, ProfileUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutOrdersInput
    upsert?: ProfileUpsertWithoutOrdersInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutOrdersInput, ProfileUpdateWithoutOrdersInput>, ProfileUncheckedUpdateWithoutOrdersInput>
  }

  export type StoreUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<StoreCreateWithoutOrdersInput, StoreUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: StoreCreateOrConnectWithoutOrdersInput
    upsert?: StoreUpsertWithoutOrdersInput
    connect?: StoreWhereUniqueInput
    update?: XOR<XOR<StoreUpdateToOneWithWhereWithoutOrdersInput, StoreUpdateWithoutOrdersInput>, StoreUncheckedUpdateWithoutOrdersInput>
  }

  export type DiscountUpdateOneWithoutOrdersNestedInput = {
    create?: XOR<DiscountCreateWithoutOrdersInput, DiscountUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: DiscountCreateOrConnectWithoutOrdersInput
    upsert?: DiscountUpsertWithoutOrdersInput
    disconnect?: DiscountWhereInput | boolean
    delete?: DiscountWhereInput | boolean
    connect?: DiscountWhereUniqueInput
    update?: XOR<XOR<DiscountUpdateToOneWithWhereWithoutOrdersInput, DiscountUpdateWithoutOrdersInput>, DiscountUncheckedUpdateWithoutOrdersInput>
  }

  export type OrderCancelUpdateOneWithoutOrderNestedInput = {
    create?: XOR<OrderCancelCreateWithoutOrderInput, OrderCancelUncheckedCreateWithoutOrderInput>
    connectOrCreate?: OrderCancelCreateOrConnectWithoutOrderInput
    upsert?: OrderCancelUpsertWithoutOrderInput
    disconnect?: OrderCancelWhereInput | boolean
    delete?: OrderCancelWhereInput | boolean
    connect?: OrderCancelWhereUniqueInput
    update?: XOR<XOR<OrderCancelUpdateToOneWithWhereWithoutOrderInput, OrderCancelUpdateWithoutOrderInput>, OrderCancelUncheckedUpdateWithoutOrderInput>
  }

  export type AdminOrderUpdateManyWithoutOrderNestedInput = {
    create?: XOR<AdminOrderCreateWithoutOrderInput, AdminOrderUncheckedCreateWithoutOrderInput> | AdminOrderCreateWithoutOrderInput[] | AdminOrderUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: AdminOrderCreateOrConnectWithoutOrderInput | AdminOrderCreateOrConnectWithoutOrderInput[]
    upsert?: AdminOrderUpsertWithWhereUniqueWithoutOrderInput | AdminOrderUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: AdminOrderCreateManyOrderInputEnvelope
    set?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
    disconnect?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
    delete?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
    connect?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
    update?: AdminOrderUpdateWithWhereUniqueWithoutOrderInput | AdminOrderUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: AdminOrderUpdateManyWithWhereWithoutOrderInput | AdminOrderUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: AdminOrderScalarWhereInput | AdminOrderScalarWhereInput[]
  }

  export type OrderItemUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type PaymentProofUpdateOneWithoutOrderNestedInput = {
    create?: XOR<PaymentProofCreateWithoutOrderInput, PaymentProofUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PaymentProofCreateOrConnectWithoutOrderInput
    upsert?: PaymentProofUpsertWithoutOrderInput
    disconnect?: PaymentProofWhereInput | boolean
    delete?: PaymentProofWhereInput | boolean
    connect?: PaymentProofWhereUniqueInput
    update?: XOR<XOR<PaymentProofUpdateToOneWithWhereWithoutOrderInput, PaymentProofUpdateWithoutOrderInput>, PaymentProofUncheckedUpdateWithoutOrderInput>
  }

  export type OrderCancelUncheckedUpdateOneWithoutOrderNestedInput = {
    create?: XOR<OrderCancelCreateWithoutOrderInput, OrderCancelUncheckedCreateWithoutOrderInput>
    connectOrCreate?: OrderCancelCreateOrConnectWithoutOrderInput
    upsert?: OrderCancelUpsertWithoutOrderInput
    disconnect?: OrderCancelWhereInput | boolean
    delete?: OrderCancelWhereInput | boolean
    connect?: OrderCancelWhereUniqueInput
    update?: XOR<XOR<OrderCancelUpdateToOneWithWhereWithoutOrderInput, OrderCancelUpdateWithoutOrderInput>, OrderCancelUncheckedUpdateWithoutOrderInput>
  }

  export type AdminOrderUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<AdminOrderCreateWithoutOrderInput, AdminOrderUncheckedCreateWithoutOrderInput> | AdminOrderCreateWithoutOrderInput[] | AdminOrderUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: AdminOrderCreateOrConnectWithoutOrderInput | AdminOrderCreateOrConnectWithoutOrderInput[]
    upsert?: AdminOrderUpsertWithWhereUniqueWithoutOrderInput | AdminOrderUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: AdminOrderCreateManyOrderInputEnvelope
    set?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
    disconnect?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
    delete?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
    connect?: AdminOrderWhereUniqueInput | AdminOrderWhereUniqueInput[]
    update?: AdminOrderUpdateWithWhereUniqueWithoutOrderInput | AdminOrderUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: AdminOrderUpdateManyWithWhereWithoutOrderInput | AdminOrderUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: AdminOrderScalarWhereInput | AdminOrderScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type PaymentProofUncheckedUpdateOneWithoutOrderNestedInput = {
    create?: XOR<PaymentProofCreateWithoutOrderInput, PaymentProofUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PaymentProofCreateOrConnectWithoutOrderInput
    upsert?: PaymentProofUpsertWithoutOrderInput
    disconnect?: PaymentProofWhereInput | boolean
    delete?: PaymentProofWhereInput | boolean
    connect?: PaymentProofWhereUniqueInput
    update?: XOR<XOR<PaymentProofUpdateToOneWithWhereWithoutOrderInput, PaymentProofUpdateWithoutOrderInput>, PaymentProofUncheckedUpdateWithoutOrderInput>
  }

  export type OrderCreateNestedOneWithoutOrder_itemsInput = {
    create?: XOR<OrderCreateWithoutOrder_itemsInput, OrderUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrder_itemsInput
    connect?: OrderWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutOrder_itemsInput = {
    create?: XOR<ProductCreateWithoutOrder_itemsInput, ProductUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrder_itemsInput
    connect?: ProductWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutOrder_itemsNestedInput = {
    create?: XOR<OrderCreateWithoutOrder_itemsInput, OrderUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrder_itemsInput
    upsert?: OrderUpsertWithoutOrder_itemsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutOrder_itemsInput, OrderUpdateWithoutOrder_itemsInput>, OrderUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type ProductUpdateOneRequiredWithoutOrder_itemsNestedInput = {
    create?: XOR<ProductCreateWithoutOrder_itemsInput, ProductUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrder_itemsInput
    upsert?: ProductUpsertWithoutOrder_itemsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutOrder_itemsInput, ProductUpdateWithoutOrder_itemsInput>, ProductUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type OrderCreateNestedOneWithoutPayment_proofInput = {
    create?: XOR<OrderCreateWithoutPayment_proofInput, OrderUncheckedCreateWithoutPayment_proofInput>
    connectOrCreate?: OrderCreateOrConnectWithoutPayment_proofInput
    connect?: OrderWhereUniqueInput
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type OrderUpdateOneRequiredWithoutPayment_proofNestedInput = {
    create?: XOR<OrderCreateWithoutPayment_proofInput, OrderUncheckedCreateWithoutPayment_proofInput>
    connectOrCreate?: OrderCreateOrConnectWithoutPayment_proofInput
    upsert?: OrderUpsertWithoutPayment_proofInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutPayment_proofInput, OrderUpdateWithoutPayment_proofInput>, OrderUncheckedUpdateWithoutPayment_proofInput>
  }

  export type OrderCreateNestedOneWithoutOrder_cancelInput = {
    create?: XOR<OrderCreateWithoutOrder_cancelInput, OrderUncheckedCreateWithoutOrder_cancelInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrder_cancelInput
    connect?: OrderWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutOrder_cancelNestedInput = {
    create?: XOR<OrderCreateWithoutOrder_cancelInput, OrderUncheckedCreateWithoutOrder_cancelInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrder_cancelInput
    upsert?: OrderUpsertWithoutOrder_cancelInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutOrder_cancelInput, OrderUpdateWithoutOrder_cancelInput>, OrderUncheckedUpdateWithoutOrder_cancelInput>
  }

  export type AdminCreateNestedOneWithoutAdmin_ordersInput = {
    create?: XOR<AdminCreateWithoutAdmin_ordersInput, AdminUncheckedCreateWithoutAdmin_ordersInput>
    connectOrCreate?: AdminCreateOrConnectWithoutAdmin_ordersInput
    connect?: AdminWhereUniqueInput
  }

  export type OrderCreateNestedOneWithoutAdmin_ordersInput = {
    create?: XOR<OrderCreateWithoutAdmin_ordersInput, OrderUncheckedCreateWithoutAdmin_ordersInput>
    connectOrCreate?: OrderCreateOrConnectWithoutAdmin_ordersInput
    connect?: OrderWhereUniqueInput
  }

  export type EnumActionEnumFieldUpdateOperationsInput = {
    set?: $Enums.ActionEnum
  }

  export type AdminUpdateOneRequiredWithoutAdmin_ordersNestedInput = {
    create?: XOR<AdminCreateWithoutAdmin_ordersInput, AdminUncheckedCreateWithoutAdmin_ordersInput>
    connectOrCreate?: AdminCreateOrConnectWithoutAdmin_ordersInput
    upsert?: AdminUpsertWithoutAdmin_ordersInput
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutAdmin_ordersInput, AdminUpdateWithoutAdmin_ordersInput>, AdminUncheckedUpdateWithoutAdmin_ordersInput>
  }

  export type OrderUpdateOneRequiredWithoutAdmin_ordersNestedInput = {
    create?: XOR<OrderCreateWithoutAdmin_ordersInput, OrderUncheckedCreateWithoutAdmin_ordersInput>
    connectOrCreate?: OrderCreateOrConnectWithoutAdmin_ordersInput
    upsert?: OrderUpsertWithoutAdmin_ordersInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutAdmin_ordersInput, OrderUpdateWithoutAdmin_ordersInput>, OrderUncheckedUpdateWithoutAdmin_ordersInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedEnumActionEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionEnum | EnumActionEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ActionEnum[] | ListEnumActionEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActionEnum[] | ListEnumActionEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumActionEnumFilter<$PrismaModel> | $Enums.ActionEnum
  }

  export type NestedEnumActionEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionEnum | EnumActionEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ActionEnum[] | ListEnumActionEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActionEnum[] | ListEnumActionEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumActionEnumWithAggregatesFilter<$PrismaModel> | $Enums.ActionEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActionEnumFilter<$PrismaModel>
    _max?: NestedEnumActionEnumFilter<$PrismaModel>
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProfileCreateWithoutUserInput = {
    phone?: string | null
    pfp_url?: string | null
    cart?: CartCreateNestedManyWithoutProfileInput
    orders?: OrderCreateNestedManyWithoutProfileInput
    voucher_store?: VoucherStoreCreateNestedManyWithoutProfilesInput
    Address?: AddressCreateNestedManyWithoutProfileInput
    referral?: ReferralCreateNestedOneWithoutProfileInput
    referred?: ReferralCreateNestedOneWithoutReferredInput
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    profile_id?: number
    phone?: string | null
    pfp_url?: string | null
    referred_id?: number | null
    cart?: CartUncheckedCreateNestedManyWithoutProfileInput
    orders?: OrderUncheckedCreateNestedManyWithoutProfileInput
    voucher_store?: VoucherStoreUncheckedCreateNestedManyWithoutProfilesInput
    Address?: AddressUncheckedCreateNestedManyWithoutProfileInput
    referral?: ReferralUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type AdminCreateWithoutUserInput = {
    phone: string
    position: string
    deleted_at?: Date | string | null
    store: StoreCreateNestedOneWithoutAdminInput
    admin_orders?: AdminOrderCreateNestedManyWithoutAdminInput
    voucher_ongkir?: VoucherOngkirCreateNestedManyWithoutAdminInput
    voucher_product?: VoucherProductCreateNestedManyWithoutAdminInput
    voucher_store?: VoucherStoreCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutUserInput = {
    admin_id?: number
    store_id: number
    phone: string
    position: string
    deleted_at?: Date | string | null
    admin_orders?: AdminOrderUncheckedCreateNestedManyWithoutAdminInput
    voucher_ongkir?: VoucherOngkirUncheckedCreateNestedManyWithoutAdminInput
    voucher_product?: VoucherProductUncheckedCreateNestedManyWithoutAdminInput
    voucher_store?: VoucherStoreUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminCreateOrConnectWithoutUserInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    userId?: StringFilter<"Account"> | string
  }

  export type ProfileUpsertWithoutUserInput = {
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateWithoutUserInput = {
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
    cart?: CartUpdateManyWithoutProfileNestedInput
    orders?: OrderUpdateManyWithoutProfileNestedInput
    voucher_store?: VoucherStoreUpdateManyWithoutProfilesNestedInput
    Address?: AddressUpdateManyWithoutProfileNestedInput
    referral?: ReferralUpdateOneWithoutProfileNestedInput
    referred?: ReferralUpdateOneWithoutReferredNestedInput
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    profile_id?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
    referred_id?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: CartUncheckedUpdateManyWithoutProfileNestedInput
    orders?: OrderUncheckedUpdateManyWithoutProfileNestedInput
    voucher_store?: VoucherStoreUncheckedUpdateManyWithoutProfilesNestedInput
    Address?: AddressUncheckedUpdateManyWithoutProfileNestedInput
    referral?: ReferralUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type AdminUpsertWithoutUserInput = {
    update: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutUserInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
  }

  export type AdminUpdateWithoutUserInput = {
    phone?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    store?: StoreUpdateOneRequiredWithoutAdminNestedInput
    admin_orders?: AdminOrderUpdateManyWithoutAdminNestedInput
    voucher_ongkir?: VoucherOngkirUpdateManyWithoutAdminNestedInput
    voucher_product?: VoucherProductUpdateManyWithoutAdminNestedInput
    voucher_store?: VoucherStoreUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutUserInput = {
    admin_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    admin_orders?: AdminOrderUncheckedUpdateManyWithoutAdminNestedInput
    voucher_ongkir?: VoucherOngkirUncheckedUpdateManyWithoutAdminNestedInput
    voucher_product?: VoucherProductUncheckedUpdateManyWithoutAdminNestedInput
    voucher_store?: VoucherStoreUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.Role
    updateAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.Role
    updateAt?: Date | string
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.Role
    updateAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    admin?: AdminCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.Role
    updateAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    admin?: AdminUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type CartCreateWithoutProfileInput = {
    created_at: Date | string
    cart_items?: CartItemCreateNestedManyWithoutCartInput
  }

  export type CartUncheckedCreateWithoutProfileInput = {
    cart_id?: number
    created_at: Date | string
    cart_items?: CartItemUncheckedCreateNestedManyWithoutCartInput
  }

  export type CartCreateOrConnectWithoutProfileInput = {
    where: CartWhereUniqueInput
    create: XOR<CartCreateWithoutProfileInput, CartUncheckedCreateWithoutProfileInput>
  }

  export type CartCreateManyProfileInputEnvelope = {
    data: CartCreateManyProfileInput | CartCreateManyProfileInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutProfileInput = {
    order_number?: string | null
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    status: $Enums.OrderStatus
    order_date: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    address: AddressCreateNestedOneWithoutOrdersInput
    store: StoreCreateNestedOneWithoutOrdersInput
    discount?: DiscountCreateNestedOneWithoutOrdersInput
    order_cancel?: OrderCancelCreateNestedOneWithoutOrderInput
    admin_orders?: AdminOrderCreateNestedManyWithoutOrderInput
    order_items?: OrderItemCreateNestedManyWithoutOrderInput
    payment_proof?: PaymentProofCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutProfileInput = {
    order_id?: number
    order_number?: string | null
    store_id: number
    address_id: number
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    discount_id?: number | null
    status: $Enums.OrderStatus
    order_date: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    order_cancel?: OrderCancelUncheckedCreateNestedOneWithoutOrderInput
    admin_orders?: AdminOrderUncheckedCreateNestedManyWithoutOrderInput
    order_items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    payment_proof?: PaymentProofUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutProfileInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutProfileInput, OrderUncheckedCreateWithoutProfileInput>
  }

  export type OrderCreateManyProfileInputEnvelope = {
    data: OrderCreateManyProfileInput | OrderCreateManyProfileInput[]
    skipDuplicates?: boolean
  }

  export type VoucherStoreCreateWithoutProfilesInput = {
    voucher_store_code: string
    voucher_store_amount_percentage: number
    voucher_store_exact_nominal: number
    voucher_store_minimum_buy: number
    voucher_store_maximum_nominal: number
    voucher_store_startdate: Date | string
    voucher_store_enddate: Date | string
    created_at: Date | string
    admin: AdminCreateNestedOneWithoutVoucher_storeInput
    store: StoreCreateNestedOneWithoutVoucher_storesInput
  }

  export type VoucherStoreUncheckedCreateWithoutProfilesInput = {
    voucher_store_id?: number
    voucher_store_code: string
    voucher_store_amount_percentage: number
    voucher_store_exact_nominal: number
    voucher_store_minimum_buy: number
    voucher_store_maximum_nominal: number
    voucher_store_startdate: Date | string
    voucher_store_enddate: Date | string
    created_at: Date | string
    admin_responsible: number
    store_id: number
  }

  export type VoucherStoreCreateOrConnectWithoutProfilesInput = {
    where: VoucherStoreWhereUniqueInput
    create: XOR<VoucherStoreCreateWithoutProfilesInput, VoucherStoreUncheckedCreateWithoutProfilesInput>
  }

  export type AddressCreateWithoutProfileInput = {
    street: string
    city: string
    country: string
    lat: string
    lng: string
    post_code: string
    address_name: string
    address_contact: string
    deleted_at?: Date | string | null
    orders?: OrderCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutProfileInput = {
    address_id?: number
    street: string
    city: string
    country: string
    lat: string
    lng: string
    post_code: string
    address_name: string
    address_contact: string
    deleted_at?: Date | string | null
    orders?: OrderUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressCreateOrConnectWithoutProfileInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutProfileInput, AddressUncheckedCreateWithoutProfileInput>
  }

  export type AddressCreateManyProfileInputEnvelope = {
    data: AddressCreateManyProfileInput | AddressCreateManyProfileInput[]
    skipDuplicates?: boolean
  }

  export type ReferralCreateWithoutProfileInput = {
    referral_code: string
    referred?: ProfileCreateNestedManyWithoutReferredInput
  }

  export type ReferralUncheckedCreateWithoutProfileInput = {
    referral_id?: number
    referral_code: string
    referred?: ProfileUncheckedCreateNestedManyWithoutReferredInput
  }

  export type ReferralCreateOrConnectWithoutProfileInput = {
    where: ReferralWhereUniqueInput
    create: XOR<ReferralCreateWithoutProfileInput, ReferralUncheckedCreateWithoutProfileInput>
  }

  export type ReferralCreateWithoutReferredInput = {
    referral_code: string
    profile?: ProfileCreateNestedOneWithoutReferralInput
  }

  export type ReferralUncheckedCreateWithoutReferredInput = {
    referral_id?: number
    referral_code: string
    profile_id?: number | null
  }

  export type ReferralCreateOrConnectWithoutReferredInput = {
    where: ReferralWhereUniqueInput
    create: XOR<ReferralCreateWithoutReferredInput, ReferralUncheckedCreateWithoutReferredInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    admin?: AdminUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
  }

  export type CartUpsertWithWhereUniqueWithoutProfileInput = {
    where: CartWhereUniqueInput
    update: XOR<CartUpdateWithoutProfileInput, CartUncheckedUpdateWithoutProfileInput>
    create: XOR<CartCreateWithoutProfileInput, CartUncheckedCreateWithoutProfileInput>
  }

  export type CartUpdateWithWhereUniqueWithoutProfileInput = {
    where: CartWhereUniqueInput
    data: XOR<CartUpdateWithoutProfileInput, CartUncheckedUpdateWithoutProfileInput>
  }

  export type CartUpdateManyWithWhereWithoutProfileInput = {
    where: CartScalarWhereInput
    data: XOR<CartUpdateManyMutationInput, CartUncheckedUpdateManyWithoutProfileInput>
  }

  export type CartScalarWhereInput = {
    AND?: CartScalarWhereInput | CartScalarWhereInput[]
    OR?: CartScalarWhereInput[]
    NOT?: CartScalarWhereInput | CartScalarWhereInput[]
    cart_id?: IntFilter<"Cart"> | number
    created_at?: DateTimeFilter<"Cart"> | Date | string
    profile_id?: IntFilter<"Cart"> | number
  }

  export type OrderUpsertWithWhereUniqueWithoutProfileInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutProfileInput, OrderUncheckedUpdateWithoutProfileInput>
    create: XOR<OrderCreateWithoutProfileInput, OrderUncheckedCreateWithoutProfileInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutProfileInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutProfileInput, OrderUncheckedUpdateWithoutProfileInput>
  }

  export type OrderUpdateManyWithWhereWithoutProfileInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutProfileInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    order_id?: IntFilter<"Order"> | number
    order_number?: StringNullableFilter<"Order"> | string | null
    store_id?: IntFilter<"Order"> | number
    address_id?: IntFilter<"Order"> | number
    total_price?: IntFilter<"Order"> | number
    shipping_price?: IntNullableFilter<"Order"> | number | null
    total_payment?: IntNullableFilter<"Order"> | number | null
    tracking_number?: StringNullableFilter<"Order"> | string | null
    discount_id?: IntNullableFilter<"Order"> | number | null
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    order_date?: DateTimeFilter<"Order"> | Date | string
    profile_id?: IntFilter<"Order"> | number
    createdAt?: DateTimeNullableFilter<"Order"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Order"> | Date | string | null
  }

  export type VoucherStoreUpsertWithWhereUniqueWithoutProfilesInput = {
    where: VoucherStoreWhereUniqueInput
    update: XOR<VoucherStoreUpdateWithoutProfilesInput, VoucherStoreUncheckedUpdateWithoutProfilesInput>
    create: XOR<VoucherStoreCreateWithoutProfilesInput, VoucherStoreUncheckedCreateWithoutProfilesInput>
  }

  export type VoucherStoreUpdateWithWhereUniqueWithoutProfilesInput = {
    where: VoucherStoreWhereUniqueInput
    data: XOR<VoucherStoreUpdateWithoutProfilesInput, VoucherStoreUncheckedUpdateWithoutProfilesInput>
  }

  export type VoucherStoreUpdateManyWithWhereWithoutProfilesInput = {
    where: VoucherStoreScalarWhereInput
    data: XOR<VoucherStoreUpdateManyMutationInput, VoucherStoreUncheckedUpdateManyWithoutProfilesInput>
  }

  export type VoucherStoreScalarWhereInput = {
    AND?: VoucherStoreScalarWhereInput | VoucherStoreScalarWhereInput[]
    OR?: VoucherStoreScalarWhereInput[]
    NOT?: VoucherStoreScalarWhereInput | VoucherStoreScalarWhereInput[]
    voucher_store_id?: IntFilter<"VoucherStore"> | number
    voucher_store_code?: StringFilter<"VoucherStore"> | string
    voucher_store_amount_percentage?: IntFilter<"VoucherStore"> | number
    voucher_store_exact_nominal?: IntFilter<"VoucherStore"> | number
    voucher_store_minimum_buy?: IntFilter<"VoucherStore"> | number
    voucher_store_maximum_nominal?: IntFilter<"VoucherStore"> | number
    voucher_store_startdate?: DateTimeFilter<"VoucherStore"> | Date | string
    voucher_store_enddate?: DateTimeFilter<"VoucherStore"> | Date | string
    created_at?: DateTimeFilter<"VoucherStore"> | Date | string
    admin_responsible?: IntFilter<"VoucherStore"> | number
    store_id?: IntFilter<"VoucherStore"> | number
  }

  export type AddressUpsertWithWhereUniqueWithoutProfileInput = {
    where: AddressWhereUniqueInput
    update: XOR<AddressUpdateWithoutProfileInput, AddressUncheckedUpdateWithoutProfileInput>
    create: XOR<AddressCreateWithoutProfileInput, AddressUncheckedCreateWithoutProfileInput>
  }

  export type AddressUpdateWithWhereUniqueWithoutProfileInput = {
    where: AddressWhereUniqueInput
    data: XOR<AddressUpdateWithoutProfileInput, AddressUncheckedUpdateWithoutProfileInput>
  }

  export type AddressUpdateManyWithWhereWithoutProfileInput = {
    where: AddressScalarWhereInput
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyWithoutProfileInput>
  }

  export type AddressScalarWhereInput = {
    AND?: AddressScalarWhereInput | AddressScalarWhereInput[]
    OR?: AddressScalarWhereInput[]
    NOT?: AddressScalarWhereInput | AddressScalarWhereInput[]
    address_id?: IntFilter<"Address"> | number
    street?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    country?: StringFilter<"Address"> | string
    lat?: StringFilter<"Address"> | string
    lng?: StringFilter<"Address"> | string
    post_code?: StringFilter<"Address"> | string
    address_name?: StringFilter<"Address"> | string
    address_contact?: StringFilter<"Address"> | string
    profile_id?: IntFilter<"Address"> | number
    deleted_at?: DateTimeNullableFilter<"Address"> | Date | string | null
  }

  export type ReferralUpsertWithoutProfileInput = {
    update: XOR<ReferralUpdateWithoutProfileInput, ReferralUncheckedUpdateWithoutProfileInput>
    create: XOR<ReferralCreateWithoutProfileInput, ReferralUncheckedCreateWithoutProfileInput>
    where?: ReferralWhereInput
  }

  export type ReferralUpdateToOneWithWhereWithoutProfileInput = {
    where?: ReferralWhereInput
    data: XOR<ReferralUpdateWithoutProfileInput, ReferralUncheckedUpdateWithoutProfileInput>
  }

  export type ReferralUpdateWithoutProfileInput = {
    referral_code?: StringFieldUpdateOperationsInput | string
    referred?: ProfileUpdateManyWithoutReferredNestedInput
  }

  export type ReferralUncheckedUpdateWithoutProfileInput = {
    referral_id?: IntFieldUpdateOperationsInput | number
    referral_code?: StringFieldUpdateOperationsInput | string
    referred?: ProfileUncheckedUpdateManyWithoutReferredNestedInput
  }

  export type ReferralUpsertWithoutReferredInput = {
    update: XOR<ReferralUpdateWithoutReferredInput, ReferralUncheckedUpdateWithoutReferredInput>
    create: XOR<ReferralCreateWithoutReferredInput, ReferralUncheckedCreateWithoutReferredInput>
    where?: ReferralWhereInput
  }

  export type ReferralUpdateToOneWithWhereWithoutReferredInput = {
    where?: ReferralWhereInput
    data: XOR<ReferralUpdateWithoutReferredInput, ReferralUncheckedUpdateWithoutReferredInput>
  }

  export type ReferralUpdateWithoutReferredInput = {
    referral_code?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneWithoutReferralNestedInput
  }

  export type ReferralUncheckedUpdateWithoutReferredInput = {
    referral_id?: IntFieldUpdateOperationsInput | number
    referral_code?: StringFieldUpdateOperationsInput | string
    profile_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProfileCreateWithoutReferralInput = {
    phone?: string | null
    pfp_url?: string | null
    user: UserCreateNestedOneWithoutProfileInput
    cart?: CartCreateNestedManyWithoutProfileInput
    orders?: OrderCreateNestedManyWithoutProfileInput
    voucher_store?: VoucherStoreCreateNestedManyWithoutProfilesInput
    Address?: AddressCreateNestedManyWithoutProfileInput
    referred?: ReferralCreateNestedOneWithoutReferredInput
  }

  export type ProfileUncheckedCreateWithoutReferralInput = {
    profile_id?: number
    user_id: string
    phone?: string | null
    pfp_url?: string | null
    referred_id?: number | null
    cart?: CartUncheckedCreateNestedManyWithoutProfileInput
    orders?: OrderUncheckedCreateNestedManyWithoutProfileInput
    voucher_store?: VoucherStoreUncheckedCreateNestedManyWithoutProfilesInput
    Address?: AddressUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutReferralInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutReferralInput, ProfileUncheckedCreateWithoutReferralInput>
  }

  export type ProfileCreateWithoutReferredInput = {
    phone?: string | null
    pfp_url?: string | null
    user: UserCreateNestedOneWithoutProfileInput
    cart?: CartCreateNestedManyWithoutProfileInput
    orders?: OrderCreateNestedManyWithoutProfileInput
    voucher_store?: VoucherStoreCreateNestedManyWithoutProfilesInput
    Address?: AddressCreateNestedManyWithoutProfileInput
    referral?: ReferralCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutReferredInput = {
    profile_id?: number
    user_id: string
    phone?: string | null
    pfp_url?: string | null
    cart?: CartUncheckedCreateNestedManyWithoutProfileInput
    orders?: OrderUncheckedCreateNestedManyWithoutProfileInput
    voucher_store?: VoucherStoreUncheckedCreateNestedManyWithoutProfilesInput
    Address?: AddressUncheckedCreateNestedManyWithoutProfileInput
    referral?: ReferralUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutReferredInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutReferredInput, ProfileUncheckedCreateWithoutReferredInput>
  }

  export type ProfileCreateManyReferredInputEnvelope = {
    data: ProfileCreateManyReferredInput | ProfileCreateManyReferredInput[]
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutReferralInput = {
    update: XOR<ProfileUpdateWithoutReferralInput, ProfileUncheckedUpdateWithoutReferralInput>
    create: XOR<ProfileCreateWithoutReferralInput, ProfileUncheckedCreateWithoutReferralInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutReferralInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutReferralInput, ProfileUncheckedUpdateWithoutReferralInput>
  }

  export type ProfileUpdateWithoutReferralInput = {
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    cart?: CartUpdateManyWithoutProfileNestedInput
    orders?: OrderUpdateManyWithoutProfileNestedInput
    voucher_store?: VoucherStoreUpdateManyWithoutProfilesNestedInput
    Address?: AddressUpdateManyWithoutProfileNestedInput
    referred?: ReferralUpdateOneWithoutReferredNestedInput
  }

  export type ProfileUncheckedUpdateWithoutReferralInput = {
    profile_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
    referred_id?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: CartUncheckedUpdateManyWithoutProfileNestedInput
    orders?: OrderUncheckedUpdateManyWithoutProfileNestedInput
    voucher_store?: VoucherStoreUncheckedUpdateManyWithoutProfilesNestedInput
    Address?: AddressUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUpsertWithWhereUniqueWithoutReferredInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutReferredInput, ProfileUncheckedUpdateWithoutReferredInput>
    create: XOR<ProfileCreateWithoutReferredInput, ProfileUncheckedCreateWithoutReferredInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutReferredInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutReferredInput, ProfileUncheckedUpdateWithoutReferredInput>
  }

  export type ProfileUpdateManyWithWhereWithoutReferredInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutReferredInput>
  }

  export type ProfileScalarWhereInput = {
    AND?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    OR?: ProfileScalarWhereInput[]
    NOT?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    profile_id?: IntFilter<"Profile"> | number
    user_id?: StringFilter<"Profile"> | string
    phone?: StringNullableFilter<"Profile"> | string | null
    pfp_url?: StringNullableFilter<"Profile"> | string | null
    referred_id?: IntNullableFilter<"Profile"> | number | null
  }

  export type OrderCreateWithoutAddressInput = {
    order_number?: string | null
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    status: $Enums.OrderStatus
    order_date: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile: ProfileCreateNestedOneWithoutOrdersInput
    store: StoreCreateNestedOneWithoutOrdersInput
    discount?: DiscountCreateNestedOneWithoutOrdersInput
    order_cancel?: OrderCancelCreateNestedOneWithoutOrderInput
    admin_orders?: AdminOrderCreateNestedManyWithoutOrderInput
    order_items?: OrderItemCreateNestedManyWithoutOrderInput
    payment_proof?: PaymentProofCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutAddressInput = {
    order_id?: number
    order_number?: string | null
    store_id: number
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    discount_id?: number | null
    status: $Enums.OrderStatus
    order_date: Date | string
    profile_id: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    order_cancel?: OrderCancelUncheckedCreateNestedOneWithoutOrderInput
    admin_orders?: AdminOrderUncheckedCreateNestedManyWithoutOrderInput
    order_items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    payment_proof?: PaymentProofUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutAddressInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutAddressInput, OrderUncheckedCreateWithoutAddressInput>
  }

  export type OrderCreateManyAddressInputEnvelope = {
    data: OrderCreateManyAddressInput | OrderCreateManyAddressInput[]
    skipDuplicates?: boolean
  }

  export type ProfileCreateWithoutAddressInput = {
    phone?: string | null
    pfp_url?: string | null
    user: UserCreateNestedOneWithoutProfileInput
    cart?: CartCreateNestedManyWithoutProfileInput
    orders?: OrderCreateNestedManyWithoutProfileInput
    voucher_store?: VoucherStoreCreateNestedManyWithoutProfilesInput
    referral?: ReferralCreateNestedOneWithoutProfileInput
    referred?: ReferralCreateNestedOneWithoutReferredInput
  }

  export type ProfileUncheckedCreateWithoutAddressInput = {
    profile_id?: number
    user_id: string
    phone?: string | null
    pfp_url?: string | null
    referred_id?: number | null
    cart?: CartUncheckedCreateNestedManyWithoutProfileInput
    orders?: OrderUncheckedCreateNestedManyWithoutProfileInput
    voucher_store?: VoucherStoreUncheckedCreateNestedManyWithoutProfilesInput
    referral?: ReferralUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutAddressInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutAddressInput, ProfileUncheckedCreateWithoutAddressInput>
  }

  export type OrderUpsertWithWhereUniqueWithoutAddressInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutAddressInput, OrderUncheckedUpdateWithoutAddressInput>
    create: XOR<OrderCreateWithoutAddressInput, OrderUncheckedCreateWithoutAddressInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutAddressInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutAddressInput, OrderUncheckedUpdateWithoutAddressInput>
  }

  export type OrderUpdateManyWithWhereWithoutAddressInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutAddressInput>
  }

  export type ProfileUpsertWithoutAddressInput = {
    update: XOR<ProfileUpdateWithoutAddressInput, ProfileUncheckedUpdateWithoutAddressInput>
    create: XOR<ProfileCreateWithoutAddressInput, ProfileUncheckedCreateWithoutAddressInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutAddressInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutAddressInput, ProfileUncheckedUpdateWithoutAddressInput>
  }

  export type ProfileUpdateWithoutAddressInput = {
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    cart?: CartUpdateManyWithoutProfileNestedInput
    orders?: OrderUpdateManyWithoutProfileNestedInput
    voucher_store?: VoucherStoreUpdateManyWithoutProfilesNestedInput
    referral?: ReferralUpdateOneWithoutProfileNestedInput
    referred?: ReferralUpdateOneWithoutReferredNestedInput
  }

  export type ProfileUncheckedUpdateWithoutAddressInput = {
    profile_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
    referred_id?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: CartUncheckedUpdateManyWithoutProfileNestedInput
    orders?: OrderUncheckedUpdateManyWithoutProfileNestedInput
    voucher_store?: VoucherStoreUncheckedUpdateManyWithoutProfilesNestedInput
    referral?: ReferralUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type UserCreateWithoutAdminInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.Role
    updateAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdminInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.Role
    updateAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdminInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
  }

  export type StoreCreateWithoutAdminInput = {
    store_name: string
    store_address: string
    country: string
    city: string
    lat: string
    lng: string
    isActive?: boolean
    orders?: OrderCreateNestedManyWithoutStoreInput
    stock?: StockCreateNestedManyWithoutStoreInput
    stock_journal?: StockJournalCreateNestedManyWithoutStoreInput
    voucher_ongkir?: VoucherOngkirCreateNestedOneWithoutStoreInput
    voucher_stores?: VoucherStoreCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutAdminInput = {
    store_id?: number
    store_name: string
    store_address: string
    country: string
    city: string
    lat: string
    lng: string
    isActive?: boolean
    orders?: OrderUncheckedCreateNestedManyWithoutStoreInput
    stock?: StockUncheckedCreateNestedManyWithoutStoreInput
    stock_journal?: StockJournalUncheckedCreateNestedManyWithoutStoreInput
    voucher_ongkir?: VoucherOngkirUncheckedCreateNestedOneWithoutStoreInput
    voucher_stores?: VoucherStoreUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutAdminInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutAdminInput, StoreUncheckedCreateWithoutAdminInput>
  }

  export type AdminOrderCreateWithoutAdminInput = {
    action: $Enums.ActionEnum
    action_time: Date | string
    order: OrderCreateNestedOneWithoutAdmin_ordersInput
  }

  export type AdminOrderUncheckedCreateWithoutAdminInput = {
    admin_order_id?: number
    order_id: number
    action: $Enums.ActionEnum
    action_time: Date | string
  }

  export type AdminOrderCreateOrConnectWithoutAdminInput = {
    where: AdminOrderWhereUniqueInput
    create: XOR<AdminOrderCreateWithoutAdminInput, AdminOrderUncheckedCreateWithoutAdminInput>
  }

  export type AdminOrderCreateManyAdminInputEnvelope = {
    data: AdminOrderCreateManyAdminInput | AdminOrderCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type VoucherOngkirCreateWithoutAdminInput = {
    voucher_ongkir_code: string
    voucher_ongkir_nominal: number
    voucher_ongkir_startdate: Date | string
    voucher_ongkir_enddate: Date | string
    created_at: Date | string
    store: StoreCreateNestedOneWithoutVoucher_ongkirInput
  }

  export type VoucherOngkirUncheckedCreateWithoutAdminInput = {
    voucher_ongkir_id?: number
    voucher_ongkir_code: string
    voucher_ongkir_nominal: number
    voucher_ongkir_startdate: Date | string
    voucher_ongkir_enddate: Date | string
    created_at: Date | string
    store_id: number
  }

  export type VoucherOngkirCreateOrConnectWithoutAdminInput = {
    where: VoucherOngkirWhereUniqueInput
    create: XOR<VoucherOngkirCreateWithoutAdminInput, VoucherOngkirUncheckedCreateWithoutAdminInput>
  }

  export type VoucherOngkirCreateManyAdminInputEnvelope = {
    data: VoucherOngkirCreateManyAdminInput | VoucherOngkirCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type VoucherProductCreateWithoutAdminInput = {
    voucher_product_code: string
    voucher_product_nominal: number
    voucher_product_startdate: Date | string
    voucher_product_enddate: Date | string
    created_at: Date | string
    product: ProductCreateNestedOneWithoutVoucherInput
  }

  export type VoucherProductUncheckedCreateWithoutAdminInput = {
    voucher_product_id?: number
    voucher_product_code: string
    voucher_product_nominal: number
    voucher_product_startdate: Date | string
    voucher_product_enddate: Date | string
    created_at: Date | string
    product_id: number
  }

  export type VoucherProductCreateOrConnectWithoutAdminInput = {
    where: VoucherProductWhereUniqueInput
    create: XOR<VoucherProductCreateWithoutAdminInput, VoucherProductUncheckedCreateWithoutAdminInput>
  }

  export type VoucherProductCreateManyAdminInputEnvelope = {
    data: VoucherProductCreateManyAdminInput | VoucherProductCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type VoucherStoreCreateWithoutAdminInput = {
    voucher_store_code: string
    voucher_store_amount_percentage: number
    voucher_store_exact_nominal: number
    voucher_store_minimum_buy: number
    voucher_store_maximum_nominal: number
    voucher_store_startdate: Date | string
    voucher_store_enddate: Date | string
    created_at: Date | string
    store: StoreCreateNestedOneWithoutVoucher_storesInput
    profiles?: ProfileCreateNestedManyWithoutVoucher_storeInput
  }

  export type VoucherStoreUncheckedCreateWithoutAdminInput = {
    voucher_store_id?: number
    voucher_store_code: string
    voucher_store_amount_percentage: number
    voucher_store_exact_nominal: number
    voucher_store_minimum_buy: number
    voucher_store_maximum_nominal: number
    voucher_store_startdate: Date | string
    voucher_store_enddate: Date | string
    created_at: Date | string
    store_id: number
    profiles?: ProfileUncheckedCreateNestedManyWithoutVoucher_storeInput
  }

  export type VoucherStoreCreateOrConnectWithoutAdminInput = {
    where: VoucherStoreWhereUniqueInput
    create: XOR<VoucherStoreCreateWithoutAdminInput, VoucherStoreUncheckedCreateWithoutAdminInput>
  }

  export type VoucherStoreCreateManyAdminInputEnvelope = {
    data: VoucherStoreCreateManyAdminInput | VoucherStoreCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAdminInput = {
    update: XOR<UserUpdateWithoutAdminInput, UserUncheckedUpdateWithoutAdminInput>
    create: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminInput, UserUncheckedUpdateWithoutAdminInput>
  }

  export type UserUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type StoreUpsertWithoutAdminInput = {
    update: XOR<StoreUpdateWithoutAdminInput, StoreUncheckedUpdateWithoutAdminInput>
    create: XOR<StoreCreateWithoutAdminInput, StoreUncheckedCreateWithoutAdminInput>
    where?: StoreWhereInput
  }

  export type StoreUpdateToOneWithWhereWithoutAdminInput = {
    where?: StoreWhereInput
    data: XOR<StoreUpdateWithoutAdminInput, StoreUncheckedUpdateWithoutAdminInput>
  }

  export type StoreUpdateWithoutAdminInput = {
    store_name?: StringFieldUpdateOperationsInput | string
    store_address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUpdateManyWithoutStoreNestedInput
    stock?: StockUpdateManyWithoutStoreNestedInput
    stock_journal?: StockJournalUpdateManyWithoutStoreNestedInput
    voucher_ongkir?: VoucherOngkirUpdateOneWithoutStoreNestedInput
    voucher_stores?: VoucherStoreUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutAdminInput = {
    store_id?: IntFieldUpdateOperationsInput | number
    store_name?: StringFieldUpdateOperationsInput | string
    store_address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUncheckedUpdateManyWithoutStoreNestedInput
    stock?: StockUncheckedUpdateManyWithoutStoreNestedInput
    stock_journal?: StockJournalUncheckedUpdateManyWithoutStoreNestedInput
    voucher_ongkir?: VoucherOngkirUncheckedUpdateOneWithoutStoreNestedInput
    voucher_stores?: VoucherStoreUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type AdminOrderUpsertWithWhereUniqueWithoutAdminInput = {
    where: AdminOrderWhereUniqueInput
    update: XOR<AdminOrderUpdateWithoutAdminInput, AdminOrderUncheckedUpdateWithoutAdminInput>
    create: XOR<AdminOrderCreateWithoutAdminInput, AdminOrderUncheckedCreateWithoutAdminInput>
  }

  export type AdminOrderUpdateWithWhereUniqueWithoutAdminInput = {
    where: AdminOrderWhereUniqueInput
    data: XOR<AdminOrderUpdateWithoutAdminInput, AdminOrderUncheckedUpdateWithoutAdminInput>
  }

  export type AdminOrderUpdateManyWithWhereWithoutAdminInput = {
    where: AdminOrderScalarWhereInput
    data: XOR<AdminOrderUpdateManyMutationInput, AdminOrderUncheckedUpdateManyWithoutAdminInput>
  }

  export type AdminOrderScalarWhereInput = {
    AND?: AdminOrderScalarWhereInput | AdminOrderScalarWhereInput[]
    OR?: AdminOrderScalarWhereInput[]
    NOT?: AdminOrderScalarWhereInput | AdminOrderScalarWhereInput[]
    admin_order_id?: IntFilter<"AdminOrder"> | number
    admin_id?: IntFilter<"AdminOrder"> | number
    order_id?: IntFilter<"AdminOrder"> | number
    action?: EnumActionEnumFilter<"AdminOrder"> | $Enums.ActionEnum
    action_time?: DateTimeFilter<"AdminOrder"> | Date | string
  }

  export type VoucherOngkirUpsertWithWhereUniqueWithoutAdminInput = {
    where: VoucherOngkirWhereUniqueInput
    update: XOR<VoucherOngkirUpdateWithoutAdminInput, VoucherOngkirUncheckedUpdateWithoutAdminInput>
    create: XOR<VoucherOngkirCreateWithoutAdminInput, VoucherOngkirUncheckedCreateWithoutAdminInput>
  }

  export type VoucherOngkirUpdateWithWhereUniqueWithoutAdminInput = {
    where: VoucherOngkirWhereUniqueInput
    data: XOR<VoucherOngkirUpdateWithoutAdminInput, VoucherOngkirUncheckedUpdateWithoutAdminInput>
  }

  export type VoucherOngkirUpdateManyWithWhereWithoutAdminInput = {
    where: VoucherOngkirScalarWhereInput
    data: XOR<VoucherOngkirUpdateManyMutationInput, VoucherOngkirUncheckedUpdateManyWithoutAdminInput>
  }

  export type VoucherOngkirScalarWhereInput = {
    AND?: VoucherOngkirScalarWhereInput | VoucherOngkirScalarWhereInput[]
    OR?: VoucherOngkirScalarWhereInput[]
    NOT?: VoucherOngkirScalarWhereInput | VoucherOngkirScalarWhereInput[]
    voucher_ongkir_id?: IntFilter<"VoucherOngkir"> | number
    voucher_ongkir_code?: StringFilter<"VoucherOngkir"> | string
    voucher_ongkir_nominal?: IntFilter<"VoucherOngkir"> | number
    voucher_ongkir_startdate?: DateTimeFilter<"VoucherOngkir"> | Date | string
    voucher_ongkir_enddate?: DateTimeFilter<"VoucherOngkir"> | Date | string
    created_at?: DateTimeFilter<"VoucherOngkir"> | Date | string
    admin_responsible?: IntFilter<"VoucherOngkir"> | number
    store_id?: IntFilter<"VoucherOngkir"> | number
  }

  export type VoucherProductUpsertWithWhereUniqueWithoutAdminInput = {
    where: VoucherProductWhereUniqueInput
    update: XOR<VoucherProductUpdateWithoutAdminInput, VoucherProductUncheckedUpdateWithoutAdminInput>
    create: XOR<VoucherProductCreateWithoutAdminInput, VoucherProductUncheckedCreateWithoutAdminInput>
  }

  export type VoucherProductUpdateWithWhereUniqueWithoutAdminInput = {
    where: VoucherProductWhereUniqueInput
    data: XOR<VoucherProductUpdateWithoutAdminInput, VoucherProductUncheckedUpdateWithoutAdminInput>
  }

  export type VoucherProductUpdateManyWithWhereWithoutAdminInput = {
    where: VoucherProductScalarWhereInput
    data: XOR<VoucherProductUpdateManyMutationInput, VoucherProductUncheckedUpdateManyWithoutAdminInput>
  }

  export type VoucherProductScalarWhereInput = {
    AND?: VoucherProductScalarWhereInput | VoucherProductScalarWhereInput[]
    OR?: VoucherProductScalarWhereInput[]
    NOT?: VoucherProductScalarWhereInput | VoucherProductScalarWhereInput[]
    voucher_product_id?: IntFilter<"VoucherProduct"> | number
    voucher_product_code?: StringFilter<"VoucherProduct"> | string
    voucher_product_nominal?: IntFilter<"VoucherProduct"> | number
    voucher_product_startdate?: DateTimeFilter<"VoucherProduct"> | Date | string
    voucher_product_enddate?: DateTimeFilter<"VoucherProduct"> | Date | string
    created_at?: DateTimeFilter<"VoucherProduct"> | Date | string
    admin_responsible?: IntFilter<"VoucherProduct"> | number
    product_id?: IntFilter<"VoucherProduct"> | number
  }

  export type VoucherStoreUpsertWithWhereUniqueWithoutAdminInput = {
    where: VoucherStoreWhereUniqueInput
    update: XOR<VoucherStoreUpdateWithoutAdminInput, VoucherStoreUncheckedUpdateWithoutAdminInput>
    create: XOR<VoucherStoreCreateWithoutAdminInput, VoucherStoreUncheckedCreateWithoutAdminInput>
  }

  export type VoucherStoreUpdateWithWhereUniqueWithoutAdminInput = {
    where: VoucherStoreWhereUniqueInput
    data: XOR<VoucherStoreUpdateWithoutAdminInput, VoucherStoreUncheckedUpdateWithoutAdminInput>
  }

  export type VoucherStoreUpdateManyWithWhereWithoutAdminInput = {
    where: VoucherStoreScalarWhereInput
    data: XOR<VoucherStoreUpdateManyMutationInput, VoucherStoreUncheckedUpdateManyWithoutAdminInput>
  }

  export type OrderCreateWithoutStoreInput = {
    order_number?: string | null
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    status: $Enums.OrderStatus
    order_date: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    address: AddressCreateNestedOneWithoutOrdersInput
    profile: ProfileCreateNestedOneWithoutOrdersInput
    discount?: DiscountCreateNestedOneWithoutOrdersInput
    order_cancel?: OrderCancelCreateNestedOneWithoutOrderInput
    admin_orders?: AdminOrderCreateNestedManyWithoutOrderInput
    order_items?: OrderItemCreateNestedManyWithoutOrderInput
    payment_proof?: PaymentProofCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutStoreInput = {
    order_id?: number
    order_number?: string | null
    address_id: number
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    discount_id?: number | null
    status: $Enums.OrderStatus
    order_date: Date | string
    profile_id: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    order_cancel?: OrderCancelUncheckedCreateNestedOneWithoutOrderInput
    admin_orders?: AdminOrderUncheckedCreateNestedManyWithoutOrderInput
    order_items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    payment_proof?: PaymentProofUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutStoreInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutStoreInput, OrderUncheckedCreateWithoutStoreInput>
  }

  export type OrderCreateManyStoreInputEnvelope = {
    data: OrderCreateManyStoreInput | OrderCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type AdminCreateWithoutStoreInput = {
    phone: string
    position: string
    deleted_at?: Date | string | null
    user: UserCreateNestedOneWithoutAdminInput
    admin_orders?: AdminOrderCreateNestedManyWithoutAdminInput
    voucher_ongkir?: VoucherOngkirCreateNestedManyWithoutAdminInput
    voucher_product?: VoucherProductCreateNestedManyWithoutAdminInput
    voucher_store?: VoucherStoreCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutStoreInput = {
    admin_id?: number
    user_id: string
    phone: string
    position: string
    deleted_at?: Date | string | null
    admin_orders?: AdminOrderUncheckedCreateNestedManyWithoutAdminInput
    voucher_ongkir?: VoucherOngkirUncheckedCreateNestedManyWithoutAdminInput
    voucher_product?: VoucherProductUncheckedCreateNestedManyWithoutAdminInput
    voucher_store?: VoucherStoreUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminCreateOrConnectWithoutStoreInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutStoreInput, AdminUncheckedCreateWithoutStoreInput>
  }

  export type AdminCreateManyStoreInputEnvelope = {
    data: AdminCreateManyStoreInput | AdminCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type StockCreateWithoutStoreInput = {
    quantity: number
    product: ProductCreateNestedOneWithoutStockInput
    stock_journal?: StockJournalCreateNestedManyWithoutStockInput
  }

  export type StockUncheckedCreateWithoutStoreInput = {
    stock_id?: number
    product_id: number
    quantity: number
    stock_journal?: StockJournalUncheckedCreateNestedManyWithoutStockInput
  }

  export type StockCreateOrConnectWithoutStoreInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutStoreInput, StockUncheckedCreateWithoutStoreInput>
  }

  export type StockCreateManyStoreInputEnvelope = {
    data: StockCreateManyStoreInput | StockCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type StockJournalCreateWithoutStoreInput = {
    product_id: string
    quantity: number
    type: string
    notes: string
    created_at: Date | string
    stock: StockCreateNestedOneWithoutStock_journalInput
  }

  export type StockJournalUncheckedCreateWithoutStoreInput = {
    stock_journal_id?: number
    stock_id: number
    product_id: string
    quantity: number
    type: string
    notes: string
    created_at: Date | string
  }

  export type StockJournalCreateOrConnectWithoutStoreInput = {
    where: StockJournalWhereUniqueInput
    create: XOR<StockJournalCreateWithoutStoreInput, StockJournalUncheckedCreateWithoutStoreInput>
  }

  export type StockJournalCreateManyStoreInputEnvelope = {
    data: StockJournalCreateManyStoreInput | StockJournalCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type VoucherOngkirCreateWithoutStoreInput = {
    voucher_ongkir_code: string
    voucher_ongkir_nominal: number
    voucher_ongkir_startdate: Date | string
    voucher_ongkir_enddate: Date | string
    created_at: Date | string
    admin: AdminCreateNestedOneWithoutVoucher_ongkirInput
  }

  export type VoucherOngkirUncheckedCreateWithoutStoreInput = {
    voucher_ongkir_id?: number
    voucher_ongkir_code: string
    voucher_ongkir_nominal: number
    voucher_ongkir_startdate: Date | string
    voucher_ongkir_enddate: Date | string
    created_at: Date | string
    admin_responsible: number
  }

  export type VoucherOngkirCreateOrConnectWithoutStoreInput = {
    where: VoucherOngkirWhereUniqueInput
    create: XOR<VoucherOngkirCreateWithoutStoreInput, VoucherOngkirUncheckedCreateWithoutStoreInput>
  }

  export type VoucherStoreCreateWithoutStoreInput = {
    voucher_store_code: string
    voucher_store_amount_percentage: number
    voucher_store_exact_nominal: number
    voucher_store_minimum_buy: number
    voucher_store_maximum_nominal: number
    voucher_store_startdate: Date | string
    voucher_store_enddate: Date | string
    created_at: Date | string
    admin: AdminCreateNestedOneWithoutVoucher_storeInput
    profiles?: ProfileCreateNestedManyWithoutVoucher_storeInput
  }

  export type VoucherStoreUncheckedCreateWithoutStoreInput = {
    voucher_store_id?: number
    voucher_store_code: string
    voucher_store_amount_percentage: number
    voucher_store_exact_nominal: number
    voucher_store_minimum_buy: number
    voucher_store_maximum_nominal: number
    voucher_store_startdate: Date | string
    voucher_store_enddate: Date | string
    created_at: Date | string
    admin_responsible: number
    profiles?: ProfileUncheckedCreateNestedManyWithoutVoucher_storeInput
  }

  export type VoucherStoreCreateOrConnectWithoutStoreInput = {
    where: VoucherStoreWhereUniqueInput
    create: XOR<VoucherStoreCreateWithoutStoreInput, VoucherStoreUncheckedCreateWithoutStoreInput>
  }

  export type VoucherStoreCreateManyStoreInputEnvelope = {
    data: VoucherStoreCreateManyStoreInput | VoucherStoreCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type OrderUpsertWithWhereUniqueWithoutStoreInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutStoreInput, OrderUncheckedUpdateWithoutStoreInput>
    create: XOR<OrderCreateWithoutStoreInput, OrderUncheckedCreateWithoutStoreInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutStoreInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutStoreInput, OrderUncheckedUpdateWithoutStoreInput>
  }

  export type OrderUpdateManyWithWhereWithoutStoreInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutStoreInput>
  }

  export type AdminUpsertWithWhereUniqueWithoutStoreInput = {
    where: AdminWhereUniqueInput
    update: XOR<AdminUpdateWithoutStoreInput, AdminUncheckedUpdateWithoutStoreInput>
    create: XOR<AdminCreateWithoutStoreInput, AdminUncheckedCreateWithoutStoreInput>
  }

  export type AdminUpdateWithWhereUniqueWithoutStoreInput = {
    where: AdminWhereUniqueInput
    data: XOR<AdminUpdateWithoutStoreInput, AdminUncheckedUpdateWithoutStoreInput>
  }

  export type AdminUpdateManyWithWhereWithoutStoreInput = {
    where: AdminScalarWhereInput
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyWithoutStoreInput>
  }

  export type AdminScalarWhereInput = {
    AND?: AdminScalarWhereInput | AdminScalarWhereInput[]
    OR?: AdminScalarWhereInput[]
    NOT?: AdminScalarWhereInput | AdminScalarWhereInput[]
    admin_id?: IntFilter<"Admin"> | number
    user_id?: StringFilter<"Admin"> | string
    store_id?: IntFilter<"Admin"> | number
    phone?: StringFilter<"Admin"> | string
    position?: StringFilter<"Admin"> | string
    deleted_at?: DateTimeNullableFilter<"Admin"> | Date | string | null
  }

  export type StockUpsertWithWhereUniqueWithoutStoreInput = {
    where: StockWhereUniqueInput
    update: XOR<StockUpdateWithoutStoreInput, StockUncheckedUpdateWithoutStoreInput>
    create: XOR<StockCreateWithoutStoreInput, StockUncheckedCreateWithoutStoreInput>
  }

  export type StockUpdateWithWhereUniqueWithoutStoreInput = {
    where: StockWhereUniqueInput
    data: XOR<StockUpdateWithoutStoreInput, StockUncheckedUpdateWithoutStoreInput>
  }

  export type StockUpdateManyWithWhereWithoutStoreInput = {
    where: StockScalarWhereInput
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyWithoutStoreInput>
  }

  export type StockScalarWhereInput = {
    AND?: StockScalarWhereInput | StockScalarWhereInput[]
    OR?: StockScalarWhereInput[]
    NOT?: StockScalarWhereInput | StockScalarWhereInput[]
    stock_id?: IntFilter<"Stock"> | number
    store_id?: IntFilter<"Stock"> | number
    product_id?: IntFilter<"Stock"> | number
    quantity?: IntFilter<"Stock"> | number
  }

  export type StockJournalUpsertWithWhereUniqueWithoutStoreInput = {
    where: StockJournalWhereUniqueInput
    update: XOR<StockJournalUpdateWithoutStoreInput, StockJournalUncheckedUpdateWithoutStoreInput>
    create: XOR<StockJournalCreateWithoutStoreInput, StockJournalUncheckedCreateWithoutStoreInput>
  }

  export type StockJournalUpdateWithWhereUniqueWithoutStoreInput = {
    where: StockJournalWhereUniqueInput
    data: XOR<StockJournalUpdateWithoutStoreInput, StockJournalUncheckedUpdateWithoutStoreInput>
  }

  export type StockJournalUpdateManyWithWhereWithoutStoreInput = {
    where: StockJournalScalarWhereInput
    data: XOR<StockJournalUpdateManyMutationInput, StockJournalUncheckedUpdateManyWithoutStoreInput>
  }

  export type StockJournalScalarWhereInput = {
    AND?: StockJournalScalarWhereInput | StockJournalScalarWhereInput[]
    OR?: StockJournalScalarWhereInput[]
    NOT?: StockJournalScalarWhereInput | StockJournalScalarWhereInput[]
    stock_journal_id?: IntFilter<"StockJournal"> | number
    store_id?: IntFilter<"StockJournal"> | number
    stock_id?: IntFilter<"StockJournal"> | number
    product_id?: StringFilter<"StockJournal"> | string
    quantity?: IntFilter<"StockJournal"> | number
    type?: StringFilter<"StockJournal"> | string
    notes?: StringFilter<"StockJournal"> | string
    created_at?: DateTimeFilter<"StockJournal"> | Date | string
  }

  export type VoucherOngkirUpsertWithoutStoreInput = {
    update: XOR<VoucherOngkirUpdateWithoutStoreInput, VoucherOngkirUncheckedUpdateWithoutStoreInput>
    create: XOR<VoucherOngkirCreateWithoutStoreInput, VoucherOngkirUncheckedCreateWithoutStoreInput>
    where?: VoucherOngkirWhereInput
  }

  export type VoucherOngkirUpdateToOneWithWhereWithoutStoreInput = {
    where?: VoucherOngkirWhereInput
    data: XOR<VoucherOngkirUpdateWithoutStoreInput, VoucherOngkirUncheckedUpdateWithoutStoreInput>
  }

  export type VoucherOngkirUpdateWithoutStoreInput = {
    voucher_ongkir_code?: StringFieldUpdateOperationsInput | string
    voucher_ongkir_nominal?: IntFieldUpdateOperationsInput | number
    voucher_ongkir_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_ongkir_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUpdateOneRequiredWithoutVoucher_ongkirNestedInput
  }

  export type VoucherOngkirUncheckedUpdateWithoutStoreInput = {
    voucher_ongkir_id?: IntFieldUpdateOperationsInput | number
    voucher_ongkir_code?: StringFieldUpdateOperationsInput | string
    voucher_ongkir_nominal?: IntFieldUpdateOperationsInput | number
    voucher_ongkir_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_ongkir_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin_responsible?: IntFieldUpdateOperationsInput | number
  }

  export type VoucherStoreUpsertWithWhereUniqueWithoutStoreInput = {
    where: VoucherStoreWhereUniqueInput
    update: XOR<VoucherStoreUpdateWithoutStoreInput, VoucherStoreUncheckedUpdateWithoutStoreInput>
    create: XOR<VoucherStoreCreateWithoutStoreInput, VoucherStoreUncheckedCreateWithoutStoreInput>
  }

  export type VoucherStoreUpdateWithWhereUniqueWithoutStoreInput = {
    where: VoucherStoreWhereUniqueInput
    data: XOR<VoucherStoreUpdateWithoutStoreInput, VoucherStoreUncheckedUpdateWithoutStoreInput>
  }

  export type VoucherStoreUpdateManyWithWhereWithoutStoreInput = {
    where: VoucherStoreScalarWhereInput
    data: XOR<VoucherStoreUpdateManyMutationInput, VoucherStoreUncheckedUpdateManyWithoutStoreInput>
  }

  export type ProductCreateWithoutStockInput = {
    product_name: string
    product_price: number
    product_description?: string | null
    deletedAt?: Date | string | null
    cart_items?: CartItemCreateNestedManyWithoutProductInput
    order_items?: OrderItemCreateNestedManyWithoutProductInput
    product_category: ProductCategoryCreateNestedOneWithoutProductInput
    product_img?: ProductImgCreateNestedManyWithoutProductInput
    voucher?: VoucherProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutStockInput = {
    product_id?: number
    product_name: string
    product_price: number
    product_category_id: number
    product_description?: string | null
    deletedAt?: Date | string | null
    cart_items?: CartItemUncheckedCreateNestedManyWithoutProductInput
    order_items?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    product_img?: ProductImgUncheckedCreateNestedManyWithoutProductInput
    voucher?: VoucherProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutStockInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutStockInput, ProductUncheckedCreateWithoutStockInput>
  }

  export type StoreCreateWithoutStockInput = {
    store_name: string
    store_address: string
    country: string
    city: string
    lat: string
    lng: string
    isActive?: boolean
    orders?: OrderCreateNestedManyWithoutStoreInput
    admin?: AdminCreateNestedManyWithoutStoreInput
    stock_journal?: StockJournalCreateNestedManyWithoutStoreInput
    voucher_ongkir?: VoucherOngkirCreateNestedOneWithoutStoreInput
    voucher_stores?: VoucherStoreCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutStockInput = {
    store_id?: number
    store_name: string
    store_address: string
    country: string
    city: string
    lat: string
    lng: string
    isActive?: boolean
    orders?: OrderUncheckedCreateNestedManyWithoutStoreInput
    admin?: AdminUncheckedCreateNestedManyWithoutStoreInput
    stock_journal?: StockJournalUncheckedCreateNestedManyWithoutStoreInput
    voucher_ongkir?: VoucherOngkirUncheckedCreateNestedOneWithoutStoreInput
    voucher_stores?: VoucherStoreUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutStockInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutStockInput, StoreUncheckedCreateWithoutStockInput>
  }

  export type StockJournalCreateWithoutStockInput = {
    product_id: string
    quantity: number
    type: string
    notes: string
    created_at: Date | string
    store: StoreCreateNestedOneWithoutStock_journalInput
  }

  export type StockJournalUncheckedCreateWithoutStockInput = {
    stock_journal_id?: number
    store_id: number
    product_id: string
    quantity: number
    type: string
    notes: string
    created_at: Date | string
  }

  export type StockJournalCreateOrConnectWithoutStockInput = {
    where: StockJournalWhereUniqueInput
    create: XOR<StockJournalCreateWithoutStockInput, StockJournalUncheckedCreateWithoutStockInput>
  }

  export type StockJournalCreateManyStockInputEnvelope = {
    data: StockJournalCreateManyStockInput | StockJournalCreateManyStockInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithoutStockInput = {
    update: XOR<ProductUpdateWithoutStockInput, ProductUncheckedUpdateWithoutStockInput>
    create: XOR<ProductCreateWithoutStockInput, ProductUncheckedCreateWithoutStockInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutStockInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutStockInput, ProductUncheckedUpdateWithoutStockInput>
  }

  export type ProductUpdateWithoutStockInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    product_description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cart_items?: CartItemUpdateManyWithoutProductNestedInput
    order_items?: OrderItemUpdateManyWithoutProductNestedInput
    product_category?: ProductCategoryUpdateOneRequiredWithoutProductNestedInput
    product_img?: ProductImgUpdateManyWithoutProductNestedInput
    voucher?: VoucherProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutStockInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    product_category_id?: IntFieldUpdateOperationsInput | number
    product_description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cart_items?: CartItemUncheckedUpdateManyWithoutProductNestedInput
    order_items?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    product_img?: ProductImgUncheckedUpdateManyWithoutProductNestedInput
    voucher?: VoucherProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type StoreUpsertWithoutStockInput = {
    update: XOR<StoreUpdateWithoutStockInput, StoreUncheckedUpdateWithoutStockInput>
    create: XOR<StoreCreateWithoutStockInput, StoreUncheckedCreateWithoutStockInput>
    where?: StoreWhereInput
  }

  export type StoreUpdateToOneWithWhereWithoutStockInput = {
    where?: StoreWhereInput
    data: XOR<StoreUpdateWithoutStockInput, StoreUncheckedUpdateWithoutStockInput>
  }

  export type StoreUpdateWithoutStockInput = {
    store_name?: StringFieldUpdateOperationsInput | string
    store_address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUpdateManyWithoutStoreNestedInput
    admin?: AdminUpdateManyWithoutStoreNestedInput
    stock_journal?: StockJournalUpdateManyWithoutStoreNestedInput
    voucher_ongkir?: VoucherOngkirUpdateOneWithoutStoreNestedInput
    voucher_stores?: VoucherStoreUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutStockInput = {
    store_id?: IntFieldUpdateOperationsInput | number
    store_name?: StringFieldUpdateOperationsInput | string
    store_address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUncheckedUpdateManyWithoutStoreNestedInput
    admin?: AdminUncheckedUpdateManyWithoutStoreNestedInput
    stock_journal?: StockJournalUncheckedUpdateManyWithoutStoreNestedInput
    voucher_ongkir?: VoucherOngkirUncheckedUpdateOneWithoutStoreNestedInput
    voucher_stores?: VoucherStoreUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type StockJournalUpsertWithWhereUniqueWithoutStockInput = {
    where: StockJournalWhereUniqueInput
    update: XOR<StockJournalUpdateWithoutStockInput, StockJournalUncheckedUpdateWithoutStockInput>
    create: XOR<StockJournalCreateWithoutStockInput, StockJournalUncheckedCreateWithoutStockInput>
  }

  export type StockJournalUpdateWithWhereUniqueWithoutStockInput = {
    where: StockJournalWhereUniqueInput
    data: XOR<StockJournalUpdateWithoutStockInput, StockJournalUncheckedUpdateWithoutStockInput>
  }

  export type StockJournalUpdateManyWithWhereWithoutStockInput = {
    where: StockJournalScalarWhereInput
    data: XOR<StockJournalUpdateManyMutationInput, StockJournalUncheckedUpdateManyWithoutStockInput>
  }

  export type StockCreateWithoutStock_journalInput = {
    quantity: number
    product: ProductCreateNestedOneWithoutStockInput
    store: StoreCreateNestedOneWithoutStockInput
  }

  export type StockUncheckedCreateWithoutStock_journalInput = {
    stock_id?: number
    store_id: number
    product_id: number
    quantity: number
  }

  export type StockCreateOrConnectWithoutStock_journalInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutStock_journalInput, StockUncheckedCreateWithoutStock_journalInput>
  }

  export type StoreCreateWithoutStock_journalInput = {
    store_name: string
    store_address: string
    country: string
    city: string
    lat: string
    lng: string
    isActive?: boolean
    orders?: OrderCreateNestedManyWithoutStoreInput
    admin?: AdminCreateNestedManyWithoutStoreInput
    stock?: StockCreateNestedManyWithoutStoreInput
    voucher_ongkir?: VoucherOngkirCreateNestedOneWithoutStoreInput
    voucher_stores?: VoucherStoreCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutStock_journalInput = {
    store_id?: number
    store_name: string
    store_address: string
    country: string
    city: string
    lat: string
    lng: string
    isActive?: boolean
    orders?: OrderUncheckedCreateNestedManyWithoutStoreInput
    admin?: AdminUncheckedCreateNestedManyWithoutStoreInput
    stock?: StockUncheckedCreateNestedManyWithoutStoreInput
    voucher_ongkir?: VoucherOngkirUncheckedCreateNestedOneWithoutStoreInput
    voucher_stores?: VoucherStoreUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutStock_journalInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutStock_journalInput, StoreUncheckedCreateWithoutStock_journalInput>
  }

  export type StockUpsertWithoutStock_journalInput = {
    update: XOR<StockUpdateWithoutStock_journalInput, StockUncheckedUpdateWithoutStock_journalInput>
    create: XOR<StockCreateWithoutStock_journalInput, StockUncheckedCreateWithoutStock_journalInput>
    where?: StockWhereInput
  }

  export type StockUpdateToOneWithWhereWithoutStock_journalInput = {
    where?: StockWhereInput
    data: XOR<StockUpdateWithoutStock_journalInput, StockUncheckedUpdateWithoutStock_journalInput>
  }

  export type StockUpdateWithoutStock_journalInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutStockNestedInput
    store?: StoreUpdateOneRequiredWithoutStockNestedInput
  }

  export type StockUncheckedUpdateWithoutStock_journalInput = {
    stock_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type StoreUpsertWithoutStock_journalInput = {
    update: XOR<StoreUpdateWithoutStock_journalInput, StoreUncheckedUpdateWithoutStock_journalInput>
    create: XOR<StoreCreateWithoutStock_journalInput, StoreUncheckedCreateWithoutStock_journalInput>
    where?: StoreWhereInput
  }

  export type StoreUpdateToOneWithWhereWithoutStock_journalInput = {
    where?: StoreWhereInput
    data: XOR<StoreUpdateWithoutStock_journalInput, StoreUncheckedUpdateWithoutStock_journalInput>
  }

  export type StoreUpdateWithoutStock_journalInput = {
    store_name?: StringFieldUpdateOperationsInput | string
    store_address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUpdateManyWithoutStoreNestedInput
    admin?: AdminUpdateManyWithoutStoreNestedInput
    stock?: StockUpdateManyWithoutStoreNestedInput
    voucher_ongkir?: VoucherOngkirUpdateOneWithoutStoreNestedInput
    voucher_stores?: VoucherStoreUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutStock_journalInput = {
    store_id?: IntFieldUpdateOperationsInput | number
    store_name?: StringFieldUpdateOperationsInput | string
    store_address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUncheckedUpdateManyWithoutStoreNestedInput
    admin?: AdminUncheckedUpdateManyWithoutStoreNestedInput
    stock?: StockUncheckedUpdateManyWithoutStoreNestedInput
    voucher_ongkir?: VoucherOngkirUncheckedUpdateOneWithoutStoreNestedInput
    voucher_stores?: VoucherStoreUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type CartItemCreateWithoutProductInput = {
    quantity: number
    cart: CartCreateNestedOneWithoutCart_itemsInput
  }

  export type CartItemUncheckedCreateWithoutProductInput = {
    cart_item_id?: number
    cart_id: number
    quantity: number
  }

  export type CartItemCreateOrConnectWithoutProductInput = {
    where: CartItemWhereUniqueInput
    create: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput>
  }

  export type CartItemCreateManyProductInputEnvelope = {
    data: CartItemCreateManyProductInput | CartItemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type OrderItemCreateWithoutProductInput = {
    quantity: number
    price: number
    subtotal: number
    order: OrderCreateNestedOneWithoutOrder_itemsInput
  }

  export type OrderItemUncheckedCreateWithoutProductInput = {
    order_item_id?: number
    order_id: number
    quantity: number
    price: number
    subtotal: number
  }

  export type OrderItemCreateOrConnectWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput>
  }

  export type OrderItemCreateManyProductInputEnvelope = {
    data: OrderItemCreateManyProductInput | OrderItemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ProductCategoryCreateWithoutProductInput = {
    product_category_name: string
    deletedAt?: Date | string | null
  }

  export type ProductCategoryUncheckedCreateWithoutProductInput = {
    product_category_id?: number
    product_category_name: string
    deletedAt?: Date | string | null
  }

  export type ProductCategoryCreateOrConnectWithoutProductInput = {
    where: ProductCategoryWhereUniqueInput
    create: XOR<ProductCategoryCreateWithoutProductInput, ProductCategoryUncheckedCreateWithoutProductInput>
  }

  export type ProductImgCreateWithoutProductInput = {
    image_url: string
  }

  export type ProductImgUncheckedCreateWithoutProductInput = {
    image_id?: number
    image_url: string
  }

  export type ProductImgCreateOrConnectWithoutProductInput = {
    where: ProductImgWhereUniqueInput
    create: XOR<ProductImgCreateWithoutProductInput, ProductImgUncheckedCreateWithoutProductInput>
  }

  export type ProductImgCreateManyProductInputEnvelope = {
    data: ProductImgCreateManyProductInput | ProductImgCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type StockCreateWithoutProductInput = {
    quantity: number
    store: StoreCreateNestedOneWithoutStockInput
    stock_journal?: StockJournalCreateNestedManyWithoutStockInput
  }

  export type StockUncheckedCreateWithoutProductInput = {
    stock_id?: number
    store_id: number
    quantity: number
    stock_journal?: StockJournalUncheckedCreateNestedManyWithoutStockInput
  }

  export type StockCreateOrConnectWithoutProductInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutProductInput, StockUncheckedCreateWithoutProductInput>
  }

  export type VoucherProductCreateWithoutProductInput = {
    voucher_product_code: string
    voucher_product_nominal: number
    voucher_product_startdate: Date | string
    voucher_product_enddate: Date | string
    created_at: Date | string
    admin: AdminCreateNestedOneWithoutVoucher_productInput
  }

  export type VoucherProductUncheckedCreateWithoutProductInput = {
    voucher_product_id?: number
    voucher_product_code: string
    voucher_product_nominal: number
    voucher_product_startdate: Date | string
    voucher_product_enddate: Date | string
    created_at: Date | string
    admin_responsible: number
  }

  export type VoucherProductCreateOrConnectWithoutProductInput = {
    where: VoucherProductWhereUniqueInput
    create: XOR<VoucherProductCreateWithoutProductInput, VoucherProductUncheckedCreateWithoutProductInput>
  }

  export type VoucherProductCreateManyProductInputEnvelope = {
    data: VoucherProductCreateManyProductInput | VoucherProductCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type CartItemUpsertWithWhereUniqueWithoutProductInput = {
    where: CartItemWhereUniqueInput
    update: XOR<CartItemUpdateWithoutProductInput, CartItemUncheckedUpdateWithoutProductInput>
    create: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput>
  }

  export type CartItemUpdateWithWhereUniqueWithoutProductInput = {
    where: CartItemWhereUniqueInput
    data: XOR<CartItemUpdateWithoutProductInput, CartItemUncheckedUpdateWithoutProductInput>
  }

  export type CartItemUpdateManyWithWhereWithoutProductInput = {
    where: CartItemScalarWhereInput
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyWithoutProductInput>
  }

  export type CartItemScalarWhereInput = {
    AND?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
    OR?: CartItemScalarWhereInput[]
    NOT?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
    cart_item_id?: IntFilter<"CartItem"> | number
    cart_id?: IntFilter<"CartItem"> | number
    product_id?: IntFilter<"CartItem"> | number
    quantity?: IntFilter<"CartItem"> | number
  }

  export type OrderItemUpsertWithWhereUniqueWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutProductInput, OrderItemUncheckedUpdateWithoutProductInput>
    create: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutProductInput, OrderItemUncheckedUpdateWithoutProductInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutProductInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutProductInput>
  }

  export type OrderItemScalarWhereInput = {
    AND?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    OR?: OrderItemScalarWhereInput[]
    NOT?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    order_item_id?: IntFilter<"OrderItem"> | number
    order_id?: IntFilter<"OrderItem"> | number
    product_id?: IntFilter<"OrderItem"> | number
    quantity?: IntFilter<"OrderItem"> | number
    price?: IntFilter<"OrderItem"> | number
    subtotal?: IntFilter<"OrderItem"> | number
  }

  export type ProductCategoryUpsertWithoutProductInput = {
    update: XOR<ProductCategoryUpdateWithoutProductInput, ProductCategoryUncheckedUpdateWithoutProductInput>
    create: XOR<ProductCategoryCreateWithoutProductInput, ProductCategoryUncheckedCreateWithoutProductInput>
    where?: ProductCategoryWhereInput
  }

  export type ProductCategoryUpdateToOneWithWhereWithoutProductInput = {
    where?: ProductCategoryWhereInput
    data: XOR<ProductCategoryUpdateWithoutProductInput, ProductCategoryUncheckedUpdateWithoutProductInput>
  }

  export type ProductCategoryUpdateWithoutProductInput = {
    product_category_name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductCategoryUncheckedUpdateWithoutProductInput = {
    product_category_id?: IntFieldUpdateOperationsInput | number
    product_category_name?: StringFieldUpdateOperationsInput | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductImgUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductImgWhereUniqueInput
    update: XOR<ProductImgUpdateWithoutProductInput, ProductImgUncheckedUpdateWithoutProductInput>
    create: XOR<ProductImgCreateWithoutProductInput, ProductImgUncheckedCreateWithoutProductInput>
  }

  export type ProductImgUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductImgWhereUniqueInput
    data: XOR<ProductImgUpdateWithoutProductInput, ProductImgUncheckedUpdateWithoutProductInput>
  }

  export type ProductImgUpdateManyWithWhereWithoutProductInput = {
    where: ProductImgScalarWhereInput
    data: XOR<ProductImgUpdateManyMutationInput, ProductImgUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductImgScalarWhereInput = {
    AND?: ProductImgScalarWhereInput | ProductImgScalarWhereInput[]
    OR?: ProductImgScalarWhereInput[]
    NOT?: ProductImgScalarWhereInput | ProductImgScalarWhereInput[]
    image_id?: IntFilter<"ProductImg"> | number
    image_url?: StringFilter<"ProductImg"> | string
    product_id?: IntFilter<"ProductImg"> | number
  }

  export type StockUpsertWithoutProductInput = {
    update: XOR<StockUpdateWithoutProductInput, StockUncheckedUpdateWithoutProductInput>
    create: XOR<StockCreateWithoutProductInput, StockUncheckedCreateWithoutProductInput>
    where?: StockWhereInput
  }

  export type StockUpdateToOneWithWhereWithoutProductInput = {
    where?: StockWhereInput
    data: XOR<StockUpdateWithoutProductInput, StockUncheckedUpdateWithoutProductInput>
  }

  export type StockUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    store?: StoreUpdateOneRequiredWithoutStockNestedInput
    stock_journal?: StockJournalUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateWithoutProductInput = {
    stock_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    stock_journal?: StockJournalUncheckedUpdateManyWithoutStockNestedInput
  }

  export type VoucherProductUpsertWithWhereUniqueWithoutProductInput = {
    where: VoucherProductWhereUniqueInput
    update: XOR<VoucherProductUpdateWithoutProductInput, VoucherProductUncheckedUpdateWithoutProductInput>
    create: XOR<VoucherProductCreateWithoutProductInput, VoucherProductUncheckedCreateWithoutProductInput>
  }

  export type VoucherProductUpdateWithWhereUniqueWithoutProductInput = {
    where: VoucherProductWhereUniqueInput
    data: XOR<VoucherProductUpdateWithoutProductInput, VoucherProductUncheckedUpdateWithoutProductInput>
  }

  export type VoucherProductUpdateManyWithWhereWithoutProductInput = {
    where: VoucherProductScalarWhereInput
    data: XOR<VoucherProductUpdateManyMutationInput, VoucherProductUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductCreateWithoutProduct_imgInput = {
    product_name: string
    product_price: number
    product_description?: string | null
    deletedAt?: Date | string | null
    cart_items?: CartItemCreateNestedManyWithoutProductInput
    order_items?: OrderItemCreateNestedManyWithoutProductInput
    product_category: ProductCategoryCreateNestedOneWithoutProductInput
    stock?: StockCreateNestedOneWithoutProductInput
    voucher?: VoucherProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutProduct_imgInput = {
    product_id?: number
    product_name: string
    product_price: number
    product_category_id: number
    product_description?: string | null
    deletedAt?: Date | string | null
    cart_items?: CartItemUncheckedCreateNestedManyWithoutProductInput
    order_items?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    stock?: StockUncheckedCreateNestedOneWithoutProductInput
    voucher?: VoucherProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutProduct_imgInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProduct_imgInput, ProductUncheckedCreateWithoutProduct_imgInput>
  }

  export type ProductUpsertWithoutProduct_imgInput = {
    update: XOR<ProductUpdateWithoutProduct_imgInput, ProductUncheckedUpdateWithoutProduct_imgInput>
    create: XOR<ProductCreateWithoutProduct_imgInput, ProductUncheckedCreateWithoutProduct_imgInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutProduct_imgInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutProduct_imgInput, ProductUncheckedUpdateWithoutProduct_imgInput>
  }

  export type ProductUpdateWithoutProduct_imgInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    product_description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cart_items?: CartItemUpdateManyWithoutProductNestedInput
    order_items?: OrderItemUpdateManyWithoutProductNestedInput
    product_category?: ProductCategoryUpdateOneRequiredWithoutProductNestedInput
    stock?: StockUpdateOneWithoutProductNestedInput
    voucher?: VoucherProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutProduct_imgInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    product_category_id?: IntFieldUpdateOperationsInput | number
    product_description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cart_items?: CartItemUncheckedUpdateManyWithoutProductNestedInput
    order_items?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    stock?: StockUncheckedUpdateOneWithoutProductNestedInput
    voucher?: VoucherProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateWithoutProduct_categoryInput = {
    product_name: string
    product_price: number
    product_description?: string | null
    deletedAt?: Date | string | null
    cart_items?: CartItemCreateNestedManyWithoutProductInput
    order_items?: OrderItemCreateNestedManyWithoutProductInput
    product_img?: ProductImgCreateNestedManyWithoutProductInput
    stock?: StockCreateNestedOneWithoutProductInput
    voucher?: VoucherProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutProduct_categoryInput = {
    product_id?: number
    product_name: string
    product_price: number
    product_description?: string | null
    deletedAt?: Date | string | null
    cart_items?: CartItemUncheckedCreateNestedManyWithoutProductInput
    order_items?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    product_img?: ProductImgUncheckedCreateNestedManyWithoutProductInput
    stock?: StockUncheckedCreateNestedOneWithoutProductInput
    voucher?: VoucherProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutProduct_categoryInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProduct_categoryInput, ProductUncheckedCreateWithoutProduct_categoryInput>
  }

  export type ProductCreateManyProduct_categoryInputEnvelope = {
    data: ProductCreateManyProduct_categoryInput | ProductCreateManyProduct_categoryInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutProduct_categoryInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutProduct_categoryInput, ProductUncheckedUpdateWithoutProduct_categoryInput>
    create: XOR<ProductCreateWithoutProduct_categoryInput, ProductUncheckedCreateWithoutProduct_categoryInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutProduct_categoryInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutProduct_categoryInput, ProductUncheckedUpdateWithoutProduct_categoryInput>
  }

  export type ProductUpdateManyWithWhereWithoutProduct_categoryInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutProduct_categoryInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    product_id?: IntFilter<"Product"> | number
    product_name?: StringFilter<"Product"> | string
    product_price?: IntFilter<"Product"> | number
    product_category_id?: IntFilter<"Product"> | number
    product_description?: StringNullableFilter<"Product"> | string | null
    deletedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
  }

  export type AdminCreateWithoutVoucher_storeInput = {
    phone: string
    position: string
    deleted_at?: Date | string | null
    user: UserCreateNestedOneWithoutAdminInput
    store: StoreCreateNestedOneWithoutAdminInput
    admin_orders?: AdminOrderCreateNestedManyWithoutAdminInput
    voucher_ongkir?: VoucherOngkirCreateNestedManyWithoutAdminInput
    voucher_product?: VoucherProductCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutVoucher_storeInput = {
    admin_id?: number
    user_id: string
    store_id: number
    phone: string
    position: string
    deleted_at?: Date | string | null
    admin_orders?: AdminOrderUncheckedCreateNestedManyWithoutAdminInput
    voucher_ongkir?: VoucherOngkirUncheckedCreateNestedManyWithoutAdminInput
    voucher_product?: VoucherProductUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminCreateOrConnectWithoutVoucher_storeInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutVoucher_storeInput, AdminUncheckedCreateWithoutVoucher_storeInput>
  }

  export type StoreCreateWithoutVoucher_storesInput = {
    store_name: string
    store_address: string
    country: string
    city: string
    lat: string
    lng: string
    isActive?: boolean
    orders?: OrderCreateNestedManyWithoutStoreInput
    admin?: AdminCreateNestedManyWithoutStoreInput
    stock?: StockCreateNestedManyWithoutStoreInput
    stock_journal?: StockJournalCreateNestedManyWithoutStoreInput
    voucher_ongkir?: VoucherOngkirCreateNestedOneWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutVoucher_storesInput = {
    store_id?: number
    store_name: string
    store_address: string
    country: string
    city: string
    lat: string
    lng: string
    isActive?: boolean
    orders?: OrderUncheckedCreateNestedManyWithoutStoreInput
    admin?: AdminUncheckedCreateNestedManyWithoutStoreInput
    stock?: StockUncheckedCreateNestedManyWithoutStoreInput
    stock_journal?: StockJournalUncheckedCreateNestedManyWithoutStoreInput
    voucher_ongkir?: VoucherOngkirUncheckedCreateNestedOneWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutVoucher_storesInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutVoucher_storesInput, StoreUncheckedCreateWithoutVoucher_storesInput>
  }

  export type ProfileCreateWithoutVoucher_storeInput = {
    phone?: string | null
    pfp_url?: string | null
    user: UserCreateNestedOneWithoutProfileInput
    cart?: CartCreateNestedManyWithoutProfileInput
    orders?: OrderCreateNestedManyWithoutProfileInput
    Address?: AddressCreateNestedManyWithoutProfileInput
    referral?: ReferralCreateNestedOneWithoutProfileInput
    referred?: ReferralCreateNestedOneWithoutReferredInput
  }

  export type ProfileUncheckedCreateWithoutVoucher_storeInput = {
    profile_id?: number
    user_id: string
    phone?: string | null
    pfp_url?: string | null
    referred_id?: number | null
    cart?: CartUncheckedCreateNestedManyWithoutProfileInput
    orders?: OrderUncheckedCreateNestedManyWithoutProfileInput
    Address?: AddressUncheckedCreateNestedManyWithoutProfileInput
    referral?: ReferralUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutVoucher_storeInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutVoucher_storeInput, ProfileUncheckedCreateWithoutVoucher_storeInput>
  }

  export type AdminUpsertWithoutVoucher_storeInput = {
    update: XOR<AdminUpdateWithoutVoucher_storeInput, AdminUncheckedUpdateWithoutVoucher_storeInput>
    create: XOR<AdminCreateWithoutVoucher_storeInput, AdminUncheckedCreateWithoutVoucher_storeInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutVoucher_storeInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutVoucher_storeInput, AdminUncheckedUpdateWithoutVoucher_storeInput>
  }

  export type AdminUpdateWithoutVoucher_storeInput = {
    phone?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutAdminNestedInput
    store?: StoreUpdateOneRequiredWithoutAdminNestedInput
    admin_orders?: AdminOrderUpdateManyWithoutAdminNestedInput
    voucher_ongkir?: VoucherOngkirUpdateManyWithoutAdminNestedInput
    voucher_product?: VoucherProductUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutVoucher_storeInput = {
    admin_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    store_id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    admin_orders?: AdminOrderUncheckedUpdateManyWithoutAdminNestedInput
    voucher_ongkir?: VoucherOngkirUncheckedUpdateManyWithoutAdminNestedInput
    voucher_product?: VoucherProductUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type StoreUpsertWithoutVoucher_storesInput = {
    update: XOR<StoreUpdateWithoutVoucher_storesInput, StoreUncheckedUpdateWithoutVoucher_storesInput>
    create: XOR<StoreCreateWithoutVoucher_storesInput, StoreUncheckedCreateWithoutVoucher_storesInput>
    where?: StoreWhereInput
  }

  export type StoreUpdateToOneWithWhereWithoutVoucher_storesInput = {
    where?: StoreWhereInput
    data: XOR<StoreUpdateWithoutVoucher_storesInput, StoreUncheckedUpdateWithoutVoucher_storesInput>
  }

  export type StoreUpdateWithoutVoucher_storesInput = {
    store_name?: StringFieldUpdateOperationsInput | string
    store_address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUpdateManyWithoutStoreNestedInput
    admin?: AdminUpdateManyWithoutStoreNestedInput
    stock?: StockUpdateManyWithoutStoreNestedInput
    stock_journal?: StockJournalUpdateManyWithoutStoreNestedInput
    voucher_ongkir?: VoucherOngkirUpdateOneWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutVoucher_storesInput = {
    store_id?: IntFieldUpdateOperationsInput | number
    store_name?: StringFieldUpdateOperationsInput | string
    store_address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUncheckedUpdateManyWithoutStoreNestedInput
    admin?: AdminUncheckedUpdateManyWithoutStoreNestedInput
    stock?: StockUncheckedUpdateManyWithoutStoreNestedInput
    stock_journal?: StockJournalUncheckedUpdateManyWithoutStoreNestedInput
    voucher_ongkir?: VoucherOngkirUncheckedUpdateOneWithoutStoreNestedInput
  }

  export type ProfileUpsertWithWhereUniqueWithoutVoucher_storeInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutVoucher_storeInput, ProfileUncheckedUpdateWithoutVoucher_storeInput>
    create: XOR<ProfileCreateWithoutVoucher_storeInput, ProfileUncheckedCreateWithoutVoucher_storeInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutVoucher_storeInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutVoucher_storeInput, ProfileUncheckedUpdateWithoutVoucher_storeInput>
  }

  export type ProfileUpdateManyWithWhereWithoutVoucher_storeInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutVoucher_storeInput>
  }

  export type AdminCreateWithoutVoucher_ongkirInput = {
    phone: string
    position: string
    deleted_at?: Date | string | null
    user: UserCreateNestedOneWithoutAdminInput
    store: StoreCreateNestedOneWithoutAdminInput
    admin_orders?: AdminOrderCreateNestedManyWithoutAdminInput
    voucher_product?: VoucherProductCreateNestedManyWithoutAdminInput
    voucher_store?: VoucherStoreCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutVoucher_ongkirInput = {
    admin_id?: number
    user_id: string
    store_id: number
    phone: string
    position: string
    deleted_at?: Date | string | null
    admin_orders?: AdminOrderUncheckedCreateNestedManyWithoutAdminInput
    voucher_product?: VoucherProductUncheckedCreateNestedManyWithoutAdminInput
    voucher_store?: VoucherStoreUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminCreateOrConnectWithoutVoucher_ongkirInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutVoucher_ongkirInput, AdminUncheckedCreateWithoutVoucher_ongkirInput>
  }

  export type StoreCreateWithoutVoucher_ongkirInput = {
    store_name: string
    store_address: string
    country: string
    city: string
    lat: string
    lng: string
    isActive?: boolean
    orders?: OrderCreateNestedManyWithoutStoreInput
    admin?: AdminCreateNestedManyWithoutStoreInput
    stock?: StockCreateNestedManyWithoutStoreInput
    stock_journal?: StockJournalCreateNestedManyWithoutStoreInput
    voucher_stores?: VoucherStoreCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutVoucher_ongkirInput = {
    store_id?: number
    store_name: string
    store_address: string
    country: string
    city: string
    lat: string
    lng: string
    isActive?: boolean
    orders?: OrderUncheckedCreateNestedManyWithoutStoreInput
    admin?: AdminUncheckedCreateNestedManyWithoutStoreInput
    stock?: StockUncheckedCreateNestedManyWithoutStoreInput
    stock_journal?: StockJournalUncheckedCreateNestedManyWithoutStoreInput
    voucher_stores?: VoucherStoreUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutVoucher_ongkirInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutVoucher_ongkirInput, StoreUncheckedCreateWithoutVoucher_ongkirInput>
  }

  export type AdminUpsertWithoutVoucher_ongkirInput = {
    update: XOR<AdminUpdateWithoutVoucher_ongkirInput, AdminUncheckedUpdateWithoutVoucher_ongkirInput>
    create: XOR<AdminCreateWithoutVoucher_ongkirInput, AdminUncheckedCreateWithoutVoucher_ongkirInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutVoucher_ongkirInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutVoucher_ongkirInput, AdminUncheckedUpdateWithoutVoucher_ongkirInput>
  }

  export type AdminUpdateWithoutVoucher_ongkirInput = {
    phone?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutAdminNestedInput
    store?: StoreUpdateOneRequiredWithoutAdminNestedInput
    admin_orders?: AdminOrderUpdateManyWithoutAdminNestedInput
    voucher_product?: VoucherProductUpdateManyWithoutAdminNestedInput
    voucher_store?: VoucherStoreUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutVoucher_ongkirInput = {
    admin_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    store_id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    admin_orders?: AdminOrderUncheckedUpdateManyWithoutAdminNestedInput
    voucher_product?: VoucherProductUncheckedUpdateManyWithoutAdminNestedInput
    voucher_store?: VoucherStoreUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type StoreUpsertWithoutVoucher_ongkirInput = {
    update: XOR<StoreUpdateWithoutVoucher_ongkirInput, StoreUncheckedUpdateWithoutVoucher_ongkirInput>
    create: XOR<StoreCreateWithoutVoucher_ongkirInput, StoreUncheckedCreateWithoutVoucher_ongkirInput>
    where?: StoreWhereInput
  }

  export type StoreUpdateToOneWithWhereWithoutVoucher_ongkirInput = {
    where?: StoreWhereInput
    data: XOR<StoreUpdateWithoutVoucher_ongkirInput, StoreUncheckedUpdateWithoutVoucher_ongkirInput>
  }

  export type StoreUpdateWithoutVoucher_ongkirInput = {
    store_name?: StringFieldUpdateOperationsInput | string
    store_address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUpdateManyWithoutStoreNestedInput
    admin?: AdminUpdateManyWithoutStoreNestedInput
    stock?: StockUpdateManyWithoutStoreNestedInput
    stock_journal?: StockJournalUpdateManyWithoutStoreNestedInput
    voucher_stores?: VoucherStoreUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutVoucher_ongkirInput = {
    store_id?: IntFieldUpdateOperationsInput | number
    store_name?: StringFieldUpdateOperationsInput | string
    store_address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    orders?: OrderUncheckedUpdateManyWithoutStoreNestedInput
    admin?: AdminUncheckedUpdateManyWithoutStoreNestedInput
    stock?: StockUncheckedUpdateManyWithoutStoreNestedInput
    stock_journal?: StockJournalUncheckedUpdateManyWithoutStoreNestedInput
    voucher_stores?: VoucherStoreUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type AdminCreateWithoutVoucher_productInput = {
    phone: string
    position: string
    deleted_at?: Date | string | null
    user: UserCreateNestedOneWithoutAdminInput
    store: StoreCreateNestedOneWithoutAdminInput
    admin_orders?: AdminOrderCreateNestedManyWithoutAdminInput
    voucher_ongkir?: VoucherOngkirCreateNestedManyWithoutAdminInput
    voucher_store?: VoucherStoreCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutVoucher_productInput = {
    admin_id?: number
    user_id: string
    store_id: number
    phone: string
    position: string
    deleted_at?: Date | string | null
    admin_orders?: AdminOrderUncheckedCreateNestedManyWithoutAdminInput
    voucher_ongkir?: VoucherOngkirUncheckedCreateNestedManyWithoutAdminInput
    voucher_store?: VoucherStoreUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminCreateOrConnectWithoutVoucher_productInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutVoucher_productInput, AdminUncheckedCreateWithoutVoucher_productInput>
  }

  export type ProductCreateWithoutVoucherInput = {
    product_name: string
    product_price: number
    product_description?: string | null
    deletedAt?: Date | string | null
    cart_items?: CartItemCreateNestedManyWithoutProductInput
    order_items?: OrderItemCreateNestedManyWithoutProductInput
    product_category: ProductCategoryCreateNestedOneWithoutProductInput
    product_img?: ProductImgCreateNestedManyWithoutProductInput
    stock?: StockCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutVoucherInput = {
    product_id?: number
    product_name: string
    product_price: number
    product_category_id: number
    product_description?: string | null
    deletedAt?: Date | string | null
    cart_items?: CartItemUncheckedCreateNestedManyWithoutProductInput
    order_items?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    product_img?: ProductImgUncheckedCreateNestedManyWithoutProductInput
    stock?: StockUncheckedCreateNestedOneWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutVoucherInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutVoucherInput, ProductUncheckedCreateWithoutVoucherInput>
  }

  export type AdminUpsertWithoutVoucher_productInput = {
    update: XOR<AdminUpdateWithoutVoucher_productInput, AdminUncheckedUpdateWithoutVoucher_productInput>
    create: XOR<AdminCreateWithoutVoucher_productInput, AdminUncheckedCreateWithoutVoucher_productInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutVoucher_productInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutVoucher_productInput, AdminUncheckedUpdateWithoutVoucher_productInput>
  }

  export type AdminUpdateWithoutVoucher_productInput = {
    phone?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutAdminNestedInput
    store?: StoreUpdateOneRequiredWithoutAdminNestedInput
    admin_orders?: AdminOrderUpdateManyWithoutAdminNestedInput
    voucher_ongkir?: VoucherOngkirUpdateManyWithoutAdminNestedInput
    voucher_store?: VoucherStoreUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutVoucher_productInput = {
    admin_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    store_id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    admin_orders?: AdminOrderUncheckedUpdateManyWithoutAdminNestedInput
    voucher_ongkir?: VoucherOngkirUncheckedUpdateManyWithoutAdminNestedInput
    voucher_store?: VoucherStoreUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type ProductUpsertWithoutVoucherInput = {
    update: XOR<ProductUpdateWithoutVoucherInput, ProductUncheckedUpdateWithoutVoucherInput>
    create: XOR<ProductCreateWithoutVoucherInput, ProductUncheckedCreateWithoutVoucherInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutVoucherInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutVoucherInput, ProductUncheckedUpdateWithoutVoucherInput>
  }

  export type ProductUpdateWithoutVoucherInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    product_description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cart_items?: CartItemUpdateManyWithoutProductNestedInput
    order_items?: OrderItemUpdateManyWithoutProductNestedInput
    product_category?: ProductCategoryUpdateOneRequiredWithoutProductNestedInput
    product_img?: ProductImgUpdateManyWithoutProductNestedInput
    stock?: StockUpdateOneWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutVoucherInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    product_category_id?: IntFieldUpdateOperationsInput | number
    product_description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cart_items?: CartItemUncheckedUpdateManyWithoutProductNestedInput
    order_items?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    product_img?: ProductImgUncheckedUpdateManyWithoutProductNestedInput
    stock?: StockUncheckedUpdateOneWithoutProductNestedInput
  }

  export type OrderCreateWithoutDiscountInput = {
    order_number?: string | null
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    status: $Enums.OrderStatus
    order_date: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    address: AddressCreateNestedOneWithoutOrdersInput
    profile: ProfileCreateNestedOneWithoutOrdersInput
    store: StoreCreateNestedOneWithoutOrdersInput
    order_cancel?: OrderCancelCreateNestedOneWithoutOrderInput
    admin_orders?: AdminOrderCreateNestedManyWithoutOrderInput
    order_items?: OrderItemCreateNestedManyWithoutOrderInput
    payment_proof?: PaymentProofCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutDiscountInput = {
    order_id?: number
    order_number?: string | null
    store_id: number
    address_id: number
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    status: $Enums.OrderStatus
    order_date: Date | string
    profile_id: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    order_cancel?: OrderCancelUncheckedCreateNestedOneWithoutOrderInput
    admin_orders?: AdminOrderUncheckedCreateNestedManyWithoutOrderInput
    order_items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    payment_proof?: PaymentProofUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutDiscountInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutDiscountInput, OrderUncheckedCreateWithoutDiscountInput>
  }

  export type OrderCreateManyDiscountInputEnvelope = {
    data: OrderCreateManyDiscountInput | OrderCreateManyDiscountInput[]
    skipDuplicates?: boolean
  }

  export type OrderUpsertWithWhereUniqueWithoutDiscountInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutDiscountInput, OrderUncheckedUpdateWithoutDiscountInput>
    create: XOR<OrderCreateWithoutDiscountInput, OrderUncheckedCreateWithoutDiscountInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutDiscountInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutDiscountInput, OrderUncheckedUpdateWithoutDiscountInput>
  }

  export type OrderUpdateManyWithWhereWithoutDiscountInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutDiscountInput>
  }

  export type CartItemCreateWithoutCartInput = {
    quantity: number
    product: ProductCreateNestedOneWithoutCart_itemsInput
  }

  export type CartItemUncheckedCreateWithoutCartInput = {
    cart_item_id?: number
    product_id: number
    quantity: number
  }

  export type CartItemCreateOrConnectWithoutCartInput = {
    where: CartItemWhereUniqueInput
    create: XOR<CartItemCreateWithoutCartInput, CartItemUncheckedCreateWithoutCartInput>
  }

  export type CartItemCreateManyCartInputEnvelope = {
    data: CartItemCreateManyCartInput | CartItemCreateManyCartInput[]
    skipDuplicates?: boolean
  }

  export type ProfileCreateWithoutCartInput = {
    phone?: string | null
    pfp_url?: string | null
    user: UserCreateNestedOneWithoutProfileInput
    orders?: OrderCreateNestedManyWithoutProfileInput
    voucher_store?: VoucherStoreCreateNestedManyWithoutProfilesInput
    Address?: AddressCreateNestedManyWithoutProfileInput
    referral?: ReferralCreateNestedOneWithoutProfileInput
    referred?: ReferralCreateNestedOneWithoutReferredInput
  }

  export type ProfileUncheckedCreateWithoutCartInput = {
    profile_id?: number
    user_id: string
    phone?: string | null
    pfp_url?: string | null
    referred_id?: number | null
    orders?: OrderUncheckedCreateNestedManyWithoutProfileInput
    voucher_store?: VoucherStoreUncheckedCreateNestedManyWithoutProfilesInput
    Address?: AddressUncheckedCreateNestedManyWithoutProfileInput
    referral?: ReferralUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutCartInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutCartInput, ProfileUncheckedCreateWithoutCartInput>
  }

  export type CartItemUpsertWithWhereUniqueWithoutCartInput = {
    where: CartItemWhereUniqueInput
    update: XOR<CartItemUpdateWithoutCartInput, CartItemUncheckedUpdateWithoutCartInput>
    create: XOR<CartItemCreateWithoutCartInput, CartItemUncheckedCreateWithoutCartInput>
  }

  export type CartItemUpdateWithWhereUniqueWithoutCartInput = {
    where: CartItemWhereUniqueInput
    data: XOR<CartItemUpdateWithoutCartInput, CartItemUncheckedUpdateWithoutCartInput>
  }

  export type CartItemUpdateManyWithWhereWithoutCartInput = {
    where: CartItemScalarWhereInput
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyWithoutCartInput>
  }

  export type ProfileUpsertWithoutCartInput = {
    update: XOR<ProfileUpdateWithoutCartInput, ProfileUncheckedUpdateWithoutCartInput>
    create: XOR<ProfileCreateWithoutCartInput, ProfileUncheckedCreateWithoutCartInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutCartInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutCartInput, ProfileUncheckedUpdateWithoutCartInput>
  }

  export type ProfileUpdateWithoutCartInput = {
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    orders?: OrderUpdateManyWithoutProfileNestedInput
    voucher_store?: VoucherStoreUpdateManyWithoutProfilesNestedInput
    Address?: AddressUpdateManyWithoutProfileNestedInput
    referral?: ReferralUpdateOneWithoutProfileNestedInput
    referred?: ReferralUpdateOneWithoutReferredNestedInput
  }

  export type ProfileUncheckedUpdateWithoutCartInput = {
    profile_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
    referred_id?: NullableIntFieldUpdateOperationsInput | number | null
    orders?: OrderUncheckedUpdateManyWithoutProfileNestedInput
    voucher_store?: VoucherStoreUncheckedUpdateManyWithoutProfilesNestedInput
    Address?: AddressUncheckedUpdateManyWithoutProfileNestedInput
    referral?: ReferralUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type CartCreateWithoutCart_itemsInput = {
    created_at: Date | string
    profile: ProfileCreateNestedOneWithoutCartInput
  }

  export type CartUncheckedCreateWithoutCart_itemsInput = {
    cart_id?: number
    created_at: Date | string
    profile_id: number
  }

  export type CartCreateOrConnectWithoutCart_itemsInput = {
    where: CartWhereUniqueInput
    create: XOR<CartCreateWithoutCart_itemsInput, CartUncheckedCreateWithoutCart_itemsInput>
  }

  export type ProductCreateWithoutCart_itemsInput = {
    product_name: string
    product_price: number
    product_description?: string | null
    deletedAt?: Date | string | null
    order_items?: OrderItemCreateNestedManyWithoutProductInput
    product_category: ProductCategoryCreateNestedOneWithoutProductInput
    product_img?: ProductImgCreateNestedManyWithoutProductInput
    stock?: StockCreateNestedOneWithoutProductInput
    voucher?: VoucherProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutCart_itemsInput = {
    product_id?: number
    product_name: string
    product_price: number
    product_category_id: number
    product_description?: string | null
    deletedAt?: Date | string | null
    order_items?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    product_img?: ProductImgUncheckedCreateNestedManyWithoutProductInput
    stock?: StockUncheckedCreateNestedOneWithoutProductInput
    voucher?: VoucherProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCart_itemsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCart_itemsInput, ProductUncheckedCreateWithoutCart_itemsInput>
  }

  export type CartUpsertWithoutCart_itemsInput = {
    update: XOR<CartUpdateWithoutCart_itemsInput, CartUncheckedUpdateWithoutCart_itemsInput>
    create: XOR<CartCreateWithoutCart_itemsInput, CartUncheckedCreateWithoutCart_itemsInput>
    where?: CartWhereInput
  }

  export type CartUpdateToOneWithWhereWithoutCart_itemsInput = {
    where?: CartWhereInput
    data: XOR<CartUpdateWithoutCart_itemsInput, CartUncheckedUpdateWithoutCart_itemsInput>
  }

  export type CartUpdateWithoutCart_itemsInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutCartNestedInput
  }

  export type CartUncheckedUpdateWithoutCart_itemsInput = {
    cart_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProductUpsertWithoutCart_itemsInput = {
    update: XOR<ProductUpdateWithoutCart_itemsInput, ProductUncheckedUpdateWithoutCart_itemsInput>
    create: XOR<ProductCreateWithoutCart_itemsInput, ProductUncheckedCreateWithoutCart_itemsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutCart_itemsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutCart_itemsInput, ProductUncheckedUpdateWithoutCart_itemsInput>
  }

  export type ProductUpdateWithoutCart_itemsInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    product_description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_items?: OrderItemUpdateManyWithoutProductNestedInput
    product_category?: ProductCategoryUpdateOneRequiredWithoutProductNestedInput
    product_img?: ProductImgUpdateManyWithoutProductNestedInput
    stock?: StockUpdateOneWithoutProductNestedInput
    voucher?: VoucherProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutCart_itemsInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    product_category_id?: IntFieldUpdateOperationsInput | number
    product_description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_items?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    product_img?: ProductImgUncheckedUpdateManyWithoutProductNestedInput
    stock?: StockUncheckedUpdateOneWithoutProductNestedInput
    voucher?: VoucherProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type AddressCreateWithoutOrdersInput = {
    street: string
    city: string
    country: string
    lat: string
    lng: string
    post_code: string
    address_name: string
    address_contact: string
    deleted_at?: Date | string | null
    profile: ProfileCreateNestedOneWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutOrdersInput = {
    address_id?: number
    street: string
    city: string
    country: string
    lat: string
    lng: string
    post_code: string
    address_name: string
    address_contact: string
    profile_id: number
    deleted_at?: Date | string | null
  }

  export type AddressCreateOrConnectWithoutOrdersInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutOrdersInput, AddressUncheckedCreateWithoutOrdersInput>
  }

  export type ProfileCreateWithoutOrdersInput = {
    phone?: string | null
    pfp_url?: string | null
    user: UserCreateNestedOneWithoutProfileInput
    cart?: CartCreateNestedManyWithoutProfileInput
    voucher_store?: VoucherStoreCreateNestedManyWithoutProfilesInput
    Address?: AddressCreateNestedManyWithoutProfileInput
    referral?: ReferralCreateNestedOneWithoutProfileInput
    referred?: ReferralCreateNestedOneWithoutReferredInput
  }

  export type ProfileUncheckedCreateWithoutOrdersInput = {
    profile_id?: number
    user_id: string
    phone?: string | null
    pfp_url?: string | null
    referred_id?: number | null
    cart?: CartUncheckedCreateNestedManyWithoutProfileInput
    voucher_store?: VoucherStoreUncheckedCreateNestedManyWithoutProfilesInput
    Address?: AddressUncheckedCreateNestedManyWithoutProfileInput
    referral?: ReferralUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutOrdersInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutOrdersInput, ProfileUncheckedCreateWithoutOrdersInput>
  }

  export type StoreCreateWithoutOrdersInput = {
    store_name: string
    store_address: string
    country: string
    city: string
    lat: string
    lng: string
    isActive?: boolean
    admin?: AdminCreateNestedManyWithoutStoreInput
    stock?: StockCreateNestedManyWithoutStoreInput
    stock_journal?: StockJournalCreateNestedManyWithoutStoreInput
    voucher_ongkir?: VoucherOngkirCreateNestedOneWithoutStoreInput
    voucher_stores?: VoucherStoreCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutOrdersInput = {
    store_id?: number
    store_name: string
    store_address: string
    country: string
    city: string
    lat: string
    lng: string
    isActive?: boolean
    admin?: AdminUncheckedCreateNestedManyWithoutStoreInput
    stock?: StockUncheckedCreateNestedManyWithoutStoreInput
    stock_journal?: StockJournalUncheckedCreateNestedManyWithoutStoreInput
    voucher_ongkir?: VoucherOngkirUncheckedCreateNestedOneWithoutStoreInput
    voucher_stores?: VoucherStoreUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutOrdersInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutOrdersInput, StoreUncheckedCreateWithoutOrdersInput>
  }

  export type DiscountCreateWithoutOrdersInput = {
    discount_product: string
    discount_amount: number
    created_at: Date | string
    discount_startdate: Date | string
    discount_enddate: Date | string
    isActive: boolean
  }

  export type DiscountUncheckedCreateWithoutOrdersInput = {
    discount_id?: number
    discount_product: string
    discount_amount: number
    created_at: Date | string
    discount_startdate: Date | string
    discount_enddate: Date | string
    isActive: boolean
  }

  export type DiscountCreateOrConnectWithoutOrdersInput = {
    where: DiscountWhereUniqueInput
    create: XOR<DiscountCreateWithoutOrdersInput, DiscountUncheckedCreateWithoutOrdersInput>
  }

  export type OrderCancelCreateWithoutOrderInput = {
    reason: string
    canceled_at: Date | string
  }

  export type OrderCancelUncheckedCreateWithoutOrderInput = {
    order_cancel_id?: number
    reason: string
    canceled_at: Date | string
  }

  export type OrderCancelCreateOrConnectWithoutOrderInput = {
    where: OrderCancelWhereUniqueInput
    create: XOR<OrderCancelCreateWithoutOrderInput, OrderCancelUncheckedCreateWithoutOrderInput>
  }

  export type AdminOrderCreateWithoutOrderInput = {
    action: $Enums.ActionEnum
    action_time: Date | string
    admin: AdminCreateNestedOneWithoutAdmin_ordersInput
  }

  export type AdminOrderUncheckedCreateWithoutOrderInput = {
    admin_order_id?: number
    admin_id: number
    action: $Enums.ActionEnum
    action_time: Date | string
  }

  export type AdminOrderCreateOrConnectWithoutOrderInput = {
    where: AdminOrderWhereUniqueInput
    create: XOR<AdminOrderCreateWithoutOrderInput, AdminOrderUncheckedCreateWithoutOrderInput>
  }

  export type AdminOrderCreateManyOrderInputEnvelope = {
    data: AdminOrderCreateManyOrderInput | AdminOrderCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type OrderItemCreateWithoutOrderInput = {
    quantity: number
    price: number
    subtotal: number
    product: ProductCreateNestedOneWithoutOrder_itemsInput
  }

  export type OrderItemUncheckedCreateWithoutOrderInput = {
    order_item_id?: number
    product_id: number
    quantity: number
    price: number
    subtotal: number
  }

  export type OrderItemCreateOrConnectWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemCreateManyOrderInputEnvelope = {
    data: OrderItemCreateManyOrderInput | OrderItemCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type PaymentProofCreateWithoutOrderInput = {
    image_url: string
    uploaded_at: Date | string
    status: $Enums.PaymentStatus
  }

  export type PaymentProofUncheckedCreateWithoutOrderInput = {
    payment_proof_id?: number
    image_url: string
    uploaded_at: Date | string
    status: $Enums.PaymentStatus
  }

  export type PaymentProofCreateOrConnectWithoutOrderInput = {
    where: PaymentProofWhereUniqueInput
    create: XOR<PaymentProofCreateWithoutOrderInput, PaymentProofUncheckedCreateWithoutOrderInput>
  }

  export type AddressUpsertWithoutOrdersInput = {
    update: XOR<AddressUpdateWithoutOrdersInput, AddressUncheckedUpdateWithoutOrdersInput>
    create: XOR<AddressCreateWithoutOrdersInput, AddressUncheckedCreateWithoutOrdersInput>
    where?: AddressWhereInput
  }

  export type AddressUpdateToOneWithWhereWithoutOrdersInput = {
    where?: AddressWhereInput
    data: XOR<AddressUpdateWithoutOrdersInput, AddressUncheckedUpdateWithoutOrdersInput>
  }

  export type AddressUpdateWithoutOrdersInput = {
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    post_code?: StringFieldUpdateOperationsInput | string
    address_name?: StringFieldUpdateOperationsInput | string
    address_contact?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: ProfileUpdateOneRequiredWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateWithoutOrdersInput = {
    address_id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    post_code?: StringFieldUpdateOperationsInput | string
    address_name?: StringFieldUpdateOperationsInput | string
    address_contact?: StringFieldUpdateOperationsInput | string
    profile_id?: IntFieldUpdateOperationsInput | number
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProfileUpsertWithoutOrdersInput = {
    update: XOR<ProfileUpdateWithoutOrdersInput, ProfileUncheckedUpdateWithoutOrdersInput>
    create: XOR<ProfileCreateWithoutOrdersInput, ProfileUncheckedCreateWithoutOrdersInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutOrdersInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutOrdersInput, ProfileUncheckedUpdateWithoutOrdersInput>
  }

  export type ProfileUpdateWithoutOrdersInput = {
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    cart?: CartUpdateManyWithoutProfileNestedInput
    voucher_store?: VoucherStoreUpdateManyWithoutProfilesNestedInput
    Address?: AddressUpdateManyWithoutProfileNestedInput
    referral?: ReferralUpdateOneWithoutProfileNestedInput
    referred?: ReferralUpdateOneWithoutReferredNestedInput
  }

  export type ProfileUncheckedUpdateWithoutOrdersInput = {
    profile_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
    referred_id?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: CartUncheckedUpdateManyWithoutProfileNestedInput
    voucher_store?: VoucherStoreUncheckedUpdateManyWithoutProfilesNestedInput
    Address?: AddressUncheckedUpdateManyWithoutProfileNestedInput
    referral?: ReferralUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type StoreUpsertWithoutOrdersInput = {
    update: XOR<StoreUpdateWithoutOrdersInput, StoreUncheckedUpdateWithoutOrdersInput>
    create: XOR<StoreCreateWithoutOrdersInput, StoreUncheckedCreateWithoutOrdersInput>
    where?: StoreWhereInput
  }

  export type StoreUpdateToOneWithWhereWithoutOrdersInput = {
    where?: StoreWhereInput
    data: XOR<StoreUpdateWithoutOrdersInput, StoreUncheckedUpdateWithoutOrdersInput>
  }

  export type StoreUpdateWithoutOrdersInput = {
    store_name?: StringFieldUpdateOperationsInput | string
    store_address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admin?: AdminUpdateManyWithoutStoreNestedInput
    stock?: StockUpdateManyWithoutStoreNestedInput
    stock_journal?: StockJournalUpdateManyWithoutStoreNestedInput
    voucher_ongkir?: VoucherOngkirUpdateOneWithoutStoreNestedInput
    voucher_stores?: VoucherStoreUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutOrdersInput = {
    store_id?: IntFieldUpdateOperationsInput | number
    store_name?: StringFieldUpdateOperationsInput | string
    store_address?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    admin?: AdminUncheckedUpdateManyWithoutStoreNestedInput
    stock?: StockUncheckedUpdateManyWithoutStoreNestedInput
    stock_journal?: StockJournalUncheckedUpdateManyWithoutStoreNestedInput
    voucher_ongkir?: VoucherOngkirUncheckedUpdateOneWithoutStoreNestedInput
    voucher_stores?: VoucherStoreUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type DiscountUpsertWithoutOrdersInput = {
    update: XOR<DiscountUpdateWithoutOrdersInput, DiscountUncheckedUpdateWithoutOrdersInput>
    create: XOR<DiscountCreateWithoutOrdersInput, DiscountUncheckedCreateWithoutOrdersInput>
    where?: DiscountWhereInput
  }

  export type DiscountUpdateToOneWithWhereWithoutOrdersInput = {
    where?: DiscountWhereInput
    data: XOR<DiscountUpdateWithoutOrdersInput, DiscountUncheckedUpdateWithoutOrdersInput>
  }

  export type DiscountUpdateWithoutOrdersInput = {
    discount_product?: StringFieldUpdateOperationsInput | string
    discount_amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    discount_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    discount_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DiscountUncheckedUpdateWithoutOrdersInput = {
    discount_id?: IntFieldUpdateOperationsInput | number
    discount_product?: StringFieldUpdateOperationsInput | string
    discount_amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    discount_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    discount_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrderCancelUpsertWithoutOrderInput = {
    update: XOR<OrderCancelUpdateWithoutOrderInput, OrderCancelUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderCancelCreateWithoutOrderInput, OrderCancelUncheckedCreateWithoutOrderInput>
    where?: OrderCancelWhereInput
  }

  export type OrderCancelUpdateToOneWithWhereWithoutOrderInput = {
    where?: OrderCancelWhereInput
    data: XOR<OrderCancelUpdateWithoutOrderInput, OrderCancelUncheckedUpdateWithoutOrderInput>
  }

  export type OrderCancelUpdateWithoutOrderInput = {
    reason?: StringFieldUpdateOperationsInput | string
    canceled_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCancelUncheckedUpdateWithoutOrderInput = {
    order_cancel_id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    canceled_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminOrderUpsertWithWhereUniqueWithoutOrderInput = {
    where: AdminOrderWhereUniqueInput
    update: XOR<AdminOrderUpdateWithoutOrderInput, AdminOrderUncheckedUpdateWithoutOrderInput>
    create: XOR<AdminOrderCreateWithoutOrderInput, AdminOrderUncheckedCreateWithoutOrderInput>
  }

  export type AdminOrderUpdateWithWhereUniqueWithoutOrderInput = {
    where: AdminOrderWhereUniqueInput
    data: XOR<AdminOrderUpdateWithoutOrderInput, AdminOrderUncheckedUpdateWithoutOrderInput>
  }

  export type AdminOrderUpdateManyWithWhereWithoutOrderInput = {
    where: AdminOrderScalarWhereInput
    data: XOR<AdminOrderUpdateManyMutationInput, AdminOrderUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderItemUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutOrderInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutOrderInput>
  }

  export type PaymentProofUpsertWithoutOrderInput = {
    update: XOR<PaymentProofUpdateWithoutOrderInput, PaymentProofUncheckedUpdateWithoutOrderInput>
    create: XOR<PaymentProofCreateWithoutOrderInput, PaymentProofUncheckedCreateWithoutOrderInput>
    where?: PaymentProofWhereInput
  }

  export type PaymentProofUpdateToOneWithWhereWithoutOrderInput = {
    where?: PaymentProofWhereInput
    data: XOR<PaymentProofUpdateWithoutOrderInput, PaymentProofUncheckedUpdateWithoutOrderInput>
  }

  export type PaymentProofUpdateWithoutOrderInput = {
    image_url?: StringFieldUpdateOperationsInput | string
    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type PaymentProofUncheckedUpdateWithoutOrderInput = {
    payment_proof_id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    uploaded_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type OrderCreateWithoutOrder_itemsInput = {
    order_number?: string | null
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    status: $Enums.OrderStatus
    order_date: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    address: AddressCreateNestedOneWithoutOrdersInput
    profile: ProfileCreateNestedOneWithoutOrdersInput
    store: StoreCreateNestedOneWithoutOrdersInput
    discount?: DiscountCreateNestedOneWithoutOrdersInput
    order_cancel?: OrderCancelCreateNestedOneWithoutOrderInput
    admin_orders?: AdminOrderCreateNestedManyWithoutOrderInput
    payment_proof?: PaymentProofCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutOrder_itemsInput = {
    order_id?: number
    order_number?: string | null
    store_id: number
    address_id: number
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    discount_id?: number | null
    status: $Enums.OrderStatus
    order_date: Date | string
    profile_id: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    order_cancel?: OrderCancelUncheckedCreateNestedOneWithoutOrderInput
    admin_orders?: AdminOrderUncheckedCreateNestedManyWithoutOrderInput
    payment_proof?: PaymentProofUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutOrder_itemsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOrder_itemsInput, OrderUncheckedCreateWithoutOrder_itemsInput>
  }

  export type ProductCreateWithoutOrder_itemsInput = {
    product_name: string
    product_price: number
    product_description?: string | null
    deletedAt?: Date | string | null
    cart_items?: CartItemCreateNestedManyWithoutProductInput
    product_category: ProductCategoryCreateNestedOneWithoutProductInput
    product_img?: ProductImgCreateNestedManyWithoutProductInput
    stock?: StockCreateNestedOneWithoutProductInput
    voucher?: VoucherProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutOrder_itemsInput = {
    product_id?: number
    product_name: string
    product_price: number
    product_category_id: number
    product_description?: string | null
    deletedAt?: Date | string | null
    cart_items?: CartItemUncheckedCreateNestedManyWithoutProductInput
    product_img?: ProductImgUncheckedCreateNestedManyWithoutProductInput
    stock?: StockUncheckedCreateNestedOneWithoutProductInput
    voucher?: VoucherProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutOrder_itemsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutOrder_itemsInput, ProductUncheckedCreateWithoutOrder_itemsInput>
  }

  export type OrderUpsertWithoutOrder_itemsInput = {
    update: XOR<OrderUpdateWithoutOrder_itemsInput, OrderUncheckedUpdateWithoutOrder_itemsInput>
    create: XOR<OrderCreateWithoutOrder_itemsInput, OrderUncheckedCreateWithoutOrder_itemsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutOrder_itemsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutOrder_itemsInput, OrderUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type OrderUpdateWithoutOrder_itemsInput = {
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: AddressUpdateOneRequiredWithoutOrdersNestedInput
    profile?: ProfileUpdateOneRequiredWithoutOrdersNestedInput
    store?: StoreUpdateOneRequiredWithoutOrdersNestedInput
    discount?: DiscountUpdateOneWithoutOrdersNestedInput
    order_cancel?: OrderCancelUpdateOneWithoutOrderNestedInput
    admin_orders?: AdminOrderUpdateManyWithoutOrderNestedInput
    payment_proof?: PaymentProofUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutOrder_itemsInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    store_id?: IntFieldUpdateOperationsInput | number
    address_id?: IntFieldUpdateOperationsInput | number
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    discount_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_id?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_cancel?: OrderCancelUncheckedUpdateOneWithoutOrderNestedInput
    admin_orders?: AdminOrderUncheckedUpdateManyWithoutOrderNestedInput
    payment_proof?: PaymentProofUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type ProductUpsertWithoutOrder_itemsInput = {
    update: XOR<ProductUpdateWithoutOrder_itemsInput, ProductUncheckedUpdateWithoutOrder_itemsInput>
    create: XOR<ProductCreateWithoutOrder_itemsInput, ProductUncheckedCreateWithoutOrder_itemsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutOrder_itemsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutOrder_itemsInput, ProductUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type ProductUpdateWithoutOrder_itemsInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    product_description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cart_items?: CartItemUpdateManyWithoutProductNestedInput
    product_category?: ProductCategoryUpdateOneRequiredWithoutProductNestedInput
    product_img?: ProductImgUpdateManyWithoutProductNestedInput
    stock?: StockUpdateOneWithoutProductNestedInput
    voucher?: VoucherProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutOrder_itemsInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    product_category_id?: IntFieldUpdateOperationsInput | number
    product_description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cart_items?: CartItemUncheckedUpdateManyWithoutProductNestedInput
    product_img?: ProductImgUncheckedUpdateManyWithoutProductNestedInput
    stock?: StockUncheckedUpdateOneWithoutProductNestedInput
    voucher?: VoucherProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type OrderCreateWithoutPayment_proofInput = {
    order_number?: string | null
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    status: $Enums.OrderStatus
    order_date: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    address: AddressCreateNestedOneWithoutOrdersInput
    profile: ProfileCreateNestedOneWithoutOrdersInput
    store: StoreCreateNestedOneWithoutOrdersInput
    discount?: DiscountCreateNestedOneWithoutOrdersInput
    order_cancel?: OrderCancelCreateNestedOneWithoutOrderInput
    admin_orders?: AdminOrderCreateNestedManyWithoutOrderInput
    order_items?: OrderItemCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutPayment_proofInput = {
    order_id?: number
    order_number?: string | null
    store_id: number
    address_id: number
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    discount_id?: number | null
    status: $Enums.OrderStatus
    order_date: Date | string
    profile_id: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    order_cancel?: OrderCancelUncheckedCreateNestedOneWithoutOrderInput
    admin_orders?: AdminOrderUncheckedCreateNestedManyWithoutOrderInput
    order_items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutPayment_proofInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutPayment_proofInput, OrderUncheckedCreateWithoutPayment_proofInput>
  }

  export type OrderUpsertWithoutPayment_proofInput = {
    update: XOR<OrderUpdateWithoutPayment_proofInput, OrderUncheckedUpdateWithoutPayment_proofInput>
    create: XOR<OrderCreateWithoutPayment_proofInput, OrderUncheckedCreateWithoutPayment_proofInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutPayment_proofInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutPayment_proofInput, OrderUncheckedUpdateWithoutPayment_proofInput>
  }

  export type OrderUpdateWithoutPayment_proofInput = {
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: AddressUpdateOneRequiredWithoutOrdersNestedInput
    profile?: ProfileUpdateOneRequiredWithoutOrdersNestedInput
    store?: StoreUpdateOneRequiredWithoutOrdersNestedInput
    discount?: DiscountUpdateOneWithoutOrdersNestedInput
    order_cancel?: OrderCancelUpdateOneWithoutOrderNestedInput
    admin_orders?: AdminOrderUpdateManyWithoutOrderNestedInput
    order_items?: OrderItemUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutPayment_proofInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    store_id?: IntFieldUpdateOperationsInput | number
    address_id?: IntFieldUpdateOperationsInput | number
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    discount_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_id?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_cancel?: OrderCancelUncheckedUpdateOneWithoutOrderNestedInput
    admin_orders?: AdminOrderUncheckedUpdateManyWithoutOrderNestedInput
    order_items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateWithoutOrder_cancelInput = {
    order_number?: string | null
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    status: $Enums.OrderStatus
    order_date: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    address: AddressCreateNestedOneWithoutOrdersInput
    profile: ProfileCreateNestedOneWithoutOrdersInput
    store: StoreCreateNestedOneWithoutOrdersInput
    discount?: DiscountCreateNestedOneWithoutOrdersInput
    admin_orders?: AdminOrderCreateNestedManyWithoutOrderInput
    order_items?: OrderItemCreateNestedManyWithoutOrderInput
    payment_proof?: PaymentProofCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutOrder_cancelInput = {
    order_id?: number
    order_number?: string | null
    store_id: number
    address_id: number
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    discount_id?: number | null
    status: $Enums.OrderStatus
    order_date: Date | string
    profile_id: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    admin_orders?: AdminOrderUncheckedCreateNestedManyWithoutOrderInput
    order_items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    payment_proof?: PaymentProofUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutOrder_cancelInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOrder_cancelInput, OrderUncheckedCreateWithoutOrder_cancelInput>
  }

  export type OrderUpsertWithoutOrder_cancelInput = {
    update: XOR<OrderUpdateWithoutOrder_cancelInput, OrderUncheckedUpdateWithoutOrder_cancelInput>
    create: XOR<OrderCreateWithoutOrder_cancelInput, OrderUncheckedCreateWithoutOrder_cancelInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutOrder_cancelInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutOrder_cancelInput, OrderUncheckedUpdateWithoutOrder_cancelInput>
  }

  export type OrderUpdateWithoutOrder_cancelInput = {
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: AddressUpdateOneRequiredWithoutOrdersNestedInput
    profile?: ProfileUpdateOneRequiredWithoutOrdersNestedInput
    store?: StoreUpdateOneRequiredWithoutOrdersNestedInput
    discount?: DiscountUpdateOneWithoutOrdersNestedInput
    admin_orders?: AdminOrderUpdateManyWithoutOrderNestedInput
    order_items?: OrderItemUpdateManyWithoutOrderNestedInput
    payment_proof?: PaymentProofUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutOrder_cancelInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    store_id?: IntFieldUpdateOperationsInput | number
    address_id?: IntFieldUpdateOperationsInput | number
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    discount_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_id?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    admin_orders?: AdminOrderUncheckedUpdateManyWithoutOrderNestedInput
    order_items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    payment_proof?: PaymentProofUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type AdminCreateWithoutAdmin_ordersInput = {
    phone: string
    position: string
    deleted_at?: Date | string | null
    user: UserCreateNestedOneWithoutAdminInput
    store: StoreCreateNestedOneWithoutAdminInput
    voucher_ongkir?: VoucherOngkirCreateNestedManyWithoutAdminInput
    voucher_product?: VoucherProductCreateNestedManyWithoutAdminInput
    voucher_store?: VoucherStoreCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutAdmin_ordersInput = {
    admin_id?: number
    user_id: string
    store_id: number
    phone: string
    position: string
    deleted_at?: Date | string | null
    voucher_ongkir?: VoucherOngkirUncheckedCreateNestedManyWithoutAdminInput
    voucher_product?: VoucherProductUncheckedCreateNestedManyWithoutAdminInput
    voucher_store?: VoucherStoreUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminCreateOrConnectWithoutAdmin_ordersInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutAdmin_ordersInput, AdminUncheckedCreateWithoutAdmin_ordersInput>
  }

  export type OrderCreateWithoutAdmin_ordersInput = {
    order_number?: string | null
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    status: $Enums.OrderStatus
    order_date: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    address: AddressCreateNestedOneWithoutOrdersInput
    profile: ProfileCreateNestedOneWithoutOrdersInput
    store: StoreCreateNestedOneWithoutOrdersInput
    discount?: DiscountCreateNestedOneWithoutOrdersInput
    order_cancel?: OrderCancelCreateNestedOneWithoutOrderInput
    order_items?: OrderItemCreateNestedManyWithoutOrderInput
    payment_proof?: PaymentProofCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutAdmin_ordersInput = {
    order_id?: number
    order_number?: string | null
    store_id: number
    address_id: number
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    discount_id?: number | null
    status: $Enums.OrderStatus
    order_date: Date | string
    profile_id: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    order_cancel?: OrderCancelUncheckedCreateNestedOneWithoutOrderInput
    order_items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    payment_proof?: PaymentProofUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutAdmin_ordersInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutAdmin_ordersInput, OrderUncheckedCreateWithoutAdmin_ordersInput>
  }

  export type AdminUpsertWithoutAdmin_ordersInput = {
    update: XOR<AdminUpdateWithoutAdmin_ordersInput, AdminUncheckedUpdateWithoutAdmin_ordersInput>
    create: XOR<AdminCreateWithoutAdmin_ordersInput, AdminUncheckedCreateWithoutAdmin_ordersInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutAdmin_ordersInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutAdmin_ordersInput, AdminUncheckedUpdateWithoutAdmin_ordersInput>
  }

  export type AdminUpdateWithoutAdmin_ordersInput = {
    phone?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutAdminNestedInput
    store?: StoreUpdateOneRequiredWithoutAdminNestedInput
    voucher_ongkir?: VoucherOngkirUpdateManyWithoutAdminNestedInput
    voucher_product?: VoucherProductUpdateManyWithoutAdminNestedInput
    voucher_store?: VoucherStoreUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutAdmin_ordersInput = {
    admin_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    store_id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    voucher_ongkir?: VoucherOngkirUncheckedUpdateManyWithoutAdminNestedInput
    voucher_product?: VoucherProductUncheckedUpdateManyWithoutAdminNestedInput
    voucher_store?: VoucherStoreUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type OrderUpsertWithoutAdmin_ordersInput = {
    update: XOR<OrderUpdateWithoutAdmin_ordersInput, OrderUncheckedUpdateWithoutAdmin_ordersInput>
    create: XOR<OrderCreateWithoutAdmin_ordersInput, OrderUncheckedCreateWithoutAdmin_ordersInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutAdmin_ordersInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutAdmin_ordersInput, OrderUncheckedUpdateWithoutAdmin_ordersInput>
  }

  export type OrderUpdateWithoutAdmin_ordersInput = {
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: AddressUpdateOneRequiredWithoutOrdersNestedInput
    profile?: ProfileUpdateOneRequiredWithoutOrdersNestedInput
    store?: StoreUpdateOneRequiredWithoutOrdersNestedInput
    discount?: DiscountUpdateOneWithoutOrdersNestedInput
    order_cancel?: OrderCancelUpdateOneWithoutOrderNestedInput
    order_items?: OrderItemUpdateManyWithoutOrderNestedInput
    payment_proof?: PaymentProofUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutAdmin_ordersInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    store_id?: IntFieldUpdateOperationsInput | number
    address_id?: IntFieldUpdateOperationsInput | number
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    discount_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_id?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_cancel?: OrderCancelUncheckedUpdateOneWithoutOrderNestedInput
    order_items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    payment_proof?: PaymentProofUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CartCreateManyProfileInput = {
    cart_id?: number
    created_at: Date | string
  }

  export type OrderCreateManyProfileInput = {
    order_id?: number
    order_number?: string | null
    store_id: number
    address_id: number
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    discount_id?: number | null
    status: $Enums.OrderStatus
    order_date: Date | string
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type AddressCreateManyProfileInput = {
    address_id?: number
    street: string
    city: string
    country: string
    lat: string
    lng: string
    post_code: string
    address_name: string
    address_contact: string
    deleted_at?: Date | string | null
  }

  export type CartUpdateWithoutProfileInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cart_items?: CartItemUpdateManyWithoutCartNestedInput
  }

  export type CartUncheckedUpdateWithoutProfileInput = {
    cart_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    cart_items?: CartItemUncheckedUpdateManyWithoutCartNestedInput
  }

  export type CartUncheckedUpdateManyWithoutProfileInput = {
    cart_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpdateWithoutProfileInput = {
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: AddressUpdateOneRequiredWithoutOrdersNestedInput
    store?: StoreUpdateOneRequiredWithoutOrdersNestedInput
    discount?: DiscountUpdateOneWithoutOrdersNestedInput
    order_cancel?: OrderCancelUpdateOneWithoutOrderNestedInput
    admin_orders?: AdminOrderUpdateManyWithoutOrderNestedInput
    order_items?: OrderItemUpdateManyWithoutOrderNestedInput
    payment_proof?: PaymentProofUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutProfileInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    store_id?: IntFieldUpdateOperationsInput | number
    address_id?: IntFieldUpdateOperationsInput | number
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    discount_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_cancel?: OrderCancelUncheckedUpdateOneWithoutOrderNestedInput
    admin_orders?: AdminOrderUncheckedUpdateManyWithoutOrderNestedInput
    order_items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    payment_proof?: PaymentProofUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutProfileInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    store_id?: IntFieldUpdateOperationsInput | number
    address_id?: IntFieldUpdateOperationsInput | number
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    discount_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VoucherStoreUpdateWithoutProfilesInput = {
    voucher_store_code?: StringFieldUpdateOperationsInput | string
    voucher_store_amount_percentage?: IntFieldUpdateOperationsInput | number
    voucher_store_exact_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_minimum_buy?: IntFieldUpdateOperationsInput | number
    voucher_store_maximum_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_store_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUpdateOneRequiredWithoutVoucher_storeNestedInput
    store?: StoreUpdateOneRequiredWithoutVoucher_storesNestedInput
  }

  export type VoucherStoreUncheckedUpdateWithoutProfilesInput = {
    voucher_store_id?: IntFieldUpdateOperationsInput | number
    voucher_store_code?: StringFieldUpdateOperationsInput | string
    voucher_store_amount_percentage?: IntFieldUpdateOperationsInput | number
    voucher_store_exact_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_minimum_buy?: IntFieldUpdateOperationsInput | number
    voucher_store_maximum_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_store_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin_responsible?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
  }

  export type VoucherStoreUncheckedUpdateManyWithoutProfilesInput = {
    voucher_store_id?: IntFieldUpdateOperationsInput | number
    voucher_store_code?: StringFieldUpdateOperationsInput | string
    voucher_store_amount_percentage?: IntFieldUpdateOperationsInput | number
    voucher_store_exact_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_minimum_buy?: IntFieldUpdateOperationsInput | number
    voucher_store_maximum_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_store_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin_responsible?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
  }

  export type AddressUpdateWithoutProfileInput = {
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    post_code?: StringFieldUpdateOperationsInput | string
    address_name?: StringFieldUpdateOperationsInput | string
    address_contact?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: OrderUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateWithoutProfileInput = {
    address_id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    post_code?: StringFieldUpdateOperationsInput | string
    address_name?: StringFieldUpdateOperationsInput | string
    address_contact?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: OrderUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateManyWithoutProfileInput = {
    address_id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    lng?: StringFieldUpdateOperationsInput | string
    post_code?: StringFieldUpdateOperationsInput | string
    address_name?: StringFieldUpdateOperationsInput | string
    address_contact?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProfileCreateManyReferredInput = {
    profile_id?: number
    user_id: string
    phone?: string | null
    pfp_url?: string | null
  }

  export type ProfileUpdateWithoutReferredInput = {
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    cart?: CartUpdateManyWithoutProfileNestedInput
    orders?: OrderUpdateManyWithoutProfileNestedInput
    voucher_store?: VoucherStoreUpdateManyWithoutProfilesNestedInput
    Address?: AddressUpdateManyWithoutProfileNestedInput
    referral?: ReferralUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutReferredInput = {
    profile_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
    cart?: CartUncheckedUpdateManyWithoutProfileNestedInput
    orders?: OrderUncheckedUpdateManyWithoutProfileNestedInput
    voucher_store?: VoucherStoreUncheckedUpdateManyWithoutProfilesNestedInput
    Address?: AddressUncheckedUpdateManyWithoutProfileNestedInput
    referral?: ReferralUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateManyWithoutReferredInput = {
    profile_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderCreateManyAddressInput = {
    order_id?: number
    order_number?: string | null
    store_id: number
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    discount_id?: number | null
    status: $Enums.OrderStatus
    order_date: Date | string
    profile_id: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type OrderUpdateWithoutAddressInput = {
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: ProfileUpdateOneRequiredWithoutOrdersNestedInput
    store?: StoreUpdateOneRequiredWithoutOrdersNestedInput
    discount?: DiscountUpdateOneWithoutOrdersNestedInput
    order_cancel?: OrderCancelUpdateOneWithoutOrderNestedInput
    admin_orders?: AdminOrderUpdateManyWithoutOrderNestedInput
    order_items?: OrderItemUpdateManyWithoutOrderNestedInput
    payment_proof?: PaymentProofUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutAddressInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    store_id?: IntFieldUpdateOperationsInput | number
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    discount_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_id?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_cancel?: OrderCancelUncheckedUpdateOneWithoutOrderNestedInput
    admin_orders?: AdminOrderUncheckedUpdateManyWithoutOrderNestedInput
    order_items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    payment_proof?: PaymentProofUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutAddressInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    store_id?: IntFieldUpdateOperationsInput | number
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    discount_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_id?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AdminOrderCreateManyAdminInput = {
    admin_order_id?: number
    order_id: number
    action: $Enums.ActionEnum
    action_time: Date | string
  }

  export type VoucherOngkirCreateManyAdminInput = {
    voucher_ongkir_id?: number
    voucher_ongkir_code: string
    voucher_ongkir_nominal: number
    voucher_ongkir_startdate: Date | string
    voucher_ongkir_enddate: Date | string
    created_at: Date | string
    store_id: number
  }

  export type VoucherProductCreateManyAdminInput = {
    voucher_product_id?: number
    voucher_product_code: string
    voucher_product_nominal: number
    voucher_product_startdate: Date | string
    voucher_product_enddate: Date | string
    created_at: Date | string
    product_id: number
  }

  export type VoucherStoreCreateManyAdminInput = {
    voucher_store_id?: number
    voucher_store_code: string
    voucher_store_amount_percentage: number
    voucher_store_exact_nominal: number
    voucher_store_minimum_buy: number
    voucher_store_maximum_nominal: number
    voucher_store_startdate: Date | string
    voucher_store_enddate: Date | string
    created_at: Date | string
    store_id: number
  }

  export type AdminOrderUpdateWithoutAdminInput = {
    action?: EnumActionEnumFieldUpdateOperationsInput | $Enums.ActionEnum
    action_time?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutAdmin_ordersNestedInput
  }

  export type AdminOrderUncheckedUpdateWithoutAdminInput = {
    admin_order_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    action?: EnumActionEnumFieldUpdateOperationsInput | $Enums.ActionEnum
    action_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminOrderUncheckedUpdateManyWithoutAdminInput = {
    admin_order_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    action?: EnumActionEnumFieldUpdateOperationsInput | $Enums.ActionEnum
    action_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoucherOngkirUpdateWithoutAdminInput = {
    voucher_ongkir_code?: StringFieldUpdateOperationsInput | string
    voucher_ongkir_nominal?: IntFieldUpdateOperationsInput | number
    voucher_ongkir_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_ongkir_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    store?: StoreUpdateOneRequiredWithoutVoucher_ongkirNestedInput
  }

  export type VoucherOngkirUncheckedUpdateWithoutAdminInput = {
    voucher_ongkir_id?: IntFieldUpdateOperationsInput | number
    voucher_ongkir_code?: StringFieldUpdateOperationsInput | string
    voucher_ongkir_nominal?: IntFieldUpdateOperationsInput | number
    voucher_ongkir_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_ongkir_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    store_id?: IntFieldUpdateOperationsInput | number
  }

  export type VoucherOngkirUncheckedUpdateManyWithoutAdminInput = {
    voucher_ongkir_id?: IntFieldUpdateOperationsInput | number
    voucher_ongkir_code?: StringFieldUpdateOperationsInput | string
    voucher_ongkir_nominal?: IntFieldUpdateOperationsInput | number
    voucher_ongkir_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_ongkir_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    store_id?: IntFieldUpdateOperationsInput | number
  }

  export type VoucherProductUpdateWithoutAdminInput = {
    voucher_product_code?: StringFieldUpdateOperationsInput | string
    voucher_product_nominal?: IntFieldUpdateOperationsInput | number
    voucher_product_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_product_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutVoucherNestedInput
  }

  export type VoucherProductUncheckedUpdateWithoutAdminInput = {
    voucher_product_id?: IntFieldUpdateOperationsInput | number
    voucher_product_code?: StringFieldUpdateOperationsInput | string
    voucher_product_nominal?: IntFieldUpdateOperationsInput | number
    voucher_product_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_product_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    product_id?: IntFieldUpdateOperationsInput | number
  }

  export type VoucherProductUncheckedUpdateManyWithoutAdminInput = {
    voucher_product_id?: IntFieldUpdateOperationsInput | number
    voucher_product_code?: StringFieldUpdateOperationsInput | string
    voucher_product_nominal?: IntFieldUpdateOperationsInput | number
    voucher_product_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_product_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    product_id?: IntFieldUpdateOperationsInput | number
  }

  export type VoucherStoreUpdateWithoutAdminInput = {
    voucher_store_code?: StringFieldUpdateOperationsInput | string
    voucher_store_amount_percentage?: IntFieldUpdateOperationsInput | number
    voucher_store_exact_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_minimum_buy?: IntFieldUpdateOperationsInput | number
    voucher_store_maximum_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_store_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    store?: StoreUpdateOneRequiredWithoutVoucher_storesNestedInput
    profiles?: ProfileUpdateManyWithoutVoucher_storeNestedInput
  }

  export type VoucherStoreUncheckedUpdateWithoutAdminInput = {
    voucher_store_id?: IntFieldUpdateOperationsInput | number
    voucher_store_code?: StringFieldUpdateOperationsInput | string
    voucher_store_amount_percentage?: IntFieldUpdateOperationsInput | number
    voucher_store_exact_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_minimum_buy?: IntFieldUpdateOperationsInput | number
    voucher_store_maximum_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_store_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    store_id?: IntFieldUpdateOperationsInput | number
    profiles?: ProfileUncheckedUpdateManyWithoutVoucher_storeNestedInput
  }

  export type VoucherStoreUncheckedUpdateManyWithoutAdminInput = {
    voucher_store_id?: IntFieldUpdateOperationsInput | number
    voucher_store_code?: StringFieldUpdateOperationsInput | string
    voucher_store_amount_percentage?: IntFieldUpdateOperationsInput | number
    voucher_store_exact_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_minimum_buy?: IntFieldUpdateOperationsInput | number
    voucher_store_maximum_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_store_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    store_id?: IntFieldUpdateOperationsInput | number
  }

  export type OrderCreateManyStoreInput = {
    order_id?: number
    order_number?: string | null
    address_id: number
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    discount_id?: number | null
    status: $Enums.OrderStatus
    order_date: Date | string
    profile_id: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type AdminCreateManyStoreInput = {
    admin_id?: number
    user_id: string
    phone: string
    position: string
    deleted_at?: Date | string | null
  }

  export type StockCreateManyStoreInput = {
    stock_id?: number
    product_id: number
    quantity: number
  }

  export type StockJournalCreateManyStoreInput = {
    stock_journal_id?: number
    stock_id: number
    product_id: string
    quantity: number
    type: string
    notes: string
    created_at: Date | string
  }

  export type VoucherStoreCreateManyStoreInput = {
    voucher_store_id?: number
    voucher_store_code: string
    voucher_store_amount_percentage: number
    voucher_store_exact_nominal: number
    voucher_store_minimum_buy: number
    voucher_store_maximum_nominal: number
    voucher_store_startdate: Date | string
    voucher_store_enddate: Date | string
    created_at: Date | string
    admin_responsible: number
  }

  export type OrderUpdateWithoutStoreInput = {
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: AddressUpdateOneRequiredWithoutOrdersNestedInput
    profile?: ProfileUpdateOneRequiredWithoutOrdersNestedInput
    discount?: DiscountUpdateOneWithoutOrdersNestedInput
    order_cancel?: OrderCancelUpdateOneWithoutOrderNestedInput
    admin_orders?: AdminOrderUpdateManyWithoutOrderNestedInput
    order_items?: OrderItemUpdateManyWithoutOrderNestedInput
    payment_proof?: PaymentProofUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutStoreInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    address_id?: IntFieldUpdateOperationsInput | number
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    discount_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_id?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_cancel?: OrderCancelUncheckedUpdateOneWithoutOrderNestedInput
    admin_orders?: AdminOrderUncheckedUpdateManyWithoutOrderNestedInput
    order_items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    payment_proof?: PaymentProofUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutStoreInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    address_id?: IntFieldUpdateOperationsInput | number
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    discount_id?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_id?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AdminUpdateWithoutStoreInput = {
    phone?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutAdminNestedInput
    admin_orders?: AdminOrderUpdateManyWithoutAdminNestedInput
    voucher_ongkir?: VoucherOngkirUpdateManyWithoutAdminNestedInput
    voucher_product?: VoucherProductUpdateManyWithoutAdminNestedInput
    voucher_store?: VoucherStoreUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutStoreInput = {
    admin_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    admin_orders?: AdminOrderUncheckedUpdateManyWithoutAdminNestedInput
    voucher_ongkir?: VoucherOngkirUncheckedUpdateManyWithoutAdminNestedInput
    voucher_product?: VoucherProductUncheckedUpdateManyWithoutAdminNestedInput
    voucher_store?: VoucherStoreUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateManyWithoutStoreInput = {
    admin_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StockUpdateWithoutStoreInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutStockNestedInput
    stock_journal?: StockJournalUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateWithoutStoreInput = {
    stock_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    stock_journal?: StockJournalUncheckedUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateManyWithoutStoreInput = {
    stock_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type StockJournalUpdateWithoutStoreInput = {
    product_id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    stock?: StockUpdateOneRequiredWithoutStock_journalNestedInput
  }

  export type StockJournalUncheckedUpdateWithoutStoreInput = {
    stock_journal_id?: IntFieldUpdateOperationsInput | number
    stock_id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockJournalUncheckedUpdateManyWithoutStoreInput = {
    stock_journal_id?: IntFieldUpdateOperationsInput | number
    stock_id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoucherStoreUpdateWithoutStoreInput = {
    voucher_store_code?: StringFieldUpdateOperationsInput | string
    voucher_store_amount_percentage?: IntFieldUpdateOperationsInput | number
    voucher_store_exact_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_minimum_buy?: IntFieldUpdateOperationsInput | number
    voucher_store_maximum_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_store_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUpdateOneRequiredWithoutVoucher_storeNestedInput
    profiles?: ProfileUpdateManyWithoutVoucher_storeNestedInput
  }

  export type VoucherStoreUncheckedUpdateWithoutStoreInput = {
    voucher_store_id?: IntFieldUpdateOperationsInput | number
    voucher_store_code?: StringFieldUpdateOperationsInput | string
    voucher_store_amount_percentage?: IntFieldUpdateOperationsInput | number
    voucher_store_exact_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_minimum_buy?: IntFieldUpdateOperationsInput | number
    voucher_store_maximum_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_store_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin_responsible?: IntFieldUpdateOperationsInput | number
    profiles?: ProfileUncheckedUpdateManyWithoutVoucher_storeNestedInput
  }

  export type VoucherStoreUncheckedUpdateManyWithoutStoreInput = {
    voucher_store_id?: IntFieldUpdateOperationsInput | number
    voucher_store_code?: StringFieldUpdateOperationsInput | string
    voucher_store_amount_percentage?: IntFieldUpdateOperationsInput | number
    voucher_store_exact_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_minimum_buy?: IntFieldUpdateOperationsInput | number
    voucher_store_maximum_nominal?: IntFieldUpdateOperationsInput | number
    voucher_store_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_store_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin_responsible?: IntFieldUpdateOperationsInput | number
  }

  export type StockJournalCreateManyStockInput = {
    stock_journal_id?: number
    store_id: number
    product_id: string
    quantity: number
    type: string
    notes: string
    created_at: Date | string
  }

  export type StockJournalUpdateWithoutStockInput = {
    product_id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    store?: StoreUpdateOneRequiredWithoutStock_journalNestedInput
  }

  export type StockJournalUncheckedUpdateWithoutStockInput = {
    stock_journal_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockJournalUncheckedUpdateManyWithoutStockInput = {
    stock_journal_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    notes?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartItemCreateManyProductInput = {
    cart_item_id?: number
    cart_id: number
    quantity: number
  }

  export type OrderItemCreateManyProductInput = {
    order_item_id?: number
    order_id: number
    quantity: number
    price: number
    subtotal: number
  }

  export type ProductImgCreateManyProductInput = {
    image_id?: number
    image_url: string
  }

  export type VoucherProductCreateManyProductInput = {
    voucher_product_id?: number
    voucher_product_code: string
    voucher_product_nominal: number
    voucher_product_startdate: Date | string
    voucher_product_enddate: Date | string
    created_at: Date | string
    admin_responsible: number
  }

  export type CartItemUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    cart?: CartUpdateOneRequiredWithoutCart_itemsNestedInput
  }

  export type CartItemUncheckedUpdateWithoutProductInput = {
    cart_item_id?: IntFieldUpdateOperationsInput | number
    cart_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type CartItemUncheckedUpdateManyWithoutProductInput = {
    cart_item_id?: IntFieldUpdateOperationsInput | number
    cart_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    subtotal?: IntFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutOrder_itemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutProductInput = {
    order_item_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    subtotal?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemUncheckedUpdateManyWithoutProductInput = {
    order_item_id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    subtotal?: IntFieldUpdateOperationsInput | number
  }

  export type ProductImgUpdateWithoutProductInput = {
    image_url?: StringFieldUpdateOperationsInput | string
  }

  export type ProductImgUncheckedUpdateWithoutProductInput = {
    image_id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
  }

  export type ProductImgUncheckedUpdateManyWithoutProductInput = {
    image_id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
  }

  export type VoucherProductUpdateWithoutProductInput = {
    voucher_product_code?: StringFieldUpdateOperationsInput | string
    voucher_product_nominal?: IntFieldUpdateOperationsInput | number
    voucher_product_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_product_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUpdateOneRequiredWithoutVoucher_productNestedInput
  }

  export type VoucherProductUncheckedUpdateWithoutProductInput = {
    voucher_product_id?: IntFieldUpdateOperationsInput | number
    voucher_product_code?: StringFieldUpdateOperationsInput | string
    voucher_product_nominal?: IntFieldUpdateOperationsInput | number
    voucher_product_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_product_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin_responsible?: IntFieldUpdateOperationsInput | number
  }

  export type VoucherProductUncheckedUpdateManyWithoutProductInput = {
    voucher_product_id?: IntFieldUpdateOperationsInput | number
    voucher_product_code?: StringFieldUpdateOperationsInput | string
    voucher_product_nominal?: IntFieldUpdateOperationsInput | number
    voucher_product_startdate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucher_product_enddate?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admin_responsible?: IntFieldUpdateOperationsInput | number
  }

  export type ProductCreateManyProduct_categoryInput = {
    product_id?: number
    product_name: string
    product_price: number
    product_description?: string | null
    deletedAt?: Date | string | null
  }

  export type ProductUpdateWithoutProduct_categoryInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    product_description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cart_items?: CartItemUpdateManyWithoutProductNestedInput
    order_items?: OrderItemUpdateManyWithoutProductNestedInput
    product_img?: ProductImgUpdateManyWithoutProductNestedInput
    stock?: StockUpdateOneWithoutProductNestedInput
    voucher?: VoucherProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutProduct_categoryInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    product_description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cart_items?: CartItemUncheckedUpdateManyWithoutProductNestedInput
    order_items?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    product_img?: ProductImgUncheckedUpdateManyWithoutProductNestedInput
    stock?: StockUncheckedUpdateOneWithoutProductNestedInput
    voucher?: VoucherProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutProduct_categoryInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    product_price?: IntFieldUpdateOperationsInput | number
    product_description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProfileUpdateWithoutVoucher_storeInput = {
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    cart?: CartUpdateManyWithoutProfileNestedInput
    orders?: OrderUpdateManyWithoutProfileNestedInput
    Address?: AddressUpdateManyWithoutProfileNestedInput
    referral?: ReferralUpdateOneWithoutProfileNestedInput
    referred?: ReferralUpdateOneWithoutReferredNestedInput
  }

  export type ProfileUncheckedUpdateWithoutVoucher_storeInput = {
    profile_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
    referred_id?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: CartUncheckedUpdateManyWithoutProfileNestedInput
    orders?: OrderUncheckedUpdateManyWithoutProfileNestedInput
    Address?: AddressUncheckedUpdateManyWithoutProfileNestedInput
    referral?: ReferralUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateManyWithoutVoucher_storeInput = {
    profile_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    pfp_url?: NullableStringFieldUpdateOperationsInput | string | null
    referred_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OrderCreateManyDiscountInput = {
    order_id?: number
    order_number?: string | null
    store_id: number
    address_id: number
    total_price: number
    shipping_price?: number | null
    total_payment?: number | null
    tracking_number?: string | null
    status: $Enums.OrderStatus
    order_date: Date | string
    profile_id: number
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type OrderUpdateWithoutDiscountInput = {
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: AddressUpdateOneRequiredWithoutOrdersNestedInput
    profile?: ProfileUpdateOneRequiredWithoutOrdersNestedInput
    store?: StoreUpdateOneRequiredWithoutOrdersNestedInput
    order_cancel?: OrderCancelUpdateOneWithoutOrderNestedInput
    admin_orders?: AdminOrderUpdateManyWithoutOrderNestedInput
    order_items?: OrderItemUpdateManyWithoutOrderNestedInput
    payment_proof?: PaymentProofUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutDiscountInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    store_id?: IntFieldUpdateOperationsInput | number
    address_id?: IntFieldUpdateOperationsInput | number
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_id?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order_cancel?: OrderCancelUncheckedUpdateOneWithoutOrderNestedInput
    admin_orders?: AdminOrderUncheckedUpdateManyWithoutOrderNestedInput
    order_items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    payment_proof?: PaymentProofUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutDiscountInput = {
    order_id?: IntFieldUpdateOperationsInput | number
    order_number?: NullableStringFieldUpdateOperationsInput | string | null
    store_id?: IntFieldUpdateOperationsInput | number
    address_id?: IntFieldUpdateOperationsInput | number
    total_price?: IntFieldUpdateOperationsInput | number
    shipping_price?: NullableIntFieldUpdateOperationsInput | number | null
    total_payment?: NullableIntFieldUpdateOperationsInput | number | null
    tracking_number?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    order_date?: DateTimeFieldUpdateOperationsInput | Date | string
    profile_id?: IntFieldUpdateOperationsInput | number
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CartItemCreateManyCartInput = {
    cart_item_id?: number
    product_id: number
    quantity: number
  }

  export type CartItemUpdateWithoutCartInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutCart_itemsNestedInput
  }

  export type CartItemUncheckedUpdateWithoutCartInput = {
    cart_item_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type CartItemUncheckedUpdateManyWithoutCartInput = {
    cart_item_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type AdminOrderCreateManyOrderInput = {
    admin_order_id?: number
    admin_id: number
    action: $Enums.ActionEnum
    action_time: Date | string
  }

  export type OrderItemCreateManyOrderInput = {
    order_item_id?: number
    product_id: number
    quantity: number
    price: number
    subtotal: number
  }

  export type AdminOrderUpdateWithoutOrderInput = {
    action?: EnumActionEnumFieldUpdateOperationsInput | $Enums.ActionEnum
    action_time?: DateTimeFieldUpdateOperationsInput | Date | string
    admin?: AdminUpdateOneRequiredWithoutAdmin_ordersNestedInput
  }

  export type AdminOrderUncheckedUpdateWithoutOrderInput = {
    admin_order_id?: IntFieldUpdateOperationsInput | number
    admin_id?: IntFieldUpdateOperationsInput | number
    action?: EnumActionEnumFieldUpdateOperationsInput | $Enums.ActionEnum
    action_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminOrderUncheckedUpdateManyWithoutOrderInput = {
    admin_order_id?: IntFieldUpdateOperationsInput | number
    admin_id?: IntFieldUpdateOperationsInput | number
    action?: EnumActionEnumFieldUpdateOperationsInput | $Enums.ActionEnum
    action_time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemUpdateWithoutOrderInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    subtotal?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutOrder_itemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutOrderInput = {
    order_item_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    subtotal?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderInput = {
    order_item_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    subtotal?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}