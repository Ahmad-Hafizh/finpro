generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = "postgresql://postgres.hsleadkzyyhrrhcpspyh:finpro2024@aws-0-ap-southeast-1.pooler.supabase.com:6543/postgres?pgbouncer=true"
  directUrl = "postgresql://postgres.hsleadkzyyhrrhcpspyh:finpro2024@aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres"
  // url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid()) @map("user_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          Role      @default(user)
  updateAt      DateTime  @updatedAt
  accounts      Account[]
  profile       Profile?
  admin         Admin?

  @@map("users")
}

enum Role {
  user
  admin
  super_admin
}

model Account {
  id                String  @id @default(cuid()) @map("account_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Profile {
  profile_id    Int            @id @default(autoincrement())
  user_id       String         @unique
  user          User           @relation(fields: [user_id], references: [id])
  phone         String?
  pfp_url       String?
  cart          Cart[]
  orders        Order[]
  voucher_store VoucherStore[] @relation("UserVouchers")
  Address       Address[]

  // relation to the owned referral code
  referral Referral? @relation(name: "UserProfileReferral")

  // referred to referral relation optional only filled in the sign up once
  referred_id Int?
  referred    Referral? @relation(fields: [referred_id], references: [referral_id], name: "ReferredReferral")

  @@map("profile")
}

model Referral {
  referral_id   Int    @id @default(autoincrement())
  referral_code String

  // relation to profile as ITS THE OWNER
  profile_id Int?     @unique
  profile    Profile? @relation("UserProfileReferral", fields: [profile_id], references: [profile_id])

  // collection of referred profile/user that use this referral code
  referred Profile[] @relation("ReferredReferral")

  @@map("referral")
}

model Address {
  address_id Int     @id @default(autoincrement())
  street     String
  city       String
  province   String
  island     String
  country    String
  profile_id Int
  orders     Order[]
  profile    Profile @relation(fields: [profile_id], references: [profile_id])

  @@map("address")
}

model Admin {
  admin_id        Int              @id @default(autoincrement())
  user_id         String           @unique
  user            User             @relation(fields: [user_id], references: [id])
  store_id        Int
  phone           String
  position        String
  store           Store            @relation(fields: [store_id], references: [store_id])
  admin_orders    AdminOrder[]
  voucher_ongkir  VoucherOngkir[]
  voucher_product VoucherProduct[]
  voucher_store   VoucherStore[]

  @@map("admin")
}

model Store {
  store_id       Int            @id @default(autoincrement())
  store_name     String         @unique
  store_address  String
  city           String
  lat            String
  lng            String
  orders         Order[]
  admin          Admin[]
  stock          Stock[]
  stock_journal  StockJournal[]
  voucher_ongkir VoucherOngkir?
  voucher_stores VoucherStore[]

  @@map("store")
}

model Stock {
  stock_id      Int            @id @default(autoincrement())
  store_id      Int
  product_id    Int            @unique
  quantity      Int
  product       Product        @relation(fields: [product_id], references: [product_id])
  store         Store          @relation(fields: [store_id], references: [store_id])
  stock_journal StockJournal[]

  @@map("stock")
}

model StockJournal {
  stock_journal_id Int      @id @default(autoincrement())
  store_id         Int
  stock_id         Int
  product_id       String   @unique
  quantity         Int
  type             String
  notes            String
  created_at       DateTime
  stock            Stock    @relation(fields: [stock_id], references: [stock_id])
  store            Store    @relation(fields: [store_id], references: [store_id])

  @@map("stock_journal")
}

model Product {
  product_id          Int              @id @default(autoincrement())
  product_name        String           @unique
  product_price       Int
  product_category_id Int
  product_description String?
  deletedAt           DateTime?
  cart_items          CartItem[]
  order_items         OrderItem[]
  product_category    ProductCategory  @relation(fields: [product_category_id], references: [product_category_id])
  product_img         ProductImg[]
  stock               Stock?
  voucher             VoucherProduct[]

  @@map("product")
}

model ProductImg {
  image_id   Int     @id @default(autoincrement())
  image_url  String
  product_id Int
  product    Product @relation(fields: [product_id], references: [product_id])

  @@map("product_img")
}

model ProductCategory {
  product_category_id   Int       @id @default(autoincrement())
  product_category_name String    @unique
  deletedAt             DateTime?
  product               Product[]

  @@map("product_category")
}

model VoucherStore {
  voucher_store_id                Int       @id @default(autoincrement())
  voucher_store_code              String    @unique
  voucher_store_amount_percentage Int
  voucher_store_exact_nominal     Int
  voucher_store_minimum_buy       Int
  voucher_store_maximum_nominal   Int
  voucher_store_startdate         DateTime
  voucher_store_enddate           DateTime
  created_at                      DateTime
  admin_responsible               Int
  store_id                        Int
  admin                           Admin     @relation(fields: [admin_responsible], references: [admin_id])
  store                           Store     @relation(fields: [store_id], references: [store_id])
  profiles                        Profile[] @relation("UserVouchers")

  @@map("voucher_store")
}

model VoucherOngkir {
  voucher_ongkir_id        Int      @id @default(autoincrement())
  voucher_ongkir_code      String   @unique
  voucher_ongkir_nominal   Int
  voucher_ongkir_startdate DateTime
  voucher_ongkir_enddate   DateTime
  created_at               DateTime
  admin_responsible        Int
  store_id                 Int      @unique
  admin                    Admin    @relation(fields: [admin_responsible], references: [admin_id])
  store                    Store    @relation(fields: [store_id], references: [store_id])

  @@map("voucher_ongkir")
}

model VoucherProduct {
  voucher_product_id        Int      @id @default(autoincrement())
  voucher_product_code      String   @unique
  voucher_product_nominal   Int
  voucher_product_startdate DateTime
  voucher_product_enddate   DateTime
  created_at                DateTime
  admin_responsible         Int
  product_id                Int
  admin                     Admin    @relation(fields: [admin_responsible], references: [admin_id])
  product                   Product  @relation(fields: [product_id], references: [product_id])

  @@map("voucher_product")
}

model Discount {
  discount_id        Int      @id @default(autoincrement())
  discount_product   String
  discount_amount    Int
  created_at         DateTime
  discount_startdate DateTime
  discount_enddate   DateTime
  isActive           Boolean

  @@map("discount")
}

model Cart {
  cart_id    Int        @id @default(autoincrement())
  created_at DateTime
  profile_id Int
  cart_items CartItem[]
  profile    Profile    @relation(fields: [profile_id], references: [profile_id])

  @@map("cart")
}

model CartItem {
  cart_item_id Int     @id @default(autoincrement())
  cart_id      Int
  product_id   Int
  quantity     Int
  cart         Cart    @relation(fields: [cart_id], references: [cart_id])
  product      Product @relation(fields: [product_id], references: [product_id])
}

model Order {
  order_id      Int           @id @default(autoincrement())
  store_id      Int
  address_id    Int
  total_price   Int
  status        OrderStatus
  order_date    DateTime
  profile_id    Int
  address       Address       @relation(fields: [address_id], references: [address_id])
  profile       Profile       @relation(fields: [profile_id], references: [profile_id])
  store         Store         @relation(fields: [store_id], references: [store_id])
  order_cancel  OrderCancel?
  admin_orders  AdminOrder[]
  order_items   OrderItem[]
  payment_proof PaymentProof?
}

model OrderItem {
  order_item_id Int     @id @default(autoincrement())
  order_id      Int
  product_id    Int
  quantity      Int
  price         Int
  subtotal      Int
  order         Order   @relation(fields: [order_id], references: [order_id])
  product       Product @relation(fields: [product_id], references: [product_id])

  @@map("order_item")
}

model PaymentProof {
  payment_proof_id Int           @id @default(autoincrement())
  order_id         Int           @unique
  image_url        String
  uploaded_at      DateTime
  status           PaymentStatus
  order            Order         @relation(fields: [order_id], references: [order_id])

  @@map("payment_proof")
}

model OrderCancel {
  order_cancel_id Int      @id @default(autoincrement())
  order_id        Int      @unique
  reason          String
  canceled_at     DateTime
  order           Order    @relation(fields: [order_id], references: [order_id])
}

model AdminOrder {
  admin_order_id Int        @id @default(autoincrement())
  admin_id       Int
  order_id       Int
  action         ActionEnum
  action_time    DateTime
  admin          Admin      @relation(fields: [admin_id], references: [admin_id])
  order          Order      @relation(fields: [order_id], references: [order_id])

  @@map("admin_order")
}

enum StockType {
  in
  out
  transfer
}

enum ActionEnum {
  konfirmasi_pembayaran
  kirim_pesanan
  batalkan_pesanan
}

enum OrderStatus {
  menunggu_pembayaran
  menunggu_konfirmasi
  diproses
  dikirim
  pesanan_dikonfirmasi
  dibatalkan
}

enum PaymentStatus {
  pending
  approved
  rejected
}
